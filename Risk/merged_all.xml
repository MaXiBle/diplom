<?xml version='1.0' encoding='utf-8'?>
<CAPEC_CWE_Data><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.010</Entry_ID><Entry_Name>Hijack Execution Flow: ServicesFile Permissions Weakness</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Accessing Functionality Not Properly Constrained by ACLs</Name><Description>In applications, particularly web applications, access to functionality is mitigated by an authorization framework. This framework maps Access Control Lists (ACLs) to elements of the application's functionality; particularly URL's for web apps. In the case that the administrator failed to specify an ACL for a particular element, an attacker may be able to access it with impunity. An attacker with the ability to access functionality not properly constrained by ACLs can obtain sensitive information and possibly compromise the entire application. Such an attacker can access resources that must be available only to users at a higher privilege level, can access management sections of the application, or can run queries for data that they otherwise not supposed to.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>Implementing the Model-View-Controller (MVC) within Java EE's Servlet paradigm using a "Single front controller" pattern that demands that brokered HTTP requests be authenticated before hand-offs to other Action Servlets. If no security-constraint is placed on those Action Servlets, such that positively no one can access them, the front controller can be subverted.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>276</CWE_ID><Name>Incorrect Default Permissions</Name><Description>Default permissions of a device allow IP spoofing.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>434</CWE_ID><Name>Unrestricted Upload of File with Dangerous Type</Name><Description>ASP file upload</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>1191</CWE_ID><Name>On-Chip Debug and Test Interface With Improper Access Control</Name><Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description></Weakness><Weakness><CWE_ID>1193</CWE_ID><Name>Power-On of Untrusted Execution Core Before Enabling Fabric Access Control</Name><Description>The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.</Description></Weakness><Weakness><CWE_ID>1220</CWE_ID><Name>Insufficient Granularity of Access Control</Name><Description>An operating system has an overly permission Access Control List onsome system files, including those related to user passwords</Description></Weakness><Weakness><CWE_ID>1297</CWE_ID><Name>Unprotected Confidential Information on Device is Accessible by OSAT Vendors</Name><Description>The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.</Description></Weakness><Weakness><CWE_ID>1311</CWE_ID><Name>Improper Translation of Security Attributes by Fabric Bridge</Name><Description>The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.</Description></Weakness><Weakness><CWE_ID>1314</CWE_ID><Name>Missing Write Protection for Parametric Data Values</Name><Description>Kernel can inject faults in computations during the execution of TrustZone leading to information disclosure in Snapdragon Auto, Snapdragon Compute, Snapdragon Connectivity, Snapdragon Consumer Electronics Connectivity, Snapdragon Consumer IOT, Snapdragon Industrial IOT, Snapdragon IoT, Snapdragon Mobile, Snapdragon Voice and Music, Snapdragon Wearables, Snapdragon Wired Infrastructure and Networking.</Description></Weakness><Weakness><CWE_ID>1315</CWE_ID><Name>Improper Setting of Bus Controlling Capability in Fabric End-point</Name><Description>The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.</Description></Weakness><Weakness><CWE_ID>1318</CWE_ID><Name>Missing Support for Security Features in On-chip Fabrics or Buses</Name><Description> On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control. </Description></Weakness><Weakness><CWE_ID>1320</CWE_ID><Name>Improper Protection for Outbound Error Messages and Alert Signals</Name><Description>Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.
			</Description></Weakness><Weakness><CWE_ID>1321</CWE_ID><Name>Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')</Name><Description>Prototype pollution by setting object attributes based on dot-separated path.</Description></Weakness><Weakness><CWE_ID>1327</CWE_ID><Name>Binding to an Unrestricted IP Address</Name><Description>Desktop manager for Kubernetes and container management binds a service to 0.0.0.0, allowing users on the network to make requests to a dashboard API.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Buffer Overflow via Environment Variables</Name><Description>This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.</Description><Mitigations><Mitigation>Do not expose environment variable to the user.</Mitigation><Mitigation>Do not use untrusted data in your environment variables.</Mitigation><Mitigation>Use a language or compiler that performs automatic bounds checking</Mitigation><Mitigation>There are tools such as Sharefuzz [REF-2] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.</Mitigation></Mitigations><Examples><Example><Reference>A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. See also: CVE-1999-0906</Reference><Description /></Example><Example><Reference>A buffer overflow in the rlogin program involves its consumption of the $TERM environmental variable. See also: CVE-1999-0046</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>99</CWE_ID><Name>Improper Control of Resource Identifiers ('Resource Injection')</Name><Description>chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>733</CWE_ID><Name>Compiler Optimization Removal or Modification of Security-critical Code</Name><Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>07</Entry_ID><Entry_Name>Buffer Overflow</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Overflow Buffers</Name><Description>Buffer Overflow attacks target improper or missing bounds checking on buffer operations, typically triggered by input injected by an adversary. As a consequence, an adversary is able to write past the boundaries of allocated buffer regions in memory, causing a program crash or potentially redirection of execution as per the adversaries' choice.</Description><Mitigations><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Use secure functions not vulnerable to buffer overflow.</Mitigation><Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</Mitigation><Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation><Mitigation>Utilize static source code analysis tools to identify potential buffer overflow weaknesses in the software.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>131</CWE_ID><Name>Incorrect Calculation of Buffer Size</Name><Description>Chain: Language interpreter calculates wrong buffer size (CWE-131) by using "size = ptr ? X : Y" instead of "size = (ptr ? X : Y)" expression.</Description></Weakness><Weakness><CWE_ID>129</CWE_ID><Name>Improper Validation of Array Index</Name><Description>Chain: array index error (CWE-129) leads to deadlock (CWE-833)</Description></Weakness><Weakness><CWE_ID>805</CWE_ID><Name>Buffer Access with Incorrect Length Value</Name><Description>Language interpreter API function doesn't validate length argument, leading to information exposure</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>36</Entry_ID><Entry_Name>SSI Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Server Side Include (SSI) Injection</Name><Description>An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands.</Description><Mitigations><Mitigation>Set the OPTIONS IncludesNOEXEC in the global access.conf file or local .htaccess (Apache) file to deny SSI execution in directories that do not need them</Mitigation><Mitigation>All user controllable input must be appropriately sanitized before use in the application. This includes omitting, or encoding, certain characters or strings that have the potential of being interpreted as part of an SSI directive</Mitigation><Mitigation>Server Side Includes must be enabled only if there is a strong business reason to do so. Every additional component enabled on the web server increases the attack surface as well as administrative overhead</Mitigation></Mitigations><Examples><Example><Reference>Consider a website hosted on a server that permits Server Side Includes (SSI), such as Apache with the "Options Includes" directive enabled. Whenever an error occurs, the HTTP Headers along with the entire request are logged, which can then be displayed on a page that allows review of such errors. A malicious user can inject SSI directives in the HTTP Headers of a request designed to create an error. When these logs are eventually reviewed, the server parses the SSI directives and executes them.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>97</CWE_ID><Name>Improper Neutralization of Server-Side Includes (SSI) Within a Web Page</Name><Description>The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Session Sidejacking</Name><Description>Session sidejacking takes advantage of an unencrypted communication channel between a victim and target system. The attacker sniffs traffic on a network looking for session tokens in unencrypted traffic. Once a session token is captured, the attacker performs malicious actions by using the stolen token with the targeted application to impersonate the victim. This attack is a specific method of session hijacking, which is exploiting a valid session token to gain unauthorized access to a target system or information. Other methods to perform a session hijacking are session fixation, cross-site scripting, or compromising a user or server machine and stealing the session token.</Description><Mitigations><Mitigation>Make sure that HTTPS is used to communicate with the target system. Alternatively, use VPN if possible. It is important to ensure that all communication between the client and the server happens via an encrypted secure channel.</Mitigation><Mitigation>Modify the session token with each transmission and protect it with cryptography. Add the idea of request sequencing that gives the server an ability to detect replay attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>523</CWE_ID><Name>Unprotected Transport of Credentials</Name><Description>Login pages do not use adequate measures to protect the user name and password while they are in transit from the client to the server.</Description></Weakness><Weakness><CWE_ID>319</CWE_ID><Name>Cleartext Transmission of Sensitive Information</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>614</CWE_ID><Name>Sensitive Cookie in HTTPS Session Without 'Secure' Attribute</Name><Description>A product does not set the secure flag for a cookie in an https session, which can cause the cookie to be sent in http requests and make it easier for remote attackers to capture this cookie.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Clickjacking</Name><Description>An adversary tricks a victim into unknowingly initiating some action in one system while interacting with the UI from a seemingly completely different, usually an adversary controlled or intended, system.</Description><Mitigations><Mitigation>If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</Mitigation><Mitigation>Turn off JavaScript, Flash and disable CSS.</Mitigation><Mitigation>When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</Mitigation></Mitigations><Examples><Example><Reference>A victim has an authenticated session with a site that provides an electronic payment service to transfer funds between subscribing members. At the same time, the victim receives an e-mail that appears to come from an online publication to which they subscribe with links to today's news articles. The victim clicks on one of these links and is taken to a page with the news story. There is a screen with an advertisement that appears on top of the news article with the 'skip this ad' button. Eager to read the news article, the user clicks on this button. Nothing happens. The user clicks on the button one more time and still nothing happens. In reality, the victim activated a hidden action control located in a transparent layer above the 'skip this ad' button. The ad screen blocking the news article made it likely that the victim would click on the 'skip this ad' button. Clicking on the button, actually initiated the transfer of $1000 from the victim's account with an electronic payment service to an adversary's account. Clicking on the 'skip this ad' button the second time (after nothing seemingly happened the first time) confirmed the transfer of funds to the electronic payment service.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cross Zone Scripting</Name><Description>An attacker is able to cause a victim to load content into their web-browser that bypasses security zone controls and gain access to increased privileges to execute scripting code or other web objects such as unsigned ActiveX controls or applets. This is a privilege elevation attack targeted at zone-based web-browser security.</Description><Mitigations><Mitigation>Disable script execution.</Mitigation><Mitigation>Ensure that sufficient input validation is performed for any potentially untrusted data before it is used in any privileged context or zone</Mitigation><Mitigation>Limit the flow of untrusted data into the privileged areas of the system that run in the higher trust zone</Mitigation><Mitigation>Limit the sites that are being added to the local machine zone and restrict the privileges of the code running in that zone to the bare minimum</Mitigation><Mitigation>Ensure proper HTML output encoding before writing user supplied data to the page</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>250</CWE_ID><Name>Execution with Unnecessary Privileges</Name><Description>Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access "open file" dialog.</Description></Weakness><Weakness><CWE_ID>638</CWE_ID><Name>Not Using Complete Mediation</Name><Description>Server does not properly validate client certificates when reusing cached connections.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>116</CWE_ID><Name>Improper Encoding or Escaping of Output</Name><Description>Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>24</Entry_ID><Entry_Name>HTTP Request Splitting</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>HTTP Request Splitting</Name><Description>
            </Description><Mitigations><Mitigation>Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.</Mitigation><Mitigation>Configuration: front-end HTTP agents notice ambiguous requests.</Mitigation><Mitigation>Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.</Mitigation><Mitigation>Configuration: Disable reuse of back-end connections.</Mitigation><Mitigation>Configuration: Use HTTP/2 for back-end connections.</Mitigation><Mitigation>Configuration: Use the same web server software for front-end and back-end server.</Mitigation><Mitigation>Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.</Mitigation><Mitigation>Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)</Mitigation><Mitigation>Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.</Mitigation><Mitigation>Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.</Mitigation></Mitigations><Examples><Example><Reference>Microsoft Internet Explorer versions 5.01 SP4 and prior, 6.0 SP2 and prior, and 7.0 contain a vulnerability that could allow an unauthenticated, remote adversary to conduct HTTP request splitting and smuggling attacks. The vulnerability is due to an input validation error in the browser that allows adversaries to manipulate certain headers to expose the browser to HTTP request splitting and smuggling attacks. Attacks may include cross-site scripting, proxy cache poisoning, and session fixation. In certain instances, an exploit could allow the adversary to bypass web application firewalls or other filtering devices. Microsoft has confirmed the vulnerability and released software updates.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>113</CWE_ID><Name>Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')</Name><Description>e-commerce app allows HTTP response splitting using CRLF in object id parameters</Description></Weakness><Weakness><CWE_ID>138</CWE_ID><Name>Improper Neutralization of Special Elements</Name><Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description></Weakness><Weakness><CWE_ID>436</CWE_ID><Name>Interpretation Conflict</Name><Description>Interpretation conflict (non-standard behavior) enables XSS because browser ignores invalid characters in the middle of tags.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: XSS through Log Files</Name><Description>This attack pattern has been deprecated as it referes to an existing chain relationship between "CAPEC-93 : Log Injection-Tampering-Forging" and "CAPEC-63 : Cross-Site Scripting". Please refer to these CAPECs going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cross Site Tracing</Name><Description>Cross Site Tracing (XST) enables an adversary to steal the victim's session cookie and possibly other authentication credentials transmitted in the header of the HTTP request when the victim's browser communicates to a destination system's web server.</Description><Mitigations><Mitigation>Administrators should disable support for HTTP TRACE at the destination's web server. Vendors should disable TRACE by default.</Mitigation><Mitigation>Patch web browser against known security origin policy bypass exploits.</Mitigation></Mitigations><Examples><Example><Reference>An adversary determines that a particular system is vulnerable to reflected cross-site scripting (XSS) and endeavors to leverage this weakness to steal the victim's authentication cookie. An adversary realizes that since httpOnly attribute is set on the user's cookie, it is not possible to steal it directly with their malicious script. Instead, the adversary has their script use XMLHTTP ActiveX control in the victim's IE browser to issue an HTTP TRACE to the target system's server which has HTTP TRACE enabled. The original HTTP TRACE request contains the session cookie and so does the echoed response. The adversary picks the session cookie from the body of HTTP TRACE response and ships it to the adversary. The adversary then uses the newly acquired victim's session cookie to impersonate the victim in the target system. In the absence of an XSS weakness on the site with which the victim is interacting, an adversary can get the script to come from the site that they control and get it to execute in the victim's browser (if they can trick the victim's into visiting their malicious website or clicking on the link that they supplies). However, in that case, due to the same origin policy protection mechanism in the browser, the adversary's malicious script cannot directly issue an HTTP TRACE request to the destination system's web server because the malicious script did not originate at that domain. An adversary will then need to find a way to exploit another weakness that would enable them to circumvent the same origin policy protection.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness><Weakness><CWE_ID>648</CWE_ID><Name>Incorrect Use of Privileged APIs</Name><Description>A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Command Line Execution through SQL Injection</Name><Description>An attacker uses standard SQL injection methods to inject data into the command line for execution. This could be done directly through misuse of directives such as MSSQL_xp_cmdshell or indirectly through injection of data into the database that would be interpreted as shell commands. Sometime later, an unscrupulous backend application (or could be part of the functionality of the same application) fetches the injected data stored in the database and uses this data as command line arguments without performing proper validation. The malicious data escapes that data plane by spawning new commands to be executed on the host.</Description><Mitigations><Mitigation>Disable MSSQL xp_cmdshell directive on the database</Mitigation><Mitigation>Properly validate the data (syntactically and semantically) before writing it to the database.</Mitigation><Mitigation>Do not implicitly trust the data stored in the database. Re-validate it prior to usage to make sure that it is safe to use in a given context (e.g. as a command line argument).</Mitigation></Mitigations><Examples><Example><Reference>SQL injection vulnerability in Cacti 0.8.6i and earlier, when register_argc_argv is enabled, allows remote attackers to execute arbitrary SQL commands via the (1) second or (2) third arguments to cmd.php. NOTE: this issue can be leveraged to execute arbitrary commands since the SQL query results are later used in the polling_items array and popen function (CVE-2006-6799). Reference: https://www.cve.org/CVERecord?id=CVE-2006-6799</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>89</CWE_ID><Name>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Name><Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>78</CWE_ID><Name>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Name><Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description></Weakness><Weakness><CWE_ID>114</CWE_ID><Name>Process Control</Name><Description>Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Object Relational Mapping Injection</Name><Description>An attacker leverages a weakness present in the database access layer code generated with an Object Relational Mapping (ORM) tool or a weakness in the way that a developer used a persistence framework to inject their own SQL commands to be executed against the underlying database. The attack here is similar to plain SQL injection, except that the application does not use JDBC to directly talk to the database, but instead it uses a data access layer generated by an ORM tool or framework (e.g. Hibernate). While most of the time code generated by an ORM tool contains safe access methods that are immune to SQL injection, sometimes either due to some weakness in the generated code or due to the fact that the developer failed to use the generated access methods properly, SQL injection is still possible.</Description><Mitigations><Mitigation>Remember to understand how to use the data access methods generated by the ORM tool / framework properly in a way that would leverage the built-in security mechanisms of the framework</Mitigation><Mitigation>Ensure to keep up to date with security relevant updates to the persistence framework used within your application.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>89</CWE_ID><Name>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Name><Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description></Weakness><Weakness><CWE_ID>564</CWE_ID><Name>SQL Injection: Hibernate</Name><Description>Using Hibernate to execute a dynamic SQL statement built with user-controlled input can allow an attacker to modify the statement's meaning or to execute arbitrary SQL commands.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.006</Entry_ID><Entry_Name>Masquerading: Space after Filename</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Cause Web Server Misclassification</Name><Description>An attack of this type exploits a Web server's decision to take action based on filename or file extension. Because different file types are handled by different server processes, misclassification may force the Web server to take unexpected action, or expected actions in an unexpected sequence. This may cause the server to exhaust resources, supply debug or system data to the attacker, or bind an attacker to a remote process.</Description><Mitigations><Mitigation>Implementation: Server routines should be determined by content not determined by filename or file extension.</Mitigation></Mitigations><Examples><Example><Reference>J2EE application servers are supposed to execute Java Server Pages (JSP). There have been disclosure issues relating to Orion Application Server, where an attacker that appends either a period (.) or space characters to the end of a legitimate Http request, then the server displays the full source code in the attackers' web browser. Since remote data and directory access may be accessed directly from the JSP, this is a potentially very serious issue. [REF-6]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>430</CWE_ID><Name>Deployment of Wrong Handler</Name><Description>Arbitrary Perl functions can be loaded by calling a non-existent function that activates a handler.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>SQL Injection through SOAP Parameter Tampering</Name><Description>An attacker modifies the parameters of the SOAP message that is sent from the service consumer to the service provider to initiate a SQL injection attack. On the service provider side, the SOAP message is parsed and parameters are not properly validated before being used to access a database in a way that does not use parameter binding, thus enabling the attacker to control the structure of the executed SQL query. This pattern describes a SQL injection attack with the delivery mechanism being a SOAP message.</Description><Mitigations><Mitigation>Properly validate and sanitize/reject user input at the service provider.</Mitigation><Mitigation>Ensure that prepared statements or other mechanism that enables parameter binding is used when accessing the database in a way that would prevent the attackers' supplied data from controlling the structure of the executed query.</Mitigation><Mitigation>At the database level, ensure that the database user used by the application in a particular context has the minimum needed privileges to the database that are needed to perform the operation. When possible, run queries against pre-generated views rather than the tables directly.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>89</CWE_ID><Name>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Name><Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>JSON Hijacking (aka JavaScript Hijacking)</Name><Description>An attacker targets a system that uses JavaScript Object Notation (JSON) as a transport mechanism between the client and the server (common in Web 2.0 systems using AJAX) to steal possibly confidential information transmitted from the server back to the client inside the JSON object by taking advantage of the loophole in the browser's Same Origin Policy that does not prohibit JavaScript from one website to be included and executed in the context of another website.</Description><Mitigations><Mitigation>Ensure that server side code can differentiate between legitimate requests and forged requests. The solution is similar to protection against Cross Site Request Forger (CSRF), which is to use a hard to guess random nonce (that is unique to the victim's session with the server) that the attacker has no way of knowing (at least in the absence of other weaknesses). Each request from the client to the server should contain this nonce and the server should reject all requests that do not contain the nonce.</Mitigation><Mitigation>On the client side, the system's design could make it difficult to get access to the JSON object content via the script tag. Since the JSON object is never assigned locally to a variable, it cannot be readily modified by the attacker before being used by a script tag. For instance, if while(1) was added to the beginning of the JavaScript returned by the server, trying to access it with a script tag would result in an infinite loop. On the other hand, legitimate client side code can remove the while(1) statement after which the JavaScript can be evaluated. A similar result can be achieved by surrounding the returned JavaScript with comment tags, or using other similar techniques (e.g. wrapping the JavaScript with HTML tags).</Mitigation><Mitigation>Make the URLs in the system used to retrieve JSON objects unpredictable and unique for each user session.</Mitigation><Mitigation>Ensure that to the extent possible, no sensitive data is passed from the server to the client via JSON objects. JavaScript was never intended to play that role, hence the same origin policy does not adequate address this scenario.</Mitigation></Mitigations><Examples><Example><Reference>Gmail service was found to be vulnerable to a JSON Hijacking attack that enabled an attacker to get the contents of the victim's address book. An attacker could send an e-mail to the victim's Gmail account (which ensures that the victim is logged in to Gmail when they receive it) with a link to the attackers' malicious site. If the victim clicked on the link, a request (containing the victim's authenticated session cookie) would be sent to the Gmail servers to fetch the victim's address book. This functionality is typically used by the Gmail service to get this data on the fly so that the user can be provided a list of contacts from which to choose the recipient of the e-mail. When the JSON object with the contacts came back, it was loaded into the JavaScript space via a script tag on the attackers' malicious page. Since the JSON object was never assigned to a local variable (which would have prevented a script from a different domain accessing it due to the browser's same origin policy), another mechanism was needed to access the data that it contained. That mechanism was overwriting the internal array constructor with the attackers' own constructor in order to gain access to the JSON object's contents. These contents could then be transferred to the site controlled by the attacker.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>352</CWE_ID><Name>Cross-Site Request Forgery (CSRF)</Name><Description>web interface allows password changes or stopping a virtual machine via CSRF</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1110</Entry_ID><Entry_Name>Brute Force</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>11</Entry_ID><Entry_Name>Brute Force</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Brute Force</Name><Description>In this attack, some asset (information, functionality, identity, etc.) is protected by a finite secret value. The attacker attempts to gain access to this asset by using trial-and-error to exhaustively explore all the possible secret values in the hope of finding the secret (or a value that is functionally equivalent) that will unlock the asset.</Description><Mitigations><Mitigation>Select a provably large secret space for selection of the secret. Provably large means that the procedure by which the secret is selected does not have artifacts that significantly reduce the size of the total secret space.</Mitigation><Mitigation>Use a secret space that is well known and with no known patterns that may reduce functional size.</Mitigation><Mitigation>Do not provide the means for an attacker to determine success independently. This forces the attacker to check their guesses against an external authority, which can slow the attack and warn the defender. This mitigation may not be possible if testing material must appear externally, such as with a transmitted cryptotext.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>330</CWE_ID><Name>Use of Insufficiently Random Values</Name><Description>Application generates passwords that are based on the time of day.</Description></Weakness><Weakness><CWE_ID>326</CWE_ID><Name>Inadequate Encryption Strength</Name><Description>Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness).</Description></Weakness><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Interface Manipulation</Name><Description>An adversary manipulates the use or processing of an interface (e.g. Application Programming Interface (API) or System-on-Chip (SoC)) resulting in an adverse impact upon the security of the system implementing the interface. This can allow the adversary to bypass access control and/or execute functionality not intended by the interface implementation, possibly compromising the system which integrates the interface. Interface manipulation can take on a number of forms including forcing the unexpected use of an interface or the use of an interface in an unintended way.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1192</CWE_ID><Name>Improper Identifier for IP Block used in System-On-Chip (SOC)</Name><Description>The System-on-Chip (SoC) does not have unique, immutable identifiers for each of its components.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1548</Entry_ID><Entry_Name>Abuse Elevation Control Mechanism</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Authentication Abuse</Name><Description>An attacker obtains unauthorized access to an application, service or device either through knowledge of the inherent weaknesses of an authentication mechanism, or by exploiting a flaw in the authentication scheme's implementation. In such an attack an authentication mechanism is functioning but a carefully controlled sequence of events causes the mechanism to grant access to the attacker.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>1244</CWE_ID><Name>Internal Asset Exposed to Unsafe Debug Access Level or State</Name><Description>After ROM code execution, JTAG access is disabled. But before the ROM code is executed, JTAG access is possible, allowing a user full system access.  This allows a user to modify the boot flow and successfully bypass the secure-boot process.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1548</Entry_ID><Entry_Name>Abuse Elevation Control Mechanism</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Authentication Bypass</Name><Description>An attacker gains access to application, service, or device with the privileges of an authorized or privileged user by evading or circumventing an authentication mechanism. The attacker is therefore able to access protected data without authentication ever having taken place.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Excavation</Name><Description>An adversary actively probes the target in a manner that is designed to solicit information that could be leveraged for malicious purposes.</Description><Mitigations><Mitigation>Minimize error/response output to only what is necessary for functional use or corrective language.</Mitigation><Mitigation>Remove potentially sensitive information that is not necessary for the application's functionality.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>1243</CWE_ID><Name>Sensitive Non-Volatile Information Not Protected During Debug</Name><Description>Access to security-sensitive information stored in fuses is not limited during debug.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Interception</Name><Description>An adversary monitors data streams to or from the target for information gathering purposes. This attack may be undertaken to solely gather sensitive information or to support a further attack against the target. This attack pattern can involve sniffing network traffic as well as other types of data streams (e.g. radio). The adversary can attempt to initiate the establishment of a data stream or passively observe the communications as they unfold. In all variants of this attack, the adversary is not the intended recipient of the data stream. In contrast to other means of gathering information (e.g., targeting data leaks), the adversary must actively position themself so as to observe explicit data channels (e.g. network traffic) and read the content. However, this attack differs from a Adversary-In-the-Middle (CAPEC-94) attack, as the adversary does not alter the content of the communications nor forward data to the intended recipient.</Description><Mitigations><Mitigation>Leverage encryption to encode the transmission of data thus making it accessible only to authorized parties.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>319</CWE_ID><Name>Cleartext Transmission of Sensitive Information</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Choosing Message Identifier</Name><Description>This pattern of attack is defined by the selection of messages distributed via multicast or public information channels that are intended for another client by determining the parameter value assigned to that client. This attack allows the adversary to gain access to potentially privileged information, and to possibly perpetrate other attacks through the distribution means by impersonation. If the channel/message being manipulated is an input rather than output mechanism for the system, (such as a command bus), this style of attack could be used to change the adversary's identifier to more a privileged one.</Description><Mitigations><Mitigation>Re-architect system input/output channels as appropriate to distribute self-protecting data. That is, encrypt (or otherwise protect) channels/messages so that only authorized readers can see them.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>306</CWE_ID><Name>Missing Authentication for Critical Function</Name><Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Double Encoding</Name><Description>The adversary utilizes a repeating of the encoding process for a set of characters (that is, character encoding a character encoding of a character) to obfuscate the payload of a particular request. This may allow the adversary to bypass filters that attempt to detect illegal characters or strings, such as those that might be used in traversal or injection attacks. Filters may be able to catch illegal encoded strings, but may not catch doubly encoded strings. For example, a dot (.), often used in path traversal attacks and therefore often blocked by filters, could be URL encoded as %2E. However, many filters recognize this encoding and would still block the request. In a double encoding, the % in the above URL encoding would be encoded again as %25, resulting in %252E which some filters might not catch, but which could still be interpreted as a dot (.) by interpreters on the target.</Description><Mitigations><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation><Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</Mitigation><Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation><Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation><Mitigation>Refer to the RFCs to safely decode URL.</Mitigation><Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation><Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation></Mitigations><Examples><Example><Reference>Double Enconding Attacks can often be used to bypass Cross Site Scripting (XSS) detection and execute XSS attacks.: Since &lt;, &lt;, and / are often sued to perform web attacks, these may be captured by XSS filters. The use of double encouding prevents the filter from working as intended and allows the XSS to bypass dectection. This can allow an adversary to execute malicious code.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>177</CWE_ID><Name>Improper Handling of URL Encoding (Hex Encoding)</Name><Description>"%0a" (overlaps CRLF)</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>183</CWE_ID><Name>Permissive List of Allowed Inputs</Name><Description>Default allowlist includes unsafe methods, allowing bypass of sandbox</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>692</CWE_ID><Name>Incomplete Denylist to Cross-Site Scripting</Name><Description>Denylist only checks "javascript:" tag</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploit Non-Production Interfaces</Name><Description>
            </Description><Mitigations><Mitigation>Ensure that production systems do not contain non-production interfaces and that these interfaces are only used in development environments.</Mitigation></Mitigations><Examples><Example><Reference>Some software applications include application programming interfaces (APIs) that are intended to allow an administrator to test and refine their domain. These APIs are typically disabled once a system enters a production environment, but may be left in an insecure state due to a configuration error or mismanagement.</Reference><Description /></Example><Example><Reference>Many hardware systems leverage bits typically reserved for future functionality for testing and debugging purposes. If these reserved bits remain enabled in a production environment, it could allow an adversary to induce unwanted/unsupported behavior in the hardware.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>489</CWE_ID><Name>Active Debug Code</Name><Description>The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.</Description></Weakness><Weakness><CWE_ID>1209</CWE_ID><Name>Failure to Disable Reserved Bits</Name><Description>The reserved bits in a hardware design are not disabled prior to production. Typically, reserved bits are used for future capabilities and should not support any functional logic in the design.   However, designers might covertly use these bits to debug or further develop new capabilities in production hardware. Adversaries with access to these bits will write to them in hopes of compromising hardware state.</Description></Weakness><Weakness><CWE_ID>1259</CWE_ID><Name>Improper Restriction of Security Token Assignment</Name><Description>The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.</Description></Weakness><Weakness><CWE_ID>1267</CWE_ID><Name>Policy Uses Obsolete Encoding</Name><Description>The product uses an obsolete encoding mechanism to implement access controls.</Description></Weakness><Weakness><CWE_ID>1270</CWE_ID><Name>Generation of Incorrect Security Tokens</Name><Description>The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.</Description></Weakness><Weakness><CWE_ID>1294</CWE_ID><Name>Insecure Security Identifier Mechanism</Name><Description>The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.</Description></Weakness><Weakness><CWE_ID>1295</CWE_ID><Name>Debug Messages Revealing Unnecessary Information</Name><Description>modem debug messages include cryptographic keys</Description></Weakness><Weakness><CWE_ID>1296</CWE_ID><Name>Incorrect Chaining or Granularity of Debug Components</Name><Description>There is an improper authorization vulnerability in several smartphones.  The system has a logic-judging error, and, under certain scenarios, a successful exploit could allow the attacker to switch to third desktop after a series of operations in ADB mode. (Vulnerability ID: HWPSIRT-2019-10114).</Description></Weakness><Weakness><CWE_ID>1302</CWE_ID><Name>Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)</Name><Description>The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.</Description></Weakness><Weakness><CWE_ID>1313</CWE_ID><Name>Hardware Allows Activation of Test or Debug Logic at Runtime</Name><Description>Processor allows the activation of test or debug logic at runtime, allowing escalation of privileges</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1548</Entry_ID><Entry_Name>Abuse Elevation Control Mechanism</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Privilege Abuse</Name><Description>An adversary is able to exploit features of the target that should be reserved for privileged users or administrators but are exposed to use by lower or non-privileged accounts. Access to sensitive information and functionality must be controlled to ensure that only authorized users are able to access these resources.</Description><Mitigations><Mitigation>Configure account privileges such privileged/administrator functionality is not exposed to non-privileged/lower accounts.</Mitigation></Mitigations><Examples><Example><Reference>Improperly configured account privileges allowed unauthorized users on a hospital's network to access the medical records for over 3,000 patients. Thus compromising data integrity and confidentiality in addition to HIPAA violations.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>269</CWE_ID><Name>Improper Privilege Management</Name><Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description></Weakness><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>1317</CWE_ID><Name>Improper Access Control in Fabric Bridge</Name><Description>Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Buffer Manipulation</Name><Description>An adversary manipulates an application's interaction with a buffer in an attempt to read or modify data they shouldn't have access to. Buffer attacks are distinguished in that it is the buffer space itself that is the target of the attack rather than any code responsible for interpreting the content of the buffer. In virtually all buffer attacks the content that is placed in the buffer is immaterial. Instead, most buffer attacks involve retrieving or providing more input than can be stored in the allocated buffer, resulting in the reading or overwriting of other unintended program memory.</Description><Mitigations><Mitigation>To help protect an application from buffer manipulation attacks, a number of potential mitigations can be leveraged. Before starting the development of the application, consider using a code language (e.g., Java) or compiler that limits the ability of developers to act beyond the bounds of a buffer. If the chosen language is susceptible to buffer related issues (e.g., C) then consider using secure functions instead of those vulnerable to buffer manipulations. If a potentially dangerous function must be used, make sure that proper boundary checking is performed. Additionally, there are often a number of compiler-based mechanisms (e.g., StackGuard, ProPolice and the Microsoft Visual Studio /GS flag) that can help identify and protect against potential buffer issues. Finally, there may be operating system level preventative functionality that can be applied.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Shared Resource Manipulation</Name><Description>An adversary exploits a resource shared between multiple applications, an application pool or hardware pin multiplexing to affect behavior. Resources may be shared between multiple applications or between multiple threads of a single application. Resource sharing is usually accomplished through mutual access to a single memory location or multiplexed hardware pins. If an adversary can manipulate this shared resource (usually by co-opting one of the applications or threads) the other applications or threads using the shared resource will often continue to trust the validity of the compromised shared resource and use it in their calculations. This can result in invalid trust assumptions, corruption of additional data through the normal operations of the other users of the shared resource, or even cause a crash or compromise of the sharing applications.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1189</CWE_ID><Name>Improper Isolation of Shared Resources on System-on-a-Chip (SoC)</Name><Description>Baseboard Management Controller (BMC) device implements Advanced High-performance Bus (AHB) bridges that do not require authentication for arbitrary read and write access to the BMC's physical address space from the host, and possibly the network [REF-1138].</Description></Weakness><Weakness><CWE_ID>1331</CWE_ID><Name>Improper Isolation of Shared Resources in Network On Chip (NoC)</Name><Description>Improper isolation of shared resource in a network-on-chip leads to denial of service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1498.001</Entry_ID><Entry_Name>Network Denial of Service: Direct Network Flood</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499</Entry_ID><Entry_Name>Endpoint Denial of Service</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>10</Entry_ID><Entry_Name>Denial of Service</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Flooding</Name><Description>An adversary consumes the resources of a target by rapidly engaging in a large number of interactions with the target. This type of attack generally exposes a weakness in rate limiting or flow. When successful this attack prevents legitimate users from accessing the service and can cause the target to crash. This attack differs from resource depletion through leaks or allocations in that the latter attacks do not rely on the volume of requests made to the target but instead focus on manipulation of the target's operations. The key factor in a flooding attack is the number of requests the adversary can make in a given period of time. The greater this number, the more likely an attack is to succeed against a given target.</Description><Mitigations><Mitigation>Ensure that protocols have specific limits of scale configured.</Mitigation><Mitigation>Specify expectations for capabilities and dictate which behaviors are acceptable when resource allocation reaches limits.</Mitigation><Mitigation>Uniformly throttle all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>33</Entry_ID><Entry_Name>Path Traversal</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Path Traversal</Name><Description>An adversary uses path manipulation methods to exploit insufficient input validation of a target to obtain access to data that should be not be retrievable by ordinary well-formed requests. A typical variety of this attack involves specifying a path to a desired file together with dot-dot-slash characters, resulting in the file access API or function traversing out of the intended directory structure and into the root file system. By replacing or modifying the expected path information the access function or API retrieves the file desired by the attacker. These attacks either involve the attacker providing a complete path to a targeted file or using control characters (e.g. path separators (/ or \) and/or dots (.)) to reach desired directories or files.</Description><Mitigations><Mitigation>Design: Configure the access control correctly.</Mitigation><Mitigation>Design: Enforce principle of least privilege.</Mitigation><Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation><Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.</Mitigation><Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation><Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation><Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation><Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation><Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation><Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation><Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.</Mitigation></Mitigations><Examples><Example><Reference>An example of using path traversal to attack some set of resources on a web server is to use a standard HTTP request From an attacker point of view, this may be sufficient to gain access to the password file on a poorly protected system. If the attacker can list directories of critical resources then read only access is not sufficient to protect the system.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>22</CWE_ID><Name>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Name><Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1083</Entry_ID><Entry_Name>File and Directory Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Directory Indexing</Name><Description>An adversary crafts a request to a target that results in the target listing/indexing the content of a directory as output. One common method of triggering directory contents as output is to construct a request containing a path that terminates in a directory name rather than a file name since many applications are configured to provide a list of the directory's contents when such a request is received. An adversary can use this to explore the directory tree on a target as well as learn the names of files. This can often end up revealing test files, backup files, temporary files, hidden files, configuration files, user accounts, script contents, as well as naming conventions, all of which can be used by an attacker to mount additional attacks.</Description><Mitigations><Mitigation>1. Using blank index.html: putting blank index.html simply prevent directory listings from displaying to site visitors.</Mitigation><Mitigation>2. Preventing with .htaccess in Apache web server: In .htaccess, write "Options-indexes".</Mitigation><Mitigation>3. Suppressing error messages: using error 403 "Forbidden" message exactly like error 404 "Not Found" message.</Mitigation></Mitigations><Examples><Example><Reference>The adversary uses directory listing to view sensitive files in the application. This is an example of accessing the backup file. The attack issues a request for http://www.example.com/admin/ and receives the following dynamic directory indexing content in the response: Index of /admin Name Last Modified Size Description backup/ 31-May-2007 08:18 - Apache/ 2.0.55 Server at www.example.com Port 80 The target application does not have direct hyperlink to the "backup" directory in the normal html webpage, however the attacker has learned of this directory due to indexing the content. The client then requests the backup directory URL and receives output which has a "db_dump.php" file in it. This sensitive data should not be disclosed publicly.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>424</CWE_ID><Name>Improper Protection of Alternate Path</Name><Description>Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.</Description></Weakness><Weakness><CWE_ID>425</CWE_ID><Name>Direct Request ('Forced Browsing')</Name><Description>Upload arbitrary files via direct request.</Description></Weakness><Weakness><CWE_ID>288</CWE_ID><Name>Authentication Bypass Using an Alternate Path or Channel</Name><Description>User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>276</CWE_ID><Name>Incorrect Default Permissions</Name><Description>Default permissions of a device allow IP spoofing.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Integer Attacks</Name><Description>An attacker takes advantage of the structure of integer variables to cause these variables to assume values that are not expected by an application. For example, adding one to the largest positive integer in a signed integer variable results in a negative number. Negative numbers may be illegal in an application and the application may prevent an attacker from providing them directly, but the application may not consider that adding two positive numbers can create a negative number do to the structure of integer storage formats.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>682</CWE_ID><Name>Incorrect Calculation</Name><Description>substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Pointer Manipulation</Name><Description>This attack pattern involves an adversary manipulating a pointer within a target application resulting in the application accessing an unintended memory location. This can result in the crashing of the application or, for certain pointer values, access to data that would not normally be possible or the execution of arbitrary code. Since pointers are simply integer variables, Integer Attacks may often be used in Pointer Attacks.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>682</CWE_ID><Name>Incorrect Calculation</Name><Description>substitution overflow: buffer overflow using environment variables that are expanded after the length check is performed</Description></Weakness><Weakness><CWE_ID>822</CWE_ID><Name>Untrusted Pointer Dereference</Name><Description>Spreadsheet software treats certain record values that lead to "user-controlled pointer" (might be untrusted offset, not untrusted pointer).</Description></Weakness><Weakness><CWE_ID>823</CWE_ID><Name>Use of Out-of-range Pointer Offset</Name><Description>"buffer seek" value - basically an offset?</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.003</Entry_ID><Entry_Name>Impair Defenses:Impair Command History Logging</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.006</Entry_ID><Entry_Name>Hijack Execution Flow:Dynamic Linker Hijacking</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.007</Entry_ID><Entry_Name>Hijack Execution Flow:Path Interception by PATH Environment Variable</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Subverting Environment Variable Values</Name><Description>The adversary directly or indirectly modifies environment variables used by or controlling the target software. The adversary's goal is to cause the target software to deviate from its expected operation in a manner that benefits the adversary.</Description><Mitigations><Mitigation>Protect environment variables against unauthorized read and write access.</Mitigation><Mitigation>Protect the configuration files which contain environment variables against illegitimate read and write access.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</Mitigation><Mitigation>Apply the least privilege principles. If a process has no legitimate reason to read an environment variable do not give that privilege.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.003</Entry_ID><Entry_Name>Endpoint Denial of Service:Application Exhaustion Flood</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>10</Entry_ID><Entry_Name>Denial of Service</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Excessive Allocation</Name><Description>An adversary causes the target to allocate excessive resources to servicing the attackers' request, thereby reducing the resources available for legitimate services and degrading or denying services. Usually, this attack focuses on memory allocation, but any finite resource on the target could be the attacked, including bandwidth, processing cycles, or other resources. This attack does not attempt to force this allocation through a large number of requests (that would be Resource Depletion through Flooding) but instead uses one or a small number of requests that are carefully formatted to force the target to allocate excessive resources to service this request(s). Often this attack takes advantage of a bug in the target to cause the target to allocate resources vastly beyond what would be needed for a normal request.</Description><Mitigations><Mitigation>Limit the amount of resources that are accessible to unprivileged users.</Mitigation><Mitigation>Assume all input is malicious. Consider all potentially relevant properties when validating input.</Mitigation><Mitigation>Consider uniformly throttling all requests in order to make it more difficult to consume resources more quickly than they can again be freed.</Mitigation><Mitigation>Use resource-limiting settings, if possible.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness><Weakness><CWE_ID>1325</CWE_ID><Name>Improperly Controlled Sequential Memory Allocation</Name><Description>Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499</Entry_ID><Entry_Name>Endpoint Denial of Service</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>10</Entry_ID><Entry_Name>Denial of Service</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Resource Leak Exposure</Name><Description>An adversary utilizes a resource leak on the target to deplete the quantity of the resource available to service legitimate requests.</Description><Mitigations><Mitigation>If possible, leverage coding language(s) that do not allow this weakness to occur (e.g., Java, Ruby, and Python all perform automatic garbage collection that releases memory for objects that have been deallocated).</Mitigation><Mitigation>Memory should always be allocated/freed using matching functions (e.g., malloc/free, new/delete, etc.)</Mitigation><Mitigation>Implement best practices with respect to memory management, including the freeing of all allocated resources at all exit points and ensuring consistency with how and where memory is freed in a function.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1547.009</Entry_ID><Entry_Name>Boot or Logon Autostart Execution:Shortcut Modification</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Symlink Attack</Name><Description>An adversary positions a symbolic link in such a manner that the targeted user or application accesses the link's endpoint, assuming that it is accessing a file with the link's name.</Description><Mitigations><Mitigation>Design: Check for the existence of files to be created, if in existence verify they are neither symlinks nor hard links before opening them.</Mitigation><Mitigation>Implementation: Use randomly generated file names for temporary files. Give the files restrictive permissions.</Mitigation></Mitigations><Examples><Example><Reference>The adversary creates a symlink with the "same" name as the file which the application is intending to write to. The application will write to the file- "causing the data to be written where the symlink is pointing". An attack like this can be demonstrated as follows: In the above example, the root user ran a program with poorly written file handling routines, providing the filename "myFile" to vulnprog for the relevant data to be written to. However, the adversary happened to be looking over the shoulder of "root" at the time, and created a link from myFile to /etc/nologin. The attack would make no user be able to login.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>59</CWE_ID><Name>Improper Link Resolution Before File Access ('Link Following')</Name><Description>"Zip Slip" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Try All Common Switches</Name><Description>An attacker attempts to invoke all common switches and options in the target application for the purpose of discovering weaknesses in the target. For example, in some applications, adding a --debug switch causes debugging information to be displayed, which can sometimes reveal sensitive processing or configuration information to an attacker. This attack differs from other forms of API abuse in that the attacker is indiscriminately attempting to invoke options in the hope that one of them will work rather than specifically targeting a known option. Nonetheless, even if the attacker is familiar with the published options of a targeted application this attack method may still be fruitful as it might discover unpublicized functionality.</Description><Mitigations><Mitigation>Design: Minimize switch and option functionality to only that necessary for correct function of the command.</Mitigation><Mitigation>Implementation: Remove all debug and testing options from production code.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>912</CWE_ID><Name>Hidden Functionality</Name><Description>A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>30</Entry_ID><Entry_Name>Mail Command Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Email Injection</Name><Description>An adversary manipulates the headers and content of an email message by injecting data via the use of delimiter characters native to the protocol.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>150</CWE_ID><Name>Improper Neutralization of Escape, Meta, or Control Sequences</Name><Description>MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Format String Injection</Name><Description>An adversary includes formatting characters in a string input field on the target application. Most applications assume that users will provide static text and may respond unpredictably to the presence of formatting character. For example, in certain functions of the C programming languages such as printf, the formatting character %s will print the contents of a memory location expecting this location to identify a string and the formatting character %n prints the number of DWORD written in the memory. An adversary can use this to read or write to memory locations or files, or simply to manipulate the value of the resulting text in unexpected ways. Reading or writing memory may result in program crashes and writing memory could result in the execution of arbitrary code if the adversary can write to the program stack.</Description><Mitigations><Mitigation>Limit the usage of formatting string functions.</Mitigation><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal formatting characters.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>134</CWE_ID><Name>Use of Externally-Controlled Format String</Name><Description>Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>29</Entry_ID><Entry_Name>LDAP Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>LDAP Injection</Name><Description>An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value.</Description><Mitigations><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as LDAP content.</Mitigation><Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the LDAP or application.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness><Weakness><CWE_ID>90</CWE_ID><Name>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Name><Description>Server does not properly escape LDAP queries, which allows remote attackers to cause a DoS and possibly conduct an LDAP injection attack.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Parameter Injection</Name><Description>An adversary manipulates the content of request parameters for the purpose of undermining the security of the target. Some parameter encodings use text characters as separators. For example, parameters in a HTTP GET message are encoded as name-value pairs separated by an ampersand (&amp;). If an attacker can supply text strings that are used to fill in these parameters, then they can inject special characters used in the encoding scheme to add or modify parameters. For example, if user input is fed directly into an HTTP GET request and the user provides the value "myInput&amp;new_param=myValue", then the input parameter is set to myInput, but a new parameter (new_param) is also added with a value of myValue. This can significantly change the meaning of the query that is processed by the server. Any encoding scheme where parameters are identified and separated by text characters is potentially vulnerable to this attack - the HTTP GET encoding used above is just one example.</Description><Mitigations><Mitigation>Implement an audit log written to a separate host. In the event of a compromise, the audit log may be able to provide evidence and details of the compromise.</Mitigation><Mitigation>Treat all user input as untrusted data that must be validated before use.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>88</CWE_ID><Name>Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')</Name><Description>Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert "-o" and "-X" switches.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Reflection Injection</Name><Description>An adversary supplies a value to the target application which is then used by reflection methods to identify a class, method, or field. For example, in the Java programming language the reflection libraries permit an application to inspect, load, and invoke classes and their components by name. If an adversary can control the input into these methods including the name of the class/method/field or the parameters passed to methods, they can cause the targeted application to invoke incorrect methods, read random fields, or even to load and utilize malicious classes that the adversary created. This can lead to the application revealing sensitive information, returning incorrect results, or even having the adversary take control of the targeted application.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>470</CWE_ID><Name>Use of Externally-Controlled Input to Select Classes or Code ('Unsafe Reflection')</Name><Description>Database system allows attackers to bypass sandbox restrictions by using the Reflection API.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Relative Path Traversal</Name><Description>An attacker exploits a weakness in input validation on the target by supplying a specially constructed path utilizing dot and slash characters for the purpose of obtaining access to arbitrary files or resources. An attacker modifies a known path on the target in order to reach material that is not available through intended channels. These attacks normally involve adding additional path separators (/ or \) and/or dots (.), or encodings thereof, in various combinations in order to reach parent directories or entirely separate trees of the target's directory structure.</Description><Mitigations><Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement</Mitigation><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation><Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification -- using an allowlist approach.</Mitigation><Mitigation>Implementation: Prefer working without user input when using file system calls</Mitigation><Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation><Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation></Mitigations><Examples><Example><Reference>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: When the application gets this input string, it will be the desired vector by the attacker.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>23</CWE_ID><Name>Relative Path Traversal</Name><Description>Mail server allows remote attackers to create arbitrary directories via a ".." or rename arbitrary files via a "....//" in user supplied parameters.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Client-side Injection-induced Buffer Overflow</Name><Description>This type of attack exploits a buffer overflow vulnerability in targeted client software through injection of malicious content from a custom-built hostile service. This hostile service is created to deliver the correct content to the client software. For example, if the client-side application is a browser, the service will host a webpage that the browser loads.</Description><Mitigations><Mitigation>The client software should not install untrusted code from a non-authenticated server.</Mitigation><Mitigation>The client software should have the latest patches and should be audited for vulnerabilities before being used to communicate with potentially hostile servers.</Mitigation><Mitigation>Perform input validation for length of buffer inputs.</Mitigation><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation><Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Ensure all buffer uses are consistently bounds-checked.</Mitigation><Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation></Mitigations><Examples><Example><Reference>Authors often use &lt;EMBED&gt; tags in HTML documents. For example In Internet Explorer 4.0 an adversary attacker supplies an overly long path in the SRC= directive, the mshtml.dll component will suffer a buffer overflow. This is a standard example of content in a Web page being directed to exploit a faulty module in the system. There are potentially thousands of different ways data can propagate into a given system, thus these kinds of attacks will continue to be found in the wild.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Bypassing of Intermediate Forms in Multiple-Form Sets</Name><Description>Some web applications require users to submit information through an ordered sequence of web forms. This is often done if there is a very large amount of information being collected or if information on earlier forms is used to pre-populate fields or determine which additional information the application needs to collect. An attacker who knows the names of the various forms in the sequence may be able to explicitly type in the name of a later form and navigate to it without first going through the previous forms. This can result in incomplete collection of information, incorrect assumptions about the information submitted by the attacker, or other problems that can impair the functioning of the application.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>372</CWE_ID><Name>Incomplete Internal State Distinction</Name><Description>The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1557.002</Entry_ID><Entry_Name>Adversary-in-the-Middle: ARP Cache Poisoning</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Cache Poisoning</Name><Description>An attacker exploits the functionality of cache technologies to cause specific data to be cached that aids the attackers' objectives. This describes any attack whereby an attacker places incorrect or harmful material in cache. The targeted cache can be an application's cache (e.g. a web browser cache) or a public cache (e.g. a DNS or ARP cache). Until the cache is refreshed, most applications or clients will treat the corrupted cache value as valid. This can lead to a wide range of exploits including redirecting web browsers towards sites that install malware and repeatedly incorrect calculations based on the incorrect value.</Description><Mitigations><Mitigation>Configuration: Disable client side caching.</Mitigation><Mitigation>Implementation: Listens for query replies on a network, and sends a notification via email when an entry changes.</Mitigation></Mitigations><Examples><Example><Reference>In this example, an attacker sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the attacker floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>348</CWE_ID><Name>Use of Less Trusted Source</Name><Description>PHP application uses IP address from X-Forwarded-For HTTP header, instead of REMOTE_ADDR.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>349</CWE_ID><Name>Acceptance of Extraneous Untrusted Data With Trusted Data</Name><Description>use of extra data in a signature allows certificate signature forging</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1584.002</Entry_ID><Entry_Name>Compromise Infrastructure: DNS Server</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>DNS Cache Poisoning</Name><Description>A domain name server translates a domain name (such as www.example.com) into an IP address that Internet hosts use to contact Internet resources. An adversary modifies a public DNS cache to cause certain names to resolve to incorrect addresses that the adversary specifies. The result is that client applications that rely upon the targeted cache for domain name resolution will be directed not to the actual address of the specified domain name but to some other address. Adversaries can use this to herd clients to sites that install malware on the victim's computer or to masquerade as part of a Pharming attack.</Description><Mitigations><Mitigation>Configuration: Make sure your DNS servers have been updated to the latest versions</Mitigation><Mitigation>Configuration: UNIX services like rlogin, rsh/rcp, xhost, and nfs are all susceptible to wrong information being held in a cache. Care should be taken with these services so they do not rely upon DNS caches that have been exposed to the Internet.</Mitigation><Mitigation>Configuration: Disable client side DNS caching.</Mitigation></Mitigations><Examples><Example><Reference>In this example, an adversary sends request to a local DNS server to look up www.example .com. The associated IP address of www.example.com is 1.3.5.7. Local DNS usually caches IP addresses and do not go to remote DNS every time. Since the local record is not found, DNS server tries to connect to remote DNS for queries. However, before the remote DNS returns the right IP address 1.3.5.7, the adversary floods local DNS with crafted responses with IP address 2.4.6.8. The result is that 2.4.6.8 is stored in DNS cache. Meanwhile, 2.4.6.8 is associated with a malicious website www.maliciousexampsle.com When users connect to www.example.com, the local DNS will direct it to www.maliciousexample.com, this works as part of a Pharming attack.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>348</CWE_ID><Name>Use of Less Trusted Source</Name><Description>PHP application uses IP address from X-Forwarded-For HTTP header, instead of REMOTE_ADDR.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>349</CWE_ID><Name>Acceptance of Extraneous Untrusted Data With Trusted Data</Name><Description>use of extra data in a signature allows certificate signature forging</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>350</CWE_ID><Name>Reliance on Reverse DNS Resolution for a Security-Critical Action</Name><Description>Product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Detect Unpublicized Web Pages</Name><Description>An adversary searches a targeted web site for web pages that have not been publicized. In doing this, the adversary may be able to gain access to information that the targeted site did not intend to make public.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>425</CWE_ID><Name>Direct Request ('Forced Browsing')</Name><Description>Upload arbitrary files via direct request.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Detect Unpublicized Web Services</Name><Description>An adversary searches a targeted web site for web services that have not been publicized. This attack can be especially dangerous since unpublished but available services may not have adequate security controls placed upon them given that an administrator may believe they are unreachable.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>425</CWE_ID><Name>Direct Request ('Forced Browsing')</Name><Description>Upload arbitrary files via direct request.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Checksum Spoofing</Name><Description>An adversary spoofs a checksum message for the purpose of making a payload appear to have a valid corresponding checksum. Checksums are used to verify message integrity. They consist of some value based on the value of the message they are protecting. Hash codes are a common checksum mechanism. Both the sender and recipient are able to compute the checksum based on the contents of the message. If the message contents change between the sender and recipient, the sender and recipient will compute different checksum values. Since the sender's checksum value is transmitted with the message, the recipient would know that a modification occurred. In checksum spoofing an adversary modifies the message body and then modifies the corresponding checksum so that the recipient's checksum calculation will match the checksum (created by the adversary) in the message. This would prevent the recipient from realizing that a change occurred.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>354</CWE_ID><Name>Improper Validation of Integrity Check Value</Name><Description>The product does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XML Schema Poisoning</Name><Description>An adversary corrupts or modifies the content of XML schema information passed between a client and server for the purpose of undermining the security of the target. XML Schemas provide the structure and content definitions for XML documents. Schema poisoning is the ability to manipulate a schema either by replacing or modifying it to compromise the programs that process documents that use this schema.</Description><Mitigations><Mitigation>Design: Protect the schema against unauthorized modification.</Mitigation><Mitigation>Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the XML document. Additionally, ensure that the proper permissions are set on local files to avoid unauthorized modification.</Mitigation><Mitigation>Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.</Mitigation></Mitigations><Examples><Example><Reference>XML Schema Poisoning Attacks can often occur locally due to being embedded within the XML document itself or being located on the host within an improperaly protected file. In these cases, the adversary can simply edit the XML schema without the need for additional privileges. An example of the former can be seen below: If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.</Reference><Description /></Example><Example><Reference>XML Schema Poisoning Attacks can also be executed remotely if the HTTP protocol is being used to transport data. : The HTTP protocol does not encrypt the traffic it transports, so all communication occurs in plaintext. This traffic can be observed and modified by the adversary during transit to alter the XML schema before it reaches the end user. The adversary can perform a Adversary-in-the-Middle (CAPEC-94) Attack to alter the schema in the same way as the previous example and to acheive the same results.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness><Weakness><CWE_ID>472</CWE_ID><Name>External Control of Assumed-Immutable Web Parameter</Name><Description>Modification of message number parameter allows attackers to read other people's messages.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XML Ping of the Death</Name><Description>An attacker initiates a resource depletion attack where a large number of small XML messages are delivered at a sufficiently rapid rate to cause a denial of service or crash of the target. Transactions such as repetitive SOAP transactions can deplete resources faster than a simple flooding attack because of the additional resources used by the SOAP protocol and the resources necessary to process SOAP messages. The transactions used are immaterial as long as they cause resource utilization on the target. In other words, this is a normal flooding attack augmented by using messages that will require extra processing on the target.</Description><Mitigations><Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</Mitigation><Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>400</CWE_ID><Name>Uncontrolled Resource Consumption</Name><Description>Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.</Description></Weakness><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1491</Entry_ID><Entry_Name>Defacement</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>12</Entry_ID><Entry_Name>Content Spoofing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Content Spoofing</Name><Description>An adversary modifies content to make it contain something other than what the original content producer intended while keeping the apparent source of the content unchanged. The term content spoofing is most often used to describe modification of web pages hosted by a target to display the adversary's content instead of the owner's content. However, any content can be spoofed, including the content of email messages, file transfers, or the content of other network communication protocols. Content can be modified at the source (e.g. modifying the source file for a web page) or in transit (e.g. intercepting and modifying a message between the sender and recipient). Usually, the adversary will attempt to hide the fact that the content has been modified, but in some cases, such as with web site defacement, this is not necessary. Content Spoofing can lead to malware exposure, financial fraud (if the content governs financial transactions), privacy violations, and other unwanted outcomes.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Explore for Predictable Temporary File Names</Name><Description>An attacker explores a target to identify the names and locations of predictable temporary files for the purpose of launching further attacks against the target. This involves analyzing naming conventions and storage locations of the temporary files created by a target application. If an attacker can predict the names of temporary files they can use this information to mount other attacks, such as information gathering and symlink attacks.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>377</CWE_ID><Name>Insecure Temporary File</Name><Description>A library uses the Java File.createTempFile() method which creates a file with "-rw-r--r--" default permissions on Unix-like operating systems</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Command Delimiters</Name><Description>An attack of this type exploits a programs' vulnerabilities that allows an attacker's commands to be concatenated onto a legitimate command with the intent of targeting other resources such as the file system or database. The system that uses a filter or denylist input validation, as opposed to allowlist validation is vulnerable to an attacker who predicts delimiters (or combinations of delimiters) not present in the filter or denylist. As with other injection attacks, the attacker uses the command delimiter payload as an entry point to tunnel through the application and activate additional attacks through SQL queries, shell commands, network scanning, and so on.</Description><Mitigations><Mitigation>Design: Perform allowlist validation against a positive specification for command length, type, and parameters.</Mitigation><Mitigation>Design: Limit program privileges, so if commands circumvent program input validation or filter routines then commands do not running under a privileged account</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation><Mitigation>Implementation: Use type conversions such as JDBC prepared statements.</Mitigation></Mitigations><Examples><Example><Reference>By appending special characters, such as a semicolon or other commands that are executed by the target process, the attacker is able to execute a wide variety of malicious commands in the target process space, utilizing the target's inherited permissions, against any resource the host has access to. The possibilities are vast including injection attacks against RDBMS (SQL Injection), directory servers (LDAP Injection), XML documents (XPath and XQuery Injection), and command line shells. In many injection attacks, the results are converted back to strings and displayed to the client process such as a web browser without tripping any security alarms, so the network firewall does not log any out of the ordinary behavior. LDAP servers house critical identity assets such as user, profile, password, and group information that is used to authenticate and authorize users. An attacker that can query the directory at will and execute custom commands against the directory server is literally working with the keys to the kingdom in many enterprises. When user, organizational units, and other directory objects are queried by building the query string directly from user input with no validation, or other conversion, then the attacker has the ability to use any LDAP commands to query, filter, list, and crawl against the LDAP server directly in the same manner as SQL injection gives the ability to the attacker to run SQL commands on the database.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>146</CWE_ID><Name>Improper Neutralization of Expression/Command Delimiters</Name><Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.</Description></Weakness><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>78</CWE_ID><Name>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Name><Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description></Weakness><Weakness><CWE_ID>185</CWE_ID><Name>Incorrect Regular Expression</Name><Description>Null byte bypasses PHP regexp check.</Description></Weakness><Weakness><CWE_ID>93</CWE_ID><Name>Improper Neutralization of CRLF Sequences ('CRLF Injection')</Name><Description>Chain: HTTP response splitting via CRLF in parameter related to URL.</Description></Weakness><Weakness><CWE_ID>140</CWE_ID><Name>Improper Neutralization of Delimiters</Name><Description>Linebreak in field of PHP script allows admin privileges when written to data file.</Description></Weakness><Weakness><CWE_ID>157</CWE_ID><Name>Failure to Sanitize Paired Delimiters</Name><Description>Buffer overflow via mailbox name with an opening double quote but missing a closing double quote, causing a larger copy than expected.</Description></Weakness><Weakness><CWE_ID>138</CWE_ID><Name>Improper Neutralization of Special Elements</Name><Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description></Weakness><Weakness><CWE_ID>154</CWE_ID><Name>Improper Neutralization of Variable Name Delimiters</Name><Description>Server trusts client to expand macros, allows macro characters to be expanded to trigger resultant information exposure.</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1003</Entry_ID><Entry_Name>OS Credential Dumping</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1119</Entry_ID><Entry_Name>Automated Collection</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1213</Entry_ID><Entry_Name>Data from Information Repositories</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1530</Entry_ID><Entry_Name>Data from Cloud Storage Object</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1555</Entry_ID><Entry_Name>Credentials from Password Stores</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1602</Entry_ID><Entry_Name>Data from Configuration Repository</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Collect Data from Common Resource Locations</Name><Description>An adversary exploits well-known locations for resources for the purposes of undermining the security of the target. In many, if not most systems, files and resources are organized in a default tree structure. This can be useful for adversaries because they often know where to look for resources or files that are necessary for attacks. Even when the precise location of a targeted resource may not be known, naming conventions may indicate a small area of the target machine's file tree where the resources are typically located. For example, configuration files are normally stored in the /etc director on Unix systems. Adversaries can take advantage of this to commit other types of attacks.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>552</CWE_ID><Name>Files or Directories Accessible to External Parties</Name><Description>Data file under web root.</Description></Weakness><Weakness><CWE_ID>1239</CWE_ID><Name>Improper Zeroization of Hardware Register</Name><Description>The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.</Description></Weakness><Weakness><CWE_ID>1258</CWE_ID><Name>Exposure of Sensitive System Information Due to Uncleared Debug Information</Name><Description>Rust library leaks Oauth client details in application debug logs</Description></Weakness><Weakness><CWE_ID>1266</CWE_ID><Name>Improper Scrubbing of Sensitive Data from Decommissioned Device</Name><Description>The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.</Description></Weakness><Weakness><CWE_ID>1272</CWE_ID><Name>Sensitive Information Uncleared Before Debug/Power State Transition</Name><Description>Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.</Description></Weakness><Weakness><CWE_ID>1323</CWE_ID><Name>Improper Management of Sensitive Trace Data</Name><Description>Trace data collected from several sources on the
                System-on-Chip (SoC) is stored in unprotected locations or
                transported to untrusted agents.</Description></Weakness><Weakness><CWE_ID>1330</CWE_ID><Name>Remanent Data Readable after Memory Erase</Name><Description>Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been "factory-default reset" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Identity Spoofing</Name><Description>Identity Spoofing refers to the action of assuming (i.e., taking on) the identity of some other entity (human or non-human) and then using that identity to accomplish a goal. An adversary may craft messages that appear to come from a different principle or use stolen / spoofed authentication credentials.</Description><Mitigations><Mitigation>Employ robust authentication processes (e.g., multi-factor authentication).</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Input Data Manipulation</Name><Description>An attacker exploits a weakness in input validation by controlling the format, structure, and composition of data to an input-processing interface. By supplying input of a non-standard or unexpected form an attacker can adversely impact the security of the target.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Resource Location Spoofing</Name><Description>An adversary deceives an application or user and convinces them to request a resource from an unintended location. By spoofing the location, the adversary can cause an alternate resource to be used, often one that the adversary controls and can be used to help them achieve their malicious goals.</Description><Mitigations><Mitigation>Monitor network activity to detect any anomalous or unauthorized communication exchanges.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>451</CWE_ID><Name>User Interface (UI) Misrepresentation of Critical Information</Name><Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Screen Temporary Files for Sensitive Information</Name><Description>An adversary exploits the temporary, insecure storage of information by monitoring the content of files used to store temp data during an application's routine execution flow. Many applications use temporary files to accelerate processing or to provide records of state across multiple executions of the application. Sometimes, however, these temporary files may end up storing sensitive information. By screening an application's temporary files, an adversary might be able to discover such sensitive information. For example, web browsers often cache content to accelerate subsequent lookups. If the content contains sensitive information then the adversary could recover this from the web cache.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>377</CWE_ID><Name>Insecure Temporary File</Name><Description>A library uses the Java File.createTempFile() method which creates a file with "-rw-r--r--" default permissions on Unix-like operating systems</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Sniffing Attacks</Name><Description>In this attack pattern, the adversary intercepts information transmitted between two third parties. The adversary must be able to observe, read, and/or hear the communication traffic, but not necessarily block the communication or change its content. Any transmission medium can theoretically be sniffed if the adversary can examine the contents between the sender and recipient. Sniffing Attacks are similar to Adversary-In-The-Middle attacks (CAPEC-94), but are entirely passive. AiTM attacks are predominantly active and often alter the content of the communications themselves.</Description><Mitigations><Mitigation>Encrypt sensitive information when transmitted on insecure mediums to prevent interception.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1040</Entry_ID><Entry_Name>Network Sniffing</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1111</Entry_ID><Entry_Name>Multi-Factor Authentication Interception</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Sniffing Network Traffic</Name><Description>In this attack pattern, the adversary monitors network traffic between nodes of a public or multicast network in an attempt to capture sensitive information at the protocol level. Network sniffing applications can reveal TCP/IP, DNS, Ethernet, and other low-level network communication information. The adversary takes a passive role in this attack pattern and simply observes and analyzes the traffic. The adversary may precipitate or indirectly influence the content of the observed transaction, but is never the intended recipient of the target information.</Description><Mitigations><Mitigation>Obfuscate network traffic through encryption to prevent its readability by network sniffers.</Mitigation><Mitigation>Employ appropriate levels of segmentation to your network in accordance with best practices.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.008</Entry_ID><Entry_Name>Hijack Execution Flow:Path Interception by Search Order Hijacking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Redirect Access to Libraries</Name><Description>An adversary exploits a weakness in the way an application searches for external libraries to manipulate the execution flow to point to an adversary supplied library or code base. This pattern of attack allows the adversary to compromise the application or server via the execution of unauthorized code. An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. If an adversary can redirect an application's attempts to access these libraries to other libraries that the adversary supplies, the adversary will be able to force the targeted application to execute arbitrary code. This is especially dangerous if the targeted application has enhanced privileges. Access can be redirected through a number of techniques, including the use of symbolic links, search path modification, and relative path manipulation.</Description><Mitigations><Mitigation>Implementation: Restrict the permission to modify the entries in the configuration file.</Mitigation><Mitigation>Implementation: Check the integrity of the dynamically linked libraries before use them.</Mitigation><Mitigation>Implementation: Use obfuscation and other techniques to prevent reverse engineering the libraries.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>706</CWE_ID><Name>Use of Incorrectly-Resolved Name or Reference</Name><Description>The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Dictionary-based Password Attack</Name><Description>
            </Description><Mitigations><Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation><Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation><Mitigation>Leverage multi-factor authentication for all authentication services.</Mitigation></Mitigations><Examples><Example><Reference>The Cisco LEAP challenge/response authentication mechanism uses passwords in a way that is susceptible to dictionary attacks, which makes it easier for remote attackers to gain privileges via brute force password guessing attacks. Cisco LEAP is a mutual authentication algorithm that supports dynamic derivation of session keys. With Cisco LEAP, mutual authentication relies on a shared secret, the user's logon password (which is known by the client and the network), and is used to respond to challenges between the user and the Remote Authentication Dial-In User Service (RADIUS) server. Methods exist for someone to write a tool to launch an offline dictionary attack on password-based authentications that leverage Microsoft MS-CHAP, such as Cisco LEAP. The tool leverages large password lists to efficiently launch offline dictionary attacks against LEAP user accounts, collected through passive sniffing or active techniques.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploit Script-Based APIs</Name><Description>Some APIs support scripting instructions as arguments. Methods that take scripted instructions (or references to scripted instructions) can be very flexible and powerful. However, if an attacker can specify the script that serves as input to these methods they can gain access to a great deal of functionality. For example, HTML pages support &lt;script&gt; tags that allow scripting languages to be embedded in the page and then interpreted by the receiving web browser. If the content provider is malicious, these scripts can compromise the client application. Some applications may even execute the scripts under their own identity (rather than the identity of the user providing the script) which can allow attackers to perform activities that would otherwise be denied to them.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Infrastructure Manipulation</Name><Description>An attacker exploits characteristics of the infrastructure of a network entity in order to perpetrate attacks or information gathering on network objects or effect a change in the ordinary information flow between network objects. Most often, this involves manipulation of the routing of network messages so, instead of arriving at their proper destination, they are directed towards an entity of the attackers' choosing, usually a server controlled by the attacker. The victim is often unaware that their messages are not being processed correctly. For example, a targeted client may believe they are connecting to their own bank but, in fact, be connecting to a Pharming site controlled by the attacker which then collects the user's login information in order to hijack the actual bank account.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>923</CWE_ID><Name>Improper Restriction of Communication Channel to Intended Endpoints</Name><Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating Hidden Fields</Name><Description>An adversary exploits a weakness in the server's trust of client-side processing by modifying data on the client-side, such as price information, and then submitting this data to the server, which processes the modified data. For example, eShoplifting is a data manipulation attack against an on-line merchant during a purchasing transaction. The manipulation of price, discount or quantity fields in the transaction message allows the adversary to acquire items at a lower cost than the merchant intended. The adversary performs a normal purchasing transaction but edits hidden fields within the HTML form response that store price or other information to give themselves a better deal. The merchant then uses the modified pricing information in calculating the cost of the selected items.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1534</Entry_ID><Entry_Name>Internal Spearfishing</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1566.001</Entry_ID><Entry_Name>Phishing: Spearfishing Attachment</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1566.002</Entry_ID><Entry_Name>Phishing: Spearfishing Link</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1566.003</Entry_ID><Entry_Name>Phishing: Spearfishing via Service</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1598.001</Entry_ID><Entry_Name>Phishing for Information: Spearfishing Service</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1598.002</Entry_ID><Entry_Name>Phishing for Information: Spearfishing Attachment</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1598.003</Entry_ID><Entry_Name>Phishing for Information: Spearfishing Link</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Spear Phishing</Name><Description>An adversary targets a specific user or group with a Phishing (CAPEC-98) attack tailored to a category of users in order to have maximum relevance and deceptive capability. Spear Phishing is an enhanced version of the Phishing attack targeted to a specific user or group. The quality of the targeted email is usually enhanced by appearing to come from a known or trusted entity. If the email account of some trusted entity has been compromised the message may be digitally signed. The message will contain information specific to the targeted users that will enhance the probability that they will follow the URL to the compromised site. For example, the message may indicate knowledge of the targets employment, residence, interests, or other information that suggests familiarity. As soon as the user follows the instructions in the message, the attack proceeds as a standard Phishing attack.</Description><Mitigations><Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>451</CWE_ID><Name>User Interface (UI) Misrepresentation of Critical Information</Name><Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Mobile Phishing</Name><Description>An adversary targets mobile phone users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Mobile Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a text or SMS message, rather than email. The user is enticed to provide information or visit a compromised web site via this message. Apart from the manner in which the attack is initiated, the attack proceeds as a standard Phishing attack.</Description><Mitigations><Mitigation>Do not follow any links that you receive within text messages and do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. Safe practices also include leveraging the entity's mobile application or directly typing the entity's URL in the browser and only then logging in. Never reply to any text messages that ask you to provide sensitive information of any kind.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>451</CWE_ID><Name>User Interface (UI) Misrepresentation of Critical Information</Name><Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.003</Entry_ID><Entry_Name>Masquerading: Rename System Utilities</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>File Manipulation</Name><Description>An attacker modifies file contents or attributes (such as extensions or names) of files in a manner to cause incorrect processing by an application. Attackers use this class of attacks to cause applications to enter unstable states, overwrite or expose sensitive information, and even execute arbitrary code with the application's privileges. This class of attacks differs from attacks on configuration information (even if file-based) in that file manipulation causes the file processing to result in non-standard behaviors, such as buffer overflows or use of the incorrect interpreter. Configuration attacks rely on the application interpreting files correctly in order to insert harmful configuration information. Likewise, resource location attacks rely on controlling an application's ability to locate files, whereas File Manipulation attacks do not require the application to look in a non-default location, although the two classes of attacks are often combined.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Force the System to Reset Values</Name><Description>An attacker forces the target into a previous state in order to leverage potential weaknesses in the target dependent upon a prior configuration or state-dependent factors. Even in cases where an attacker may not be able to directly control the configuration of the targeted application, they may be able to reset the configuration to a prior state since many applications implement reset functions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>306</CWE_ID><Name>Missing Authentication for Critical Function</Name><Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description></Weakness><Weakness><CWE_ID>1221</CWE_ID><Name>Incorrect Register Defaults or Module Parameters</Name><Description>Hardware description language code incorrectly defines register defaults or hardware Intellectual Property (IP) parameters to insecure values.</Description></Weakness><Weakness><CWE_ID>1232</CWE_ID><Name>Improper Lock Behavior After Power State Transition</Name><Description>Register lock bit protection disables changes to system configuration once the bit is set. Some of the protected registers or lock bits become programmable after power state transitions (e.g., Entry and wake from low power sleep modes) causing the system configuration to be changeable.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>White Box Reverse Engineering</Name><Description>An attacker discovers the structure, function, and composition of a type of computer software through white box analysis techniques. White box techniques involve methods which can be applied to a piece of software when an executable or some other compiled object can be directly subjected to analysis, revealing at least a portion of its machine instructions that can be observed upon execution.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1323</CWE_ID><Name>Improper Management of Sensitive Trace Data</Name><Description>Trace data collected from several sources on the
                System-on-Chip (SoC) is stored in unprotected locations or
                transported to untrusted agents.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Windows ::DATA Alternate Data Stream</Name><Description>An attacker exploits the functionality of Microsoft NTFS Alternate Data Streams (ADS) to undermine system security. ADS allows multiple "files" to be stored in one directory entry referenced as filename:streamname. One or more alternate data streams may be stored in any file or directory. Normal Microsoft utilities do not show the presence of an ADS stream attached to a file. The additional space for the ADS is not recorded in the displayed file size. The additional space for ADS is accounted for in the used space on the volume. An ADS can be any type of file. ADS are copied by standard Microsoft utilities between NTFS volumes. ADS can be used by an attacker or intruder to hide tools, scripts, and data from detection by normal system utilities. Many anti-virus programs do not check for or scan ADS. Windows Vista does have a switch (-R) on the command line DIR command that will display alternate streams.</Description><Mitigations><Mitigation>Design: Use FAT file systems which do not support Alternate Data Streams.</Mitigation><Mitigation>Implementation: Use Vista dir with the -R switch or utility to find Alternate Data Streams and take appropriate action with those discovered.</Mitigation><Mitigation>Implementation: Use products that are Alternate Data Stream aware for virus scanning and system security operations.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>212</CWE_ID><Name>Improper Removal of Sensitive Information Before Storage or Transfer</Name><Description>NAT feature in firewall leaks internal IP addresses in ICMP error messages.</Description></Weakness><Weakness><CWE_ID>69</CWE_ID><Name>Improper Handling of Windows ::DATA Alternate Data Stream</Name><Description>Product does not properly record file sizes if they are stored in alternative data streams, which allows users to bypass quota restrictions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1217</Entry_ID><Entry_Name>Browser Bookmark Discovery</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1592</Entry_ID><Entry_Name>Gather Victim Host Information</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1595</Entry_ID><Entry_Name>Active Scanning</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Footprinting</Name><Description>An adversary engages in probing and exploration activities to identify constituents and properties of the target.</Description><Mitigations><Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation><Mitigation>Shut down unnecessary services/ports.</Mitigation><Mitigation>Change default passwords by choosing strong passwords.</Mitigation><Mitigation>Curtail unexpected input.</Mitigation><Mitigation>Encrypt and password-protect sensitive data.</Mitigation><Mitigation>Avoid including information that has the potential to identify and compromise your organization's security such as access to business plans, formulas, and proprietary documents.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.005</Entry_ID><Entry_Name>Hijack Execution Flow: Executable Installer File Permissions Weakness</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.010</Entry_ID><Entry_Name>Hijack Execution Flow: Services File Permissions Weakness</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Using Malicious Files</Name><Description>An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation><Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation></Mitigations><Examples><Example><Reference>Consider a directory on a web server with the following permissions This could allow an attacker to both execute and upload and execute programs' on the web server. This one vulnerability can be exploited by a threat to probe the system and identify additional vulnerabilities to exploit.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>272</CWE_ID><Name>Least Privilege Violation</Name><Description>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</Description></Weakness><Weakness><CWE_ID>59</CWE_ID><Name>Improper Link Resolution Before File Access ('Link Following')</Name><Description>"Zip Slip" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.</Description></Weakness><Weakness><CWE_ID>282</CWE_ID><Name>Improper Ownership Management</Name><Description>Program runs setuid root but relies on a configuration file owned by a non-root user.</Description></Weakness><Weakness><CWE_ID>270</CWE_ID><Name>Privilege Context Switching Error</Name><Description>Run callback in different security context after it has been changed from untrusted to trusted. * note that "context switch before actions are completed" is one type of problem that happens frequently, espec. in browsers.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Web Application Fingerprinting</Name><Description>An attacker sends a series of probes to a web application in order to elicit version-dependent and type-dependent behavior that assists in identifying the target. An attacker could learn information such as software versions, error pages, and response headers, variations in implementations of the HTTP protocol, directory structures, and other similar information about the targeted service. This information can then be used by an attacker to formulate a targeted attack plan. While web application fingerprinting is not intended to be damaging (although certain activities, such as network scans, can sometimes cause disruptions to vulnerable applications inadvertently) it may often pave the way for more damaging attacks.</Description><Mitigations><Mitigation>Implementation: Obfuscate server fields of HTTP response.</Mitigation><Mitigation>Implementation: Hide inner ordering of HTTP response header.</Mitigation><Mitigation>Implementation: Customizing HTTP error codes such as 404 or 500.</Mitigation><Mitigation>Implementation: Hide URL file extension.</Mitigation><Mitigation>Implementation: Hide HTTP response header software information filed.</Mitigation><Mitigation>Implementation: Hide cookie's software information filed.</Mitigation><Mitigation>Implementation: Appropriately deal with error messages.</Mitigation><Mitigation>Implementation: Obfuscate database type in Database API's error message.</Mitigation></Mitigations><Examples><Example><Reference>An attacker sends malformed requests or requests of nonexistent pages to the server. Consider the following HTTP responses. [REF-37]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>497</CWE_ID><Name>Exposure of Sensitive System Information to an Unauthorized Control Sphere</Name><Description>Code analysis product passes access tokens as a command-line parameter or through an environment variable, making them visible to other processes via the ps command.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Variable Manipulation</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Action Spoofing</Name><Description>An adversary is able to disguise one action for another and therefore trick a user into initiating one type of action when they intend to initiate a different action. For example, a user might be led to believe that clicking a button will submit a query, but in fact it downloads software. Adversaries may perform this attack through social means, such as by simply convincing a victim to perform the action or relying on a user's natural inclination to do so, or through technical means, such as a clickjacking attack where a user sees one interface but is actually interacting with a second, invisible, interface.</Description><Mitigations><Mitigation>Avoid interacting with suspicious sites or clicking suspicious links.</Mitigation><Mitigation>An organization should provide regular, robust cybersecurity training to its employees.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>451</CWE_ID><Name>User Interface (UI) Misrepresentation of Critical Information</Name><Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Flash Parameter Injection</Name><Description>An adversary takes advantage of improper data validation to inject malicious global parameters into a Flash file embedded within an HTML document. Flash files can leverage user-submitted data to configure the Flash document and access the embedding HTML document.</Description><Mitigations><Mitigation>User input must be sanitized according to context before reflected back to the user. The JavaScript function 'encodeURI' is not always sufficient for sanitizing input intended for global Flash parameters. Extreme caution should be taken when saving user input in Flash cookies. In such cases the Flash file itself will need to be fixed and recompiled, changing the name of the local shared objects (Flash cookies).</Mitigation></Mitigations><Examples><Example><Reference>The following are examples for different types of parameters passed to the Flash file. If an unsuspecting user is lured by an adversary to click on link like this: http://example.com/vulnerable.swf?flashfile=javascript:alert(document.domain) The result will be not merely a one-time execution of the JavaScript code in the victim's browser in the context of the domain with the vulnerable Flash file, but every time the Flash is loaded, whether by direct reference or embedded inside the same domain, the JavaScript will be executed again.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>88</CWE_ID><Name>Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')</Name><Description>Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert "-o" and "-X" switches.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Code Inclusion</Name><Description>An adversary exploits a weakness on the target to force arbitrary code to be retrieved locally or from a remote location and executed. This differs from code injection in that code injection involves the direct inclusion of code while code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Configuration/Environment Manipulation</Name><Description>An attacker manipulates files or settings external to a target application which affect the behavior of that application. For example, many applications use external configuration files and libraries - modification of these entities or otherwise affecting the application's ability to use them would constitute a configuration/environment manipulation attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness><Weakness><CWE_ID>1233</CWE_ID><Name>Security-Sensitive Hardware Controls with Missing Lock Bit Protection</Name><Description>Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].</Description></Weakness><Weakness><CWE_ID>1234</CWE_ID><Name>Hardware Internal or Debug Modes Allow Override of Locks</Name><Description>System configuration protection may be bypassed during debug mode.</Description></Weakness><Weakness><CWE_ID>1304</CWE_ID><Name>Improperly Preserved Integrity of Hardware Configuration State During a Power Save/Restore Operation</Name><Description>The product performs a power save/restore
            operation, but it does not ensure that the integrity of
            the configuration state is maintained and/or verified between
	    the beginning and ending of the operation.</Description></Weakness><Weakness><CWE_ID>1328</CWE_ID><Name>Security Version Number Mutable to Older Versions</Name><Description>Security-version number in hardware is mutable, resulting in the ability to downgrade (roll-back) the boot firmware to vulnerable code versions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036</Entry_ID><Entry_Name>Masquerading</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Create files with the same name as files protected with a higher classification</Name><Description>An attacker exploits file location algorithms in an operating system or application by creating a file with the same name as a protected or privileged file. The attacker could manipulate the system if the attacker-created file is trusted by the operating system or an application component that attempts to load the original file. Applications often load or include external files, such as libraries or configuration files. These files should be protected against malicious manipulation. However, if the application only uses the name of the file when locating it, an attacker may be able to create a file with the same name and place it in a directory that the application will search before the directory with the legitimate file is searched. Because the attackers' file is discovered first, it would be used by the target application. This attack can be extremely destructive if the referenced file is executable and/or is granted special privileges based solely on having a particular name.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>706</CWE_ID><Name>Use of Incorrectly-Resolved Name or Reference</Name><Description>The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cross-Site Flashing</Name><Description>An attacker is able to trick the victim into executing a Flash document that passes commands or calls to a Flash player browser plugin, allowing the attacker to exploit native Flash functionality in the client browser. This attack pattern occurs where an attacker can provide a crafted link to a Flash document (SWF file) which, when followed, will cause additional malicious instructions to be executed. The attacker does not need to serve or control the Flash document. The attack takes advantage of the fact that Flash files can reference external URLs. If variables that serve as URLs that the Flash application references can be controlled through parameters, then by creating a link that includes values for those parameters, an attacker can cause arbitrary content to be referenced and possibly executed by the targeted Flash application.</Description><Mitigations><Mitigation>Implementation: Only allow known URL to be included as remote flash movies in a flash application</Mitigation><Mitigation>Configuration: Properly configure the crossdomain.xml file to only include the known domains that should host remote flash movies.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>601</CWE_ID><Name>URL Redirection to Untrusted Site ('Open Redirect')</Name><Description>Chain: Go-based Oauth2 reverse proxy can send the authenticated user to another site at the end of the authentication flow. A redirect URL with HTML-encoded whitespace characters can bypass the validation (CWE-1289) to redirect to a malicious site (CWE-601)</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Calling Micro-Services Directly</Name><Description>An attacker is able to discover and query Micro-services at a web location and thereby expose the Micro-services to further exploitation by gathering information about their implementation and function. Micro-services in web pages allow portions of a page to connect to the server and update content without needing to cause the entire page to update. This allows user activity to change portions of the page more quickly without causing disruptions elsewhere.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Targeting Non-Script Elements</Name><Description>This attack is a form of Cross-Site Scripting (XSS) where malicious scripts are embedded in elements that are not expected to host scripts such as image tags (&lt;img&gt;), comments in XML documents (&lt; !-CDATA-&gt;), etc. These tags may not be subject to the same input validation, output validation, and other content filtering and checking routines, so this can create an opportunity for an adversary to tunnel through the application's elements and launch a XSS attack through other elements. As with all remote attacks, it is important to differentiate the ability to launch an attack (such as probing an internal network for unpatched servers) and the ability of the remote adversary to collect and interpret the output of said attack.</Description><Mitigations><Mitigation>In addition to the traditional input fields, all other user controllable inputs, such as image tags within messages or the likes, must also be subjected to input validation. Such validation should ensure that content that can be potentially interpreted as script by the browser is appropriately filtered.</Mitigation><Mitigation>All output displayed to clients must be properly escaped. Escaping ensures that the browser interprets special scripting characters literally and not as script to be executed.</Mitigation></Mitigations><Examples><Example><Reference>An online discussion forum allows its members to post HTML-enabled messages, which can also include image tags. A malicious user embeds JavaScript in the IMG tags in their messages that gets executed within the victim's browser whenever the victim reads these messages. When executed within the victim's browser, the malicious script could accomplish a number of adversary objectives including stealing sensitive information such as usernames, passwords, or cookies.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>80</CWE_ID><Name>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</Name><Description>XSS not quoted in error page.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.010</Entry_ID><Entry_Name>Hijack Execution Flow: Services File Permissions Weaknesses</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Exploiting Incorrectly Configured Access Control Security Levels</Name><Description>An attacker exploits a weakness in the configuration of access controls and is able to bypass the intended protection that these measures guard against and thereby obtain unauthorized access to the system or network. Sensitive functionality should always be protected with access controls. However configuring all but the most trivial access control systems can be very complicated and there are many opportunities for mistakes. If an attacker can learn of incorrectly configured access security settings, they may be able to exploit this in an attack.</Description><Mitigations><Mitigation>Design: Configure the access control correctly.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>1190</CWE_ID><Name>DMA Device Enabled Too Early in Boot Phase</Name><Description>The product enables a Direct Memory Access (DMA) capable device before the security configuration settings are established, which allows an attacker to extract data from or gain privileges on the product.</Description></Weakness><Weakness><CWE_ID>1191</CWE_ID><Name>On-Chip Debug and Test Interface With Improper Access Control</Name><Description>chain: JTAG interface is not disabled (CWE-1191) during ROM code execution, introducing a race condition (CWE-362) to extract encryption keys</Description></Weakness><Weakness><CWE_ID>1193</CWE_ID><Name>Power-On of Untrusted Execution Core Before Enabling Fabric Access Control</Name><Description>The product enables components that contain untrusted firmware before memory and fabric access controls have been enabled.</Description></Weakness><Weakness><CWE_ID>1220</CWE_ID><Name>Insufficient Granularity of Access Control</Name><Description>An operating system has an overly permission Access Control List onsome system files, including those related to user passwords</Description></Weakness><Weakness><CWE_ID>1268</CWE_ID><Name>Policy Privileges are not Assigned Consistently Between Control and Data Agents</Name><Description>The product's hardware-enforced access control for a particular resource improperly accounts for privilege discrepancies between control and write policies.
			   </Description></Weakness><Weakness><CWE_ID>1280</CWE_ID><Name>Access Control Check Implemented After Asset is Accessed</Name><Description>A product's hardware-based access control check occurs after the asset has been accessed.</Description></Weakness><Weakness><CWE_ID>1297</CWE_ID><Name>Unprotected Confidential Information on Device is Accessible by OSAT Vendors</Name><Description>The product does not adequately protect confidential information on the device from being accessed by Outsourced Semiconductor Assembly and Test (OSAT) vendors.</Description></Weakness><Weakness><CWE_ID>1311</CWE_ID><Name>Improper Translation of Security Attributes by Fabric Bridge</Name><Description>The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.</Description></Weakness><Weakness><CWE_ID>1315</CWE_ID><Name>Improper Setting of Bus Controlling Capability in Fabric End-point</Name><Description>The bus controller enables bits in the fabric end-point to allow responder devices to control transactions on the fabric.</Description></Weakness><Weakness><CWE_ID>1318</CWE_ID><Name>Missing Support for Security Features in On-chip Fabrics or Buses</Name><Description> On-chip fabrics or buses either do not support or are not configured to support privilege separation or other security features, such as access control. </Description></Weakness><Weakness><CWE_ID>1320</CWE_ID><Name>Improper Protection for Outbound Error Messages and Alert Signals</Name><Description>Untrusted agents can disable alerts about signal conditions exceeding limits or the response mechanism that handles such alerts.
			</Description></Weakness><Weakness><CWE_ID>1321</CWE_ID><Name>Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')</Name><Description>Prototype pollution by setting object attributes based on dot-separated path.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Flash File Overlay</Name><Description>An attacker creates a transparent overlay using flash in order to intercept user actions for the purpose of performing a clickjacking attack. In this technique, the Flash file provides a transparent overlay over HTML content. Because the Flash application is on top of the content, user actions, such as clicks, are caught by the Flash application rather than the underlying HTML. The action is then interpreted by the overlay to perform the actions the attacker wishes.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Flash Injection</Name><Description>An attacker tricks a victim to execute malicious flash content that executes commands or makes flash calls specified by the attacker. One example of this attack is cross-site flashing, an attacker controlled parameter to a reference call loads from content specified by the attacker.</Description><Mitigations><Mitigation>Implementation: remove sensitive information such as user name and password in the SWF file.</Mitigation><Mitigation>Implementation: use validation on both client and server side.</Mitigation><Mitigation>Implementation: remove debug information.</Mitigation><Mitigation>Implementation: use SSL when loading external data</Mitigation><Mitigation>Implementation: use crossdomain.xml file to allow the application domain to load stuff or the SWF file called by other domain.</Mitigation></Mitigations><Examples><Example><Reference>In the following example, the SWF file contains A request like becomes</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>IMAP/SMTP Command Injection</Name><Description>An adversary exploits weaknesses in input validation on web-mail servers to execute commands on the IMAP/SMTP server. Web-mail servers often sit between the Internet and the IMAP or SMTP mail server. User requests are received by the web-mail servers which then query the back-end mail server for the requested information and return this response to the user. In an IMAP/SMTP command injection attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Software Integrity Attack</Name><Description>An attacker initiates a series of events designed to cause a user, program, server, or device to perform actions which undermine the integrity of software code, device data structures, or device firmware, achieving the modification of the target's integrity to achieve an insecure state.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Malicious Software Download</Name><Description>An attacker uses deceptive methods to cause a user or an automated process to download and install dangerous code that originates from an attacker controlled source. There are several variations to this strategy of attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Software Update</Name><Description>An adversary uses deceptive methods to cause a user or an automated process to download and install dangerous code believed to be a valid update that originates from an adversary controlled source.</Description><Mitigations><Mitigation>Validate software updates before installing.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1072</Entry_ID><Entry_Name>Software Deployment Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Automated Software Update via Redirection</Name><Description>An attacker exploits two layers of weaknesses in server or client software for automated update mechanisms to undermine the integrity of the target code-base. The first weakness involves a failure to properly authenticate a server as a source of update or patch content. This type of weakness typically results from authentication mechanisms which can be defeated, allowing a hostile server to satisfy the criteria that establish a trust relationship. The second weakness is a systemic failure to validate the identity and integrity of code downloaded from a remote location, hence the inability to distinguish malicious code from a legitimate update.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Reverse Engineering</Name><Description>An adversary discovers the structure, function, and composition of an object, resource, or system by using a variety of analysis techniques to effectively determine how the analyzed entity was constructed or operates. The goal of reverse engineering is often to duplicate the function, or a part of the function, of an object in order to duplicate or "back engineer" some aspect of its functioning. Reverse engineering techniques can be applied to mechanical objects, electronic devices, or software, although the methodology and techniques involved in each type of analysis differ widely.</Description><Mitigations><Mitigation>Employ code obfuscation techniques to prevent the adversary from reverse engineering the targeted entity.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1278</CWE_ID><Name>Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques</Name><Description>Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Black Box Reverse Engineering</Name><Description>An adversary discovers the structure, function, and composition of a type of computer software through black box analysis techniques. 'Black Box' methods involve interacting with the software indirectly, in the absence of direct access to the executable object. Such analysis typically involves interacting with the software at the boundaries of where the software interfaces with a larger execution environment, such as input-output vectors, libraries, or APIs. Black Box Reverse Engineering also refers to gathering physical side effects of a hardware device, such as electromagnetic radiation or sounds.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>203</CWE_ID><Name>Observable Discrepancy</Name><Description>Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.</Description></Weakness><Weakness><CWE_ID>1255</CWE_ID><Name>Comparison Logic is Vulnerable to Power Side-Channel Attacks</Name><Description>CMAC verification vulnerable to timing and power attacks.</Description></Weakness><Weakness><CWE_ID>1300</CWE_ID><Name>Improper Protection of Physical Side Channels</Name><Description>power consumption varies based on number of pixels being illuminated in a display, allowing reading of secrets such as the PIN by using the USB interface to measure power consumption</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.009</Entry_ID><Entry_Name>Obfuscated Files or Information: Embedded Payloads</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1546.004</Entry_ID><Entry_Name>Event Triggered Execution:.bash_profile and .bashrc</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1546.016</Entry_ID><Entry_Name>Event Triggered Execution: Installer Packages</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Embedding Scripts within Scripts</Name><Description>An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts.</Description><Mitigations><Mitigation>Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation><Mitigation>Server side developers should not proxy content via XHR or other means. If a HTTP proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation><Mitigation>Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Perform input validation for all remote content.</Mitigation><Mitigation>Perform output validation for all remote content.</Mitigation><Mitigation>Disable scripting languages such as JavaScript in browser</Mitigation><Mitigation>Session tokens for specific host</Mitigation><Mitigation>Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation><Mitigation>Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation></Mitigations><Examples><Example><Reference>Ajax applications enable rich functionality for browser based web applications. Applications like Google Maps deliver unprecedented ability to zoom in and out, scroll graphics, and change graphic presentation through Ajax. The security issues that an adversary may exploit in this instance are the relative lack of security features in JavaScript and the various browser's implementation of JavaScript, these security gaps are what XSS and a host of other client side vulnerabilities are based on. While Ajax may not open up new security holes, per se, due to the conversational aspects between client and server of Ajax communication, attacks can be optimized. A single zoom in or zoom out on a graphic in an Ajax application may round trip to the server dozens of times. One of the first steps many adversarys take is frequently footprinting an environment, this can include scanning local addresses like 192.*.*.* IP addresses, checking local directories, files, and settings for known vulnerabilities, and so on. The XSS script that is embedded in a given IMG tag can be manipulated to probe a different address on every click of the mouse or other motions that the Ajax application is aware of. In addition the enumerations allow for the adversary to nest sequential logic in the attacks. While Ajax applications do not open up brand new attack vectors, the existing attack vectors are more than adequate to execute attacks, and now these attacks can be optimized to sequentially execute and enumerate host environments.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Reverse Engineer an Executable to Expose Assumed Hidden Functionality</Name><Description>An attacker analyzes a binary file or executable for the purpose of discovering the structure, function, and possibly source-code of the file by using a variety of analysis techniques to effectively determine how the software functions and operates. This type of analysis is also referred to as Reverse Code Engineering, as techniques exist for extracting source code from an executable. Several techniques are often employed for this purpose, both black box and white box. The use of computer bus analyzers and packet sniffers allows the binary to be studied at a level of interactions with its computing environment, such as a host OS, inter-process communication, and/or network communication. This type of analysis falls into the 'black box' category because it involves behavioral analysis of the software without reference to source code, object code, or protocol specifications.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>912</CWE_ID><Name>Hidden Functionality</Name><Description>A wireless access point manual specifies that the only method of configuration is via web interface (CWE-1059), but there is an undisclosed telnet server that was activated by default (CWE-912).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.001</Entry_ID><Entry_Name>Unsecured Credentials:Credentials in files</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Read Sensitive Constants Within an Executable</Name><Description>
            </Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>798</CWE_ID><Name>Use of Hard-coded Credentials</Name><Description>Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Protocol Analysis</Name><Description>An adversary engages in activities to decipher and/or decode protocol information for a network or application communication protocol used for transmitting information between interconnected nodes or systems on a packet-switched data network. While this type of analysis involves the analysis of a networking protocol inherently, it does not require the presence of an actual or physical network.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>326</CWE_ID><Name>Inadequate Encryption Strength</Name><Description>Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>PHP Remote File Inclusion</Name><Description>In this pattern the adversary is able to load and execute arbitrary code remotely available from the application. This is usually accomplished through an insecurely configured PHP runtime environment and an improperly sanitized "include" or "require" call, which the user can then control to point to any web-accessible file. This allows adversaries to hijack the targeted application and force it to execute their own instructions.</Description><Mitigations><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation><Mitigation>Implementation: Only allow known files to be included (allowlist)</Mitigation><Mitigation>Implementation: Make use of indirect references passed in URL parameters instead of file names</Mitigation><Mitigation>Configuration: Ensure that remote scripts cannot be include in the "include" or "require" PHP directives</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>98</CWE_ID><Name>Improper Control of Filename for Include/Require Statement in PHP Program ('PHP Remote File Inclusion')</Name><Description>chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description></Weakness><Weakness><CWE_ID>80</CWE_ID><Name>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</Name><Description>XSS not quoted in error page.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>38</Entry_ID><Entry_Name>URL Redirector Abuse</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Fake the Source of Data</Name><Description>An adversary takes advantage of improper authentication to provide data or services under a falsified identity. The purpose of using the falsified identity may be to prevent traceability of the provided data or to assume the rights granted to another individual. One of the simplest forms of this attack would be the creation of an email message with a modified "From" field in order to appear that the message was sent from someone other than the actual sender. The root of the attack (in this case the email system) fails to properly authenticate the source and this results in the reader incorrectly performing the instructed action. Results of the attack vary depending on the details of the attack, but common results include privilege escalation, obfuscation of other attacks, and data corruption/manipulation.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Principal Spoof</Name><Description>A Principal Spoof is a form of Identity Spoofing where an adversary pretends to be some other person in an interaction. This is often accomplished by crafting a message (either written, verbal, or visual) that appears to come from a person other than the adversary. Phishing and Pharming attacks often attempt to do this so that their attempts to gather sensitive information appear to come from a legitimate source. A Principal Spoof does not use stolen or spoofed authentication credentials, instead relying on the appearance and content of the message to reflect identity.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1134.002</Entry_ID><Entry_Name>Access Token Manipulation: Create Process with Token</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1134.003</Entry_ID><Entry_Name>Access Token Manipulation: Make and Impersonate Token</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1606</Entry_ID><Entry_Name>Forge Web Credentials</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Session Credential Falsification through Forging</Name><Description>An attacker creates a false but functional session credential in order to gain or usurp access to a service. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. If an attacker is able to forge valid session credentials they may be able to bypass authentication or piggy-back off some other authenticated user's session. This attack differs from Reuse of Session IDs and Session Sidejacking attacks in that in the latter attacks an attacker uses a previous or existing credential without modification while, in a forging attack, the attacker must create their own credential, although it may be based on previously observed credentials.</Description><Mitigations><Mitigation>Implementation: Use session IDs that are difficult to guess or brute-force: One way for the attackers to obtain valid session IDs is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation><Mitigation>Implementation: Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation></Mitigations><Examples><Example><Reference>This example uses client side scripting to set session ID in the victim's browser. The JavaScript code fixates a falsified session credential into victim's browser, with the help of crafted a URL link. A similar example uses session ID as an argument of the URL. Once the victim clicks the links, the attacker may be able to bypass authentication or piggy-back off some other authenticated victim's session.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>664</CWE_ID><Name>Improper Control of a Resource Through its Lifetime</Name><Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>44</Entry_ID><Entry_Name>XML Entity Expansion</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Exponential Data Expansion</Name><Description>An adversary submits data to a target application which contains nested exponential data expansion to produce excessively large output. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. However, this capability can be abused to create excessive demands on a processor's CPU and memory. A small number of nested expansions can result in an exponential growth in demands on memory.</Description><Mitigations><Mitigation>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</Mitigation><Mitigation>Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.</Mitigation></Mitigations><Examples><Example><Reference>The most common example of this type of attack is the "many laughs" attack (sometimes called the 'billion laughs' attack). For example: This is well formed and valid XML according to the DTD. Each entity increases the number entities by a factor of 10. The line of XML containing lol9; expands out exponentially to a message with 10^9 entities. A small message of a few KBs in size can easily be expanded into a few GB of memory in the parser. By including 3 more entities similar to the lol9 entity in the above code to the DTD, the program could expand out over a TB as there will now be 10^12 entities. Depending on the robustness of the target machine, this can lead to resource depletion, application crash, or even the execution of arbitrary code through a buffer overflow.</Reference><Description /></Example><Example><Reference>This example is similar, but uses YAML. This was used to attack Kubernetes [REF-686]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness><Weakness><CWE_ID>776</CWE_ID><Name>Improper Restriction of Recursive Entity References in DTDs ('XML Entity Expansion')</Name><Description>Parsing library allows XML bomb</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Targeting Error Pages</Name><Description>An adversary distributes a link (or possibly some other query structure) with a request to a third party web server that is malformed and also contains a block of exploit code in order to have the exploit become live code in the resulting error page.</Description><Mitigations><Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation><Mitigation>Implementation: Normalize, filter and use an allowlist for any input that will be used in error messages.</Mitigation><Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>81</CWE_ID><Name>Improper Neutralization of Script in an Error Message Web Page</Name><Description>XSS in error page from targeted parameter.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Using Alternate Syntax</Name><Description>An adversary uses alternate forms of keywords or commands that result in the same action as the primary form but which may not be caught by filters. For example, many keywords are processed in a case insensitive manner. If the site's web filtering algorithm does not convert all tags into a consistent case before the comparison with forbidden keywords it is possible to bypass filters (e.g., incomplete black lists) by using an alternate case structure. For example, the "script" tag using the alternate forms of "Script" or "ScRiPt" may bypass filters where "script" is the only form tested. Other variants using different syntax representations are also possible as well as using pollution meta-characters or entities that are eventually ignored by the rendering engine. The attack can result in the execution of otherwise prohibited functionality.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation><Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation></Mitigations><Examples><Example><Reference>In this example, the adversary tries to get &lt;script&gt;alert(1)&lt;/script&gt; executed by the victim's browser. The target application employs regular expressions to make sure no script is being passed through the application to the web page; such a regular expression could be ((?i)script), and the application would replace all matches by this regex by the empty string. An adversary will then create a special payload to bypass this filter: when the applications gets this input string, it will replace all "script" (case insensitive) by the empty string and the resulting input will be the desired vector by the adversary: In this example, we assume that the application needs to write a particular string in a client-side JavaScript context (e.g., &lt;script&gt;HERE&lt;/script&gt;). For the adversary to execute the same payload as in the previous example, they would need to send alert(1) if there was no filtering. The application makes use of the following regular expression as filter and replaces all matches by the empty string. For example each occurrence of alert(), eval(), foo() or even the string "alert" would be stripped. An adversary will then create a special payload to bypass this filter: when the applications gets this input string, it won't replace anything and this piece of JavaScript has exactly the same runtime meaning as alert(1). The adversary could also have used non-alphanumeric XSS vectors to bypass the filter; for example, would be executed by the JavaScript engine like alert(1) is.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>87</CWE_ID><Name>Improper Neutralization of Alternate XSS Syntax</Name><Description>XSS using "&amp;={script}".</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1531</Entry_ID><Entry_Name>Account Access Removal</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Inducing Account Lockout</Name><Description>An attacker leverages the security functionality of the system aimed at thwarting potential attacks to launch a denial of service attack against a legitimate system user. Many systems, for instance, implement a password throttling mechanism that locks an account after a certain number of incorrect log in attempts. An attacker can leverage this throttling mechanism to lock a legitimate user out of their own account. The weakness that is being leveraged by an attacker is the very security feature that has been put in place to counteract attacks.</Description><Mitigations><Mitigation>Implement intelligent password throttling mechanisms such as those which take IP address into account, in addition to the login name.</Mitigation><Mitigation>When implementing security features, consider how they can be misused and made to turn on themselves.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>645</CWE_ID><Name>Overly Restrictive Account Lockout Mechanism</Name><Description>The product contains an account lockout protection mechanism, but the mechanism is too restrictive and can be triggered too easily, which allows attackers to deny service to legitimate users by causing their accounts to be locked out.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Encryption Brute Forcing</Name><Description>An attacker, armed with the cipher text and the encryption algorithm used, performs an exhaustive (brute force) search on the key space to determine the key that decrypts the cipher text to obtain the plaintext.</Description><Mitigations><Mitigation>Use commonly accepted algorithms and recommended key sizes. The key size used will depend on how important it is to keep the data confidential and for how long.</Mitigation><Mitigation>In theory a brute force attack performing an exhaustive key space search will always succeed, so the goal is to have computational security. Moore's law needs to be taken into account that suggests that computing resources double every eighteen months.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>326</CWE_ID><Name>Inadequate Encryption Strength</Name><Description>Encryption error uses fixed salt, simplifying brute force / dictionary attacks (overlaps randomness).</Description></Weakness><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness><Weakness><CWE_ID>1204</CWE_ID><Name>Generation of Weak Initialization Vector (IV)</Name><Description>Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Removal of filters: Input filters, output filters, data masking</Name><Description>An attacker removes or disables filtering mechanisms on the target application. Input filters prevent invalid data from being sent to an application (for example, overly large inputs that might cause a buffer overflow or other malformed inputs that may not be correctly handled by an application). Input filters might also be designed to constrained executable content.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Serialized Data External Linking</Name><Description>An adversary creates a serialized data file (e.g. XML, YAML, etc...) that contains an external data reference. Because serialized data parsers may not validate documents with external references, there may be no checks on the nature of the reference in the external data. This can allow an adversary to open arbitrary files or connections, which may further lead to the adversary gaining access to information on the system that they would normally be unable to obtain.</Description><Mitigations><Mitigation>Configure the serialized data processor to only retrieve external entities from trusted sources.</Mitigation></Mitigations><Examples><Example><Reference>The following DTD would attempt to open the /dev/tty device: A malicious actor could use this crafted DTD to reveal sensitive information.</Reference><Description /></Example><Example><Reference>The following XML snippet would attempt to open the /etc/passwd file:</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Create Malicious Client</Name><Description>An adversary creates a client application to interface with a target service where the client violates assumptions the service makes about clients. Services that have designated client applications (as opposed to services that use general client applications, such as IMAP or POP mail servers which can interact with any IMAP or POP client) may assume that the client will follow specific procedures.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1112</Entry_ID><Entry_Name>Modify Registry</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1647</Entry_ID><Entry_Name>Plist Modification</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Manipulate Registry Information</Name><Description>An adversary exploits a weakness in authorization in order to modify content within a registry (e.g., Windows Registry, Mac plist, application registry). Editing registry information can permit the adversary to hide configuration information or remove indicators of compromise to cover up activity. Many applications utilize registries to store configuration and service information. As such, modification of registry information can affect individual services (affecting billing, authorization, or even allowing for identity spoofing) or the overall configuration of a targeted application. For example, both Java RMI and SOAP use registries to track available services. Changing registry values is sometimes a preliminary step towards completing another attack pattern, but given the long term usage of many registry values, manipulation of registry information could be its own end.</Description><Mitigations><Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys.</Mitigation><Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation><Mitigation>Employ robust identification and audit/blocking using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1005</Entry_ID><Entry_Name>Data from Local System</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Lifting Sensitive Data Embedded in Cache</Name><Description>An adversary examines a target application's cache, or a browser cache, for sensitive information. Many applications that communicate with remote entities or which perform intensive calculations utilize caches to improve efficiency. However, if the application computes or receives sensitive information and the cache is not appropriately protected, an attacker can browse the cache and retrieve this information. This can result in the disclosure of sensitive information.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>524</CWE_ID><Name>Use of Cache Containing Sensitive Information</Name><Description>The code uses a cache that contains sensitive information, but the cache can be read by an actor outside of the intended control sphere.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>1239</CWE_ID><Name>Improper Zeroization of Hardware Register</Name><Description>The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.</Description></Weakness><Weakness><CWE_ID>1258</CWE_ID><Name>Exposure of Sensitive System Information Due to Uncleared Debug Information</Name><Description>Rust library leaks Oauth client details in application debug logs</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Lifting credential(s)/key material embedded in client distributions (thick or thin)</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-37 : Retrieve Embedded Sensitive Data. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1553.002</Entry_ID><Entry_Name>Subvert Trust Controls:Code Signing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Signing Malicious Code</Name><Description>The adversary extracts credentials used for code signing from a production environment and then uses these credentials to sign malicious content with the developer's key. Many developers use signing keys to sign code or hashes of code. When users or applications verify the signatures are accurate they are led to believe that the code came from the owner of the signing key and that the code has not been modified since the signature was applied. If the adversary has extracted the signing credentials then they can use those credentials to sign their own code bundles. Users or tools that verify the signatures attached to the code will likely assume the code came from the legitimate developer and install or run the code, effectively allowing the adversary to execute arbitrary code on the victim's computer. This differs from CAPEC-673, because the adversary is performing the code signing.</Description><Mitigations><Mitigation>Ensure digital certificates are protected and inaccessible by unauthorized uses.</Mitigation><Mitigation>If a digital certificate has been compromised it should be revoked and regenerated.</Mitigation><Mitigation>Even if a piece of software has a valid and trusted digital signature, it should be assessed for any weaknesses and vulnerabilities.</Mitigation></Mitigations><Examples><Example><Reference>In the famous Stuxnet malware incident, two digital certificates were compromised in order to sign malicious device drivers with legitimate credentials. The signing resulted in the malware appearing as trusted by the system it was running on, which facilitated the installation of the malware in kernel mode. This further resulted in Stuxnet remaining undetected for a significant amount of time. [REF-699]</Reference><Description /></Example><Example><Reference>The cyber espionage group CyberKittens leveraged a stolen certificate from AI Squared that allowed them to leverage a signed executable within Operation Wilted Tulip. This ultimately allowed the executable to run as trusted on the system, allowing a Crowd Strike stager to be loaded within the system's memory. [REF-714]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Removing Important Client Functionality</Name><Description>An adversary removes or disables functionality on the client that the server assumes to be present and trustworthy.</Description><Mitigations><Mitigation>Design: For any security checks that are performed on the client side, ensure that these checks are duplicated on the server side.</Mitigation><Mitigation>Design: Ship client-side application with integrity checks (code signing) when possible.</Mitigation><Mitigation>Design: Use obfuscation and other techniques to prevent reverse engineering the client code.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Removing/short-circuiting 'Purse' logic: removing/mutating 'cash' decrements</Name><Description>An attacker removes or modifies the logic on a client associated with monetary calculations resulting in incorrect information being sent to the server. A server may rely on a client to correctly compute monetary information. For example, a server might supply a price for an item and then rely on the client to correctly compute the total cost of a purchase given the number of items the user is buying. If the attacker can remove or modify the logic that controls these calculations, they can return incorrect values to the server. The attacker can use this to make purchases for a fraction of the legitimate cost or otherwise avoid correct billing for activities.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Using MIME Type Mismatch</Name><Description>An adversary creates a file with scripting content but where the specified MIME type of the file is such that scripting is not expected. The adversary tricks the victim into accessing a URL that responds with the script file. Some browsers will detect that the specified MIME type of the file does not match the actual type of its content and will automatically switch to using an interpreter for the real content type. If the browser does not invoke script filters before doing this, the adversary's script may run on the target unsanitized, possibly revealing the victim's cookies or executing arbitrary script in their browser.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>79</CWE_ID><Name>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Name><Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>646</CWE_ID><Name>Reliance on File Name or Extension of Externally-Supplied File</Name><Description>The product allows a file to be uploaded, but it relies on the file name or extension of the file to determine the appropriate behaviors. This could be used by attackers to cause the file to be misclassified and processed in a dangerous fashion.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1134</Entry_ID><Entry_Name>Access Token Manipulation</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1528</Entry_ID><Entry_Name>Steal Application Access Token</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1539</Entry_ID><Entry_Name>Steal Web Session Cookie</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Exploitation of Trusted Identifiers</Name><Description>
            </Description><Mitigations><Mitigation>Design: utilize strong federated identity such as SAML to encrypt and sign identity tokens in transit.</Mitigation><Mitigation>Implementation: Use industry standards session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf.</Mitigation><Mitigation>Implementation: If the identifier is used for authentication, such as in the so-called single sign on use cases, then ensure that it is protected at the same level of assurance as authentication tokens.</Mitigation><Mitigation>Implementation: If the web or application server supports it, then encrypting and/or signing the identifier (such as cookie) can protect the ID if intercepted.</Mitigation><Mitigation>Design: Use strong session identifiers that are protected in transit and at rest.</Mitigation><Mitigation>Implementation: Utilize a session timeout for all sessions, for example 20 minutes. If the user does not explicitly logout, the server terminates their session after this period of inactivity. If the user logs back in then a new session key is generated.</Mitigation><Mitigation>Implementation: Verify authenticity of all identifiers at runtime.</Mitigation></Mitigations><Examples><Example><Reference>Thin client applications like web applications are particularly vulnerable to session ID attacks. Since the server has very little control over the client, but still must track sessions, data, and objects on the server side, cookies and other mechanisms have been used to pass the key to the session data between the client and server. When these session keys are compromised it is trivial for an adversary to impersonate a user's session in effect, have the same capabilities as the authorized user. There are two main ways for an adversary to exploit session IDs. A brute force attack involves an adversary repeatedly attempting to query the system with a spoofed session header in the HTTP request. A web server that uses a short session ID can be easily spoofed by trying many possible combinations so the parameters session-ID= 1234 has few possible combinations, and an adversary can retry several hundred or thousand request with little to no issue on their side. The second method is interception, where a tool such as wireshark is used to sniff the wire and pull off any unprotected session identifiers. The adversary can then use these variables and access the application.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>539</CWE_ID><Name>Use of Persistent Cookies Containing Sensitive Information</Name><Description>The web application uses persistent cookies, but the cookies contain sensitive information.</Description></Weakness><Weakness><CWE_ID>6</CWE_ID><Name>J2EE Misconfiguration: Insufficient Session-ID Length</Name><Description>The J2EE application is configured to use an insufficient session ID length.</Description></Weakness><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>664</CWE_ID><Name>Improper Control of a Resource Through its Lifetime</Name><Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>642</CWE_ID><Name>External Control of Critical State Data</Name><Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Leveraging web tools (e.g. Mozilla's GreaseMonkey, Firebug) to change application behavior</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Functionality Misuse</Name><Description>An adversary leverages a legitimate capability of an application in such a way as to achieve a negative technical impact. The system functionality is not altered or modified but used in a way that was not intended. This is often accomplished through the overuse of a specific functionality or by leveraging functionality with design flaws that enables the adversary to gain access to unauthorized, sensitive data.</Description><Mitigations><Mitigation>Perform comprehensive threat modeling, a process of identifying, evaluating, and mitigating potential threats to the application. This effort can help reveal potentially obscure application functionality that can be manipulated for malicious purposes.</Mitigation><Mitigation>When implementing security features, consider how they can be misused and compromised.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1242</CWE_ID><Name>Inclusion of Undocumented Features or Chicken Bits</Name><Description>The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.</Description></Weakness><Weakness><CWE_ID>1246</CWE_ID><Name>Improper Write Handling in Limited-write Non-Volatile Memories</Name><Description>The product does not implement or incorrectly implements wear leveling operations in limited-write non-volatile memories.</Description></Weakness><Weakness><CWE_ID>1281</CWE_ID><Name>Sequence of Processor Instructions Leads to Unexpected Behavior</Name><Description>A bug in some Intel Pentium processors allow DoS (hang) via an invalid "CMPXCHG8B" instruction, causing a deadlock</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Directory Traversal</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-126 : Path Traversal". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Fuzzing for garnering J2EE/.NET-based stack traces, for application mapping</Name><Description>This attack pattern has been deprecated as it was merged into "CAPEC-215 : Fuzzing for application mapping". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Fuzzing for application mapping</Name><Description>An attacker sends random, malformed, or otherwise unexpected messages to a target application and observes the application's log or error messages returned. The attacker does not initially know how a target will respond to individual messages but by attempting a large number of message variants they may find a variant that trigger's desired behavior. In this attack, the purpose of the fuzzing is to observe the application's log and error messages, although fuzzing a target can also sometimes cause the target to enter an unstable state, causing a crash.</Description><Mitigations><Mitigation>Design: Construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are catalogued and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.</Mitigation><Mitigation>Design: wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.</Mitigation><Mitigation>Implementation: Obfuscate server fields of HTTP response.</Mitigation><Mitigation>Implementation: Hide inner ordering of HTTP response header.</Mitigation><Mitigation>Implementation: Customizing HTTP error codes such as 404 or 500.</Mitigation><Mitigation>Implementation: Hide HTTP response header software information filed.</Mitigation><Mitigation>Implementation: Hide cookie's software information filed.</Mitigation><Mitigation>Implementation: Obfuscate database type in Database API's error message.</Mitigation></Mitigations><Examples><Example><Reference>The following code generates an error message that leaks the full pathname of the configuration file. If this code is running on a server, such as a web application, then the person making the request should not know what the full pathname of the configuration directory is. By submitting a username that does not produce a $file that exists, an attacker could get this pathname. It could then be used to exploit path traversal or symbolic link following problems that may exist elsewhere in the application.</Reference><Description /></Example><Example><Reference>In languages that utilize stack traces, revealing them can give adversaries information that allows them to map functions and file locations for an application. The following Java method prints out a stack trace that exposes the application to this attack pattern. If this code is running on a server, such as a web application, then the adversary could cause the exception to be printed through fuzzing.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>209</CWE_ID><Name>Generation of Error Message Containing Sensitive Information</Name><Description>SSH password for private key stored in build log</Description></Weakness><Weakness><CWE_ID>532</CWE_ID><Name>Insertion of Sensitive Information into Log File</Name><Description>SSH password for private key stored in build log</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Communication Channel Manipulation</Name><Description>An adversary manipulates a setting or parameter on communications channel in order to compromise its security. This can result in information exposure, insertion/removal of information from the communications stream, and/or potentially system compromise.</Description><Mitigations><Mitigation>Encrypt all sensitive communications using properly-configured cryptography.</Mitigation><Mitigation>Design the communication system such that it associates proper authentication/authorization with each channel/message.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>306</CWE_ID><Name>Missing Authentication for Critical Function</Name><Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploiting Incorrectly Configured SSL/TLS</Name><Description>An adversary takes advantage of incorrectly configured SSL/TLS communications that enables access to data intended to be encrypted. The adversary may also use this type of attack to inject commands or other traffic into the encrypted stream to cause compromise of either the client or server.</Description><Mitigations><Mitigation>Do not use SSL, as all SSL versions have been broken and should not be used. If TLS is not an option for the client or server, consider setting timeouts on SSL sessions to extremely low values to lessen the potential impact.</Mitigation><Mitigation>Only use TLS version 1.2+, as versions 1.0 and 1.1 are insecure.</Mitigation><Mitigation>Configure TLS to use secure algorithms. The current recommendation is to use ECDH, ECDSA, AES256-GCM, and SHA384 for the most security.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Spoofing of UDDI/ebXML Messages</Name><Description>An attacker spoofs a UDDI, ebXML, or similar message in order to impersonate a service provider in an e-business transaction. UDDI, ebXML, and similar standards are used to identify businesses in e-business transactions. Among other things, they identify a particular participant, WSDL information for SOAP transactions, and supported communication protocols, including security protocols. By spoofing one of these messages an attacker could impersonate a legitimate business in a transaction or could manipulate the protocols used between a client and business. This could result in disclosure of sensitive information, loss of message integrity, or even financial fraud.</Description><Mitigations><Mitigation>Implementation: Clients should only trust UDDI, ebXML, or similar messages that are verifiably signed by a trusted party.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>32</Entry_ID><Entry_Name>Routing Detour</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>44</Entry_ID><Entry_Name>XML Entity Expansion</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>XML Routing Detour Attacks</Name><Description>An attacker subverts an intermediate system used to process XML content and forces the intermediate to modify and/or re-route the processing of the content. XML Routing Detour Attacks are Adversary in the Middle type attacks (CAPEC-94). The attacker compromises or inserts an intermediate system in the processing of the XML message. For example, WS-Routing can be used to specify a series of nodes or intermediaries through which content is passed. If any of the intermediate nodes in this route are compromised by an attacker they could be used for a routing detour attack. From the compromised system the attacker is able to route the XML process to other nodes of their choice and modify the responses so that the normal chain of processing is unaware of the interception. This system can forward the message to an outside entity and hide the forwarding and processing from the legitimate processing systems by altering the header information.</Description><Mitigations><Mitigation>Design: Specify maximum number intermediate nodes for the request and require SSL connections with mutual authentication.</Mitigation><Mitigation>Implementation: Use SSL for connections between all parties with mutual authentication.</Mitigation></Mitigations><Examples><Example><Reference>Here is an example SOAP call from a client, example1.com, to a target, example4.com, via 2 intermediaries, example2.com and example3.com. (note: The client here is not necessarily a 'end user client' but rather the starting point of the XML transaction). Add an additional node (example3.com/router) to the XML path in a WS-Referral message Continuing with this example, the attacker injects a bogus routing node (using a WS-Referral service) into the routing table of the XML header but not access the message directly on the initiator/intermediary node that they have targeted. Thus, the attacker can route the XML message to the attacker controlled node (and access to the message contents).</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>441</CWE_ID><Name>Unintended Proxy or Intermediary ('Confused Deputy')</Name><Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description></Weakness><Weakness><CWE_ID>610</CWE_ID><Name>Externally Controlled Reference to a Resource in Another Sphere</Name><Description>Database system allows attackers to bypass sandbox restrictions by using the Reflection API.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploiting Trust in Client</Name><Description>An attack of this type exploits vulnerabilities in client/server communication channel authentication and data integrity. It leverages the implicit trust a server places in the client, or more importantly, that which the server believes is the client. An attacker executes this type of attack by communicating directly with the server where the server believes it is communicating only with a valid client. There are numerous variations of this type of attack.</Description><Mitigations><Mitigation>Design: Ensure that client process and/or message is authenticated so that anonymous communications and/or messages are not accepted by the system.</Mitigation><Mitigation>Design: Do not rely on client validation or encoding for security purposes.</Mitigation><Mitigation>Design: Utilize digital signatures to increase authentication assurance.</Mitigation><Mitigation>Design: Utilize two factor authentication to increase authentication assurance.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Client-Server Protocol Manipulation</Name><Description>An adversary takes advantage of weaknesses in the protocol by which a client and server are communicating to perform unexpected actions. Communication protocols are necessary to transfer messages between client and server applications. Moreover, different protocols may be used for different types of interactions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>757</CWE_ID><Name>Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')</Name><Description>SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>43</Entry_ID><Entry_Name>XML External Entities</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Data Serialization External Entities Blowup</Name><Description>This attack takes advantage of the entity replacement property of certain data serialization languages (e.g., XML, YAML, etc.) where the value of the replacement is a URI. A well-crafted file could have the entity refer to a URI that consumes a large amount of resources to create a denial of service condition. This can cause the system to either freeze, crash, or execute arbitrary code depending on the URI.</Description><Mitigations><Mitigation>This attack may be mitigated by tweaking the XML parser to not resolve external entities. If external entities are needed, then implement a custom XmlResolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.</Mitigation><Mitigation>This attack may be mitigated by tweaking the serialized data parser to not resolve external entities. If external entities are needed, then implement a custom resolver that has a request timeout, data retrieval limit, and restrict resources it can retrieve locally.</Mitigation></Mitigations><Examples><Example><Reference>In this example, the XML parser parses the attacker's XML and opens the malicious URI where the attacker controls the server and writes a massive amount of data to the response stream. In this example the malicious URI is a large file transfer.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>611</CWE_ID><Name>Improper Restriction of XML External Entity Reference</Name><Description>XXE in XSL stylesheet functionality in a common library used by some web browsers.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>iFrame Overlay</Name><Description>In an iFrame overlay attack the victim is tricked into unknowingly initiating some action in one system while interacting with the UI from seemingly completely different system.</Description><Mitigations><Mitigation>Configuration: Disable iFrames in the Web browser.</Mitigation><Mitigation>Operation: When maintaining an authenticated session with a privileged target system, do not use the same browser to navigate to unfamiliar sites to perform other activities. Finish working with the target system and logout first before proceeding to other tasks.</Mitigation><Mitigation>Operation: If using the Firefox browser, use the NoScript plug-in that will help forbid iFrames.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>45</Entry_ID><Entry_Name>Fingerprinting</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Fingerprinting</Name><Description>An adversary compares output from a target system to known indicators that uniquely identify specific details about the target. Most commonly, fingerprinting is done to determine operating system and application versions. Fingerprinting can be done passively as well as actively. Fingerprinting by itself is not usually detrimental to the target. However, the information gathered through fingerprinting often enables an adversary to discover existing weaknesses in the target.</Description><Mitigations><Mitigation>While some information is shared by systems automatically based on standards and protocols, remove potentially sensitive information that is not necessary for the application's functionality as much as possible.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Session Credential Falsification through Manipulation</Name><Description>An attacker manipulates an existing credential in order to gain access to a target application. Session credentials allow users to identify themselves to a service after an initial authentication without needing to resend the authentication information (usually a username and password) with every message. An attacker may be able to manipulate a credential sniffed from an existing connection in order to gain access to a target server.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>565</CWE_ID><Name>Reliance on Cookies without Validation and Integrity Checking</Name><Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description></Weakness><Weakness><CWE_ID>472</CWE_ID><Name>External Control of Assumed-Immutable Web Parameter</Name><Description>Modification of message number parameter allows attackers to read other people's messages.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499</Entry_ID><Entry_Name>Endpoint Denial of Service</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>10</Entry_ID><Entry_Name>Denial of Service</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Sustained Client Engagement</Name><Description>An adversary attempts to deny legitimate users access to a resource by continually engaging a specific resource in an attempt to keep the resource tied up as long as possible. The adversary's primary goal is not to crash or flood the target, which would alert defenders; rather it is to repeatedly perform actions or abuse algorithmic flaws such that a given resource is tied up and not available to a legitimate user. By carefully crafting a requests that keep the resource engaged through what is seemingly benign requests, legitimate users are limited or completely denied access to the resource.</Description><Mitigations><Mitigation>Potential mitigations include requiring a unique login for each resource request, constraining local unprivileged access by disallowing simultaneous engagements of the resource, or limiting access to the resource to one access per IP address. In such scenarios, the adversary would have to increase engagements either by launching multiple sessions manually or programmatically to counter such defenses.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>400</CWE_ID><Name>Uncontrolled Resource Consumption</Name><Description>Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DTD Injection</Name><Description>An attacker injects malicious content into an application's DTD in an attempt to produce a negative technical impact. DTDs are used to describe how XML documents are processed. Certain malformed DTDs (for example, those with excessive entity expansion as described in CAPEC 197) can cause the XML parsers that process the DTDs to consume excessive resources resulting in resource depletion.</Description><Mitigations><Mitigation>Design: Sanitize incoming DTDs to prevent excessive expansion or other actions that could result in impacts like resource depletion.</Mitigation><Mitigation>Implementation: Disallow the inclusion of DTDs as part of incoming messages.</Mitigation><Mitigation>Implementation: Use XML parsing tools that protect against DTD attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>41</Entry_ID><Entry_Name>XML Attribute Blowup</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Serialized Data Parameter Blowup</Name><Description>This attack exploits certain serialized data parsers (e.g., XML, YAML, etc.) which manage data in an inefficient manner. The attacker crafts an serialized data file with multiple configuration parameters in the same dataset. In a vulnerable parser, this results in a denial of service condition where CPU resources are exhausted because of the parsing algorithm. The weakness being exploited is tied to parser implementation and not language specific.</Description><Mitigations><Mitigation>This attack may be mitigated completely by using a parser that is not using a vulnerable container.</Mitigation><Mitigation>Mitigation may limit the number of configuration parameters per dataset.</Mitigation></Mitigations><Examples><Example><Reference>In this example, assume that the victim is running a vulnerable parser such as .NET framework 1.0. This results in a quadratic runtime of O(n^2). A document with n attributes results in (n^2)/2 operations to be performed. If an operation takes 100 nanoseconds then a document with 100,000 operations would take 500s to process. In this fashion a small message of less than 1MB causes a denial of service condition on the CPU resources.</Reference><Description /></Example><Example><Reference>A YAML bomb leverages references within a YAML file to create exponential growth in memory requirements. By creating a chain of keys whose values are a list of multiple references to the next key in the chain, the amount of memory and processing required to handle the data grows exponentially. This may lead to denial of service or instability resulting from excessive resource consumption.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>File Content Injection</Name><Description>An adversary poisons files with a malicious payload (targeting the file systems accessible by the target software), which may be passed through by standard channels such as via email, and standard web content like PDF and multimedia files. The adversary exploits known vulnerabilities or handling routines in the target processes, in order to exploit the host's trust in executing remote content, including binary files.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Validate all input for content including files. Ensure that if files and remote content must be accepted that once accepted, they are placed in a sandbox type location so that lower assurance clients cannot write up to higher assurance processes (like Web server processes for example)</Mitigation><Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation><Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation><Mitigation>Implementation: Virus scanning on host</Mitigation><Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation></Mitigations><Examples><Example><Reference>PHP is a very popular language used for developing web applications. When PHP is used with global variables, a vulnerability may be opened that affects the file system. A standard HTML form that allows for remote users to upload files, may also place those files in a public directory where the adversary can directly access and execute them through a browser. This vulnerability allows remote adversaries to execute arbitrary code on the system, and can result in the adversary being able to erase intrusion evidence from system and application logs.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Serialized Data with Nested Payloads</Name><Description>Applications often need to transform data in and out of a data format (e.g., XML and YAML) by using a parser. It may be possible for an adversary to inject data that may have an adverse effect on the parser when it is being processed. Many data format languages allow the definition of macro-like structures that can be used to simplify the creation of complex structures. By nesting these structures, causing the data to be repeatedly substituted, an adversary can cause the parser to consume more resources while processing, causing excessive memory consumption and CPU utilization.</Description><Mitigations><Mitigation>Carefully validate and sanitize all user-controllable data prior to passing it to the data parser routine. Ensure that the resultant data is safe to pass to the data parser.</Mitigation><Mitigation>Perform validation on canonical data.</Mitigation><Mitigation>Pick a robust implementation of the data parser.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>112</CWE_ID><Name>Missing XML Validation</Name><Description>The product accepts XML from an untrusted source but does not validate the XML against the proper schema.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>674</CWE_ID><Name>Uncontrolled Recursion</Name><Description>USB-audio driver's descriptor code parsing allows unlimited recursion leading to stack exhaustion.</Description></Weakness><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Oversized Serialized Data Payloads</Name><Description>An adversary injects oversized serialized data payloads into a parser during data processing to produce adverse effects upon the parser such as exhausting system resources and arbitrary code execution.</Description><Mitigations><Mitigation>Carefully validate and sanitize all user-controllable serialized data prior to passing it to the parser routine. Ensure that the resultant data is safe to pass to the parser.</Mitigation><Mitigation>Perform validation on canonical data.</Mitigation><Mitigation>Pick a robust implementation of the serialized data parser.</Mitigation><Mitigation>Validate data against a valid schema or DTD prior to parsing.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>112</CWE_ID><Name>Missing XML Validation</Name><Description>The product accepts XML from an untrusted source but does not validate the XML against the proper schema.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>674</CWE_ID><Name>Uncontrolled Recursion</Name><Description>USB-audio driver's descriptor code parsing allows unlimited recursion leading to stack exhaustion.</Description></Weakness><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1548</Entry_ID><Entry_Name>Abuse Elevation Control Mechanism</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Privilege Escalation</Name><Description>An adversary exploits a weakness enabling them to elevate their privilege and perform an action that they are not supposed to be authorized to perform.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>269</CWE_ID><Name>Improper Privilege Management</Name><Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description></Weakness><Weakness><CWE_ID>1264</CWE_ID><Name>Hardware Logic with Insecure De-Synchronization between Control and Data Channels</Name><Description>Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis of the data cache.</Description></Weakness><Weakness><CWE_ID>1311</CWE_ID><Name>Improper Translation of Security Attributes by Fabric Bridge</Name><Description>The bridge incorrectly translates security attributes from either trusted to untrusted or from untrusted to trusted when converting from one fabric protocol to another.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Hijacking a privileged process</Name><Description>An adversary gains control of a process that is assigned elevated privileges in order to execute arbitrary code with those privileges. Some processes are assigned elevated privileges on an operating system, usually through association with a particular user, group, or role. If an attacker can hijack this process, they will be able to assume its level of privilege in order to execute their own code.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>648</CWE_ID><Name>Incorrect Use of Privileged APIs</Name><Description>A Unix utility that displays online help files, if installed setuid, could allow a local attacker to gain privileges when a particular file-opening function is called.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Implementing a callback to system routine (old AWT Queue)</Name><Description>This attack pattern has been deprecated. Please refer to CAPEC:30 - Hijacking a Privileged Thread of Execution.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Catching exception throw/signal from privileged block</Name><Description>This attack pattern has been deprecated as it did not have enough distinction from CAPEC-30 : Hijacking a Privileged Thread of Execution. Please refer to CAPEC-30 moving forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Escaping a Sandbox by Calling Code in Another Language</Name><Description>The attacker may submit malicious code of another language to obtain access to privileges that were not intentionally exposed by the sandbox, thus escaping the sandbox. For instance, Java code cannot perform unsafe operations, such as modifying arbitrary memory locations, due to restrictions placed on it by the Byte code Verifier and the JVM. If allowed, Java code can call directly into native C code, which may perform unsafe operations, such as call system calls and modify arbitrary memory locations on their behalf. To provide isolation, Java does not grant untrusted code with unmediated access to native C code. Instead, the sandboxed code is typically allowed to call some subset of the pre-existing native code that is part of standard libraries.</Description><Mitigations><Mitigation>Assurance: Sanitize the code of the standard libraries to make sure there is no security weaknesses in them.</Mitigation><Mitigation>Design: Use obfuscation and other techniques to prevent reverse engineering the standard libraries.</Mitigation><Mitigation>Assurance: Use static analysis tool to do code review and dynamic tool to do penetration test on the standard library.</Mitigation><Mitigation>Configuration: Get latest updates for the computer.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Using URL/codebase / G.A.C. (code source) to convince sandbox of privilege</Name><Description>This attack pattern has been deprecated as it did not appear to be a valid attack pattern.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Subversion of Authorization Checks: Cache Filtering, Programmatic Security, etc.</Name><Description>This attack pattern has been deprecated as it did not contain any content and did not serve any useful purpose. Please refer to "CAPEC-207: removing Important Client Functionality" going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Filter Failure through Buffer Overflow</Name><Description>In this attack, the idea is to cause an active filter to fail by causing an oversized transaction. An attacker may try to feed overly long input strings to the program in an attempt to overwhelm the filter (by causing a buffer overflow) and hoping that the filter does not fail securely (i.e. the user input is let into the system unfiltered).</Description><Mitigations><Mitigation>Make sure that ANY failure occurring in the filtering or input validation routine is properly handled and that offending input is NOT allowed to go through. Basically make sure that the vault is closed when failure occurs.</Mitigation><Mitigation>Pre-design: Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Pre-design through Build: Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</Mitigation><Mitigation>Design: Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation></Mitigations><Examples><Example><Reference>Sending in arguments that are too long to cause the filter to fail open is one instantiation of the filter failure attack. The Taylor UUCP daemon is designed to remove hostile arguments before they can be executed. If the arguments are too long, however, the daemon fails to remove them. This leaves the door open for attack.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>733</CWE_ID><Name>Compiler Optimization Removal or Modification of Security-critical Code</Name><Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Resource Injection</Name><Description>An adversary exploits weaknesses in input validation by manipulating resource identifiers enabling the unintended modification or specification of a resource.</Description><Mitigations><Mitigation>Ensure all input content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Perform input validation for all content.</Mitigation><Mitigation>Enforce regular patching of software.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>99</CWE_ID><Name>Improper Control of Resource Identifiers ('Resource Injection')</Name><Description>chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Code Injection</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-242 : Code Injection". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Code Injection</Name><Description>An adversary exploits a weakness in input validation on the target to inject new code into that which is currently executing. This differs from code inclusion in that code inclusion involves the addition or replacement of a reference to a code file, which is subsequently loaded by the target and used as part of the code of some application.</Description><Mitigations><Mitigation>Utilize strict type, character, and encoding enforcement</Mitigation><Mitigation>Ensure all input content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Perform input validation for all content.</Mitigation><Mitigation>Enforce regular patching of software.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>94</CWE_ID><Name>Improper Control of Generation of Code ('Code Injection')</Name><Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Targeting HTML Attributes</Name><Description>An adversary inserts commands to perform cross-site scripting (XSS) actions in HTML attributes. Many filters do not adequately sanitize attributes against the presence of potentially dangerous commands even if they adequately sanitize tags. For example, dangerous expressions could be inserted into a style attribute in an anchor tag, resulting in the execution of malicious code when the resulting page is rendered. If a victim is tricked into viewing the rendered page the attack proceeds like a normal XSS attack, possibly resulting in the loss of sensitive cookies or other malicious activities.</Description><Mitigations><Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation><Mitigation>Implementation: Normalize, filter and use an allowlist for all input including that which is not expected to have any scripting content.</Mitigation><Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>83</CWE_ID><Name>Improper Neutralization of Script in Attributes in a Web Page</Name><Description>Javascript in onmouseover attribute in e-mail address or URL.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Targeting URI Placeholders</Name><Description>An attack of this type exploits the ability of most browsers to interpret "data", "javascript" or other URI schemes as client-side executable content placeholders. This attack consists of passing a malicious URI in an anchor tag HREF attribute or any other similar attributes in other HTML tags. Such malicious URI contains, for example, a base64 encoded HTML content with an embedded cross-site scripting payload. The attack is executed when the browser interprets the malicious content i.e., for example, when the victim clicks on the malicious link.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Design: Utilize strict type, character, and encoding enforcement.</Mitigation><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Ensure all content coming from the client is using the same encoding; if not, the server-side application must canonicalize the data before applying any filtering.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation><Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation></Mitigations><Examples><Example><Reference>The following payload data: represents a base64 encoded HTML and uses the data URI scheme to deliver it to the browser. The decoded payload is the following piece of HTML code: Web applications that take user controlled inputs and reflect them in URI HTML placeholder without a proper validation are at risk for such an attack. An adversary could inject the previous payload that would be placed in a URI placeholder (for example in the anchor tag HREF attribute): Once the victim clicks on the link, the browser will decode and execute the content from the payload. This will result on the execution of the cross-site scripting attack.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>83</CWE_ID><Name>Improper Neutralization of Script in Attributes in a Web Page</Name><Description>Javascript in onmouseover attribute in e-mail address or URL.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Using Doubled Characters</Name><Description>The adversary bypasses input validation by using doubled characters in order to perform a cross-site scripting attack. Some filters fail to recognize dangerous sequences if they are preceded by repeated characters. For example, by doubling the &lt; before a script command, (&lt;&lt;script or %3C%3script using URI encoding) the filters of some web applications may fail to recognize the presence of a script tag. If the targeted server is vulnerable to this type of bypass, the adversary can create a crafted URL or other trap to cause a victim to view a page on the targeted server where the malicious content is executed, as per a normal XSS attack.</Description><Mitigations><Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation><Mitigation>Implementation: Normalize, filter and sanitize all user supplied fields.</Mitigation><Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>85</CWE_ID><Name>Doubled Character XSS Manipulations</Name><Description>Extra "&lt;" in front of SCRIPT tag.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: XSS Using Flash</Name><Description>This pattern has been deprecated as it is covered by a chaining relationship between CAPEC-174: Flash Parameter Injection and CAPEC-591: Stored XSS. Please refer to these CAPECs going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Using Invalid Characters</Name><Description>An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results.</Description><Mitigations><Mitigation>Design: Use libraries and templates that minimize unfiltered input.</Mitigation><Mitigation>Implementation: Normalize, filter and use an allowlist for any input that will be included in any subsequent web pages or back end operations.</Mitigation><Mitigation>Implementation: The victim should configure the browser to minimize active content from untrusted sources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>86</CWE_ID><Name>Improper Neutralization of Invalid Characters in Identifiers in Web Pages</Name><Description>XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Command Injection</Name><Description>An adversary looking to execute a command of their choosing, injects new items into an existing command thus modifying interpretation away from what was intended. Commands in this context are often standalone strings that are interpreted by a downstream component and cause specific responses. This type of attack is possible when untrusted values are used to build these command strings. Weaknesses in input validation or command construction can enable the attack and lead to successful exploitation.</Description><Mitigations><Mitigation>All user-controllable input should be validated and filtered for potentially unwanted characters. Using an allowlist for input is desired, but if use of a denylist approach is necessary, then focusing on command related terms and delimiters is necessary.</Mitigation><Mitigation>Input should be encoded prior to use in commands to make sure command related characters are not treated as part of the command. For example, quotation characters may need to be encoded so that the application does not treat the quotation as a delimiter.</Mitigation><Mitigation>Input should be parameterized, or restricted to data sections of a command, thus removing the chance that the input will be treated as part of the command itself.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Linux Terminal Injection</Name><Description>This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.004</Entry_ID><Entry_Name>Endpoint Denial of Service: Application or System Exploitation</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Forced Deadlock</Name><Description>The adversary triggers and exploits a deadlock condition in the target software to cause a denial of service. A deadlock can occur when two or more competing actions are waiting for each other to finish, and thus neither ever does. Deadlock conditions can be difficult to detect.</Description><Mitigations><Mitigation>Use known algorithm to avoid deadlock condition (for instance non-blocking synchronization algorithms).</Mitigation><Mitigation>For competing actions, use well-known libraries which implement synchronization.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>412</CWE_ID><Name>Unrestricted Externally Accessible Lock</Name><Description>Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.</Description></Weakness><Weakness><CWE_ID>567</CWE_ID><Name>Unsynchronized Access to Shared Data in a Multithreaded Context</Name><Description>The product does not properly synchronize shared data, such as static variables across threads, which can lead to undefined behavior and unpredictable data changes.</Description></Weakness><Weakness><CWE_ID>662</CWE_ID><Name>Improper Synchronization</Name><Description>Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice</Description></Weakness><Weakness><CWE_ID>667</CWE_ID><Name>Improper Locking</Name><Description>Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.</Description></Weakness><Weakness><CWE_ID>833</CWE_ID><Name>Deadlock</Name><Description>Chain: array index error (CWE-129) leads to deadlock (CWE-833)</Description></Weakness><Weakness><CWE_ID>1322</CWE_ID><Name>Use of Blocking Code in Single-threaded, Non-blocking Context</Name><Description>The product uses a non-blocking model that relies on a single threaded process
			for features such as scalability, but it contains code that can block when it is invoked.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>23</Entry_ID><Entry_Name>XML Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>XML Injection</Name><Description>An attacker utilizes crafted XML user-controllable input to probe, attack, and inject data into the XML database, using techniques similar to SQL injection. The user-controllable input can allow for unauthorized viewing of data, bypassing authentication or the front-end application for direct XML database access, and possibly altering database information.</Description><Mitigations><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XML data or a query.</Mitigation><Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>91</CWE_ID><Name>XML Injection (aka Blind XPath Injection)</Name><Description>The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1055</Entry_ID><Entry_Name>Process Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Local Code Inclusion</Name><Description>The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</Description><Mitigations><Mitigation>Implementation: Avoid passing user input to filesystem or framework API. If necessary to do so, implement a specific, allowlist approach.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>PHP Local File Inclusion</Name><Description>The attacker loads and executes an arbitrary local PHP file on a target machine. The attacker could use this to try to load old versions of PHP files that have known vulnerabilities, to load PHP files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>05</Entry_ID><Entry_Name>Remote File Inclusion</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Remote Code Inclusion</Name><Description>The attacker forces an application to load arbitrary code files from a remote location. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load malicious files that the attacker placed on the remote machine, or to otherwise change the functionality of the targeted application in unexpected ways.</Description><Mitigations><Mitigation>Minimize attacks by input validation and sanitization of any user data that will be used by the target application to locate a remote file to be included.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: DTD Injection in a SOAP Message</Name><Description>This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the pattern CAPEC-228 : DTD Injection going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>35</Entry_ID><Entry_Name>SOAP Array Abuse</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>SOAP Array Overflow</Name><Description>An attacker sends a SOAP request with an array whose actual length exceeds the length indicated in the request. If the server processing the transmission naively trusts the specified size, then an attacker can intentionally understate the size of the array, possibly resulting in a buffer overflow if the server attempts to read the entire data set into the memory it allocated for a smaller array.</Description><Mitigations><Mitigation>If the server either verifies the correctness of the stated array size or if the server stops processing an array once the stated number of elements have been read, regardless of the actual array size, then this attack will fail. The former detects the malformed SOAP message while the latter ensures that the server does not attempt to load more data than was allocated for.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>805</CWE_ID><Name>Buffer Access with Incorrect Length Value</Name><Description>Language interpreter API function doesn't validate length argument, leading to information exposure</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Abuse of Transaction Data Structure</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Dynamic Update</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-65 : Sniff Application Code". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Patching</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-65 : Sniff Application Code". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Leveraging Race Conditions</Name><Description>The adversary targets a race condition occurring when multiple processes access and manipulate the same resource concurrently, and the outcome of the execution depends on the particular order in which the access takes place. The adversary can leverage a race condition by "running the race", modifying the resource and modifying the normal execution flow. For instance, a race condition can occur while accessing a file: the adversary can trick the system by replacing the original file with their version and cause the system to read the malicious file.</Description><Mitigations><Mitigation>Use safe libraries to access resources such as files.</Mitigation><Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</Mitigation><Mitigation>Use synchronization to control the flow of execution.</Mitigation><Mitigation>Use static analysis tools to find race conditions.</Mitigation><Mitigation>Pay attention to concurrency problems related to the access of resources.</Mitigation></Mitigations><Examples><Example><Reference>The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an attacker can replace the file referenced by the name (see [REF-107]).</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>368</CWE_ID><Name>Context Switching Race Condition</Name><Description>Web browser fills in address bar of clicked-on link before page has been loaded, and doesn't update afterward.</Description></Weakness><Weakness><CWE_ID>363</CWE_ID><Name>Race Condition Enabling Link Following</Name><Description>The product checks the status of a file or directory before accessing it, which produces a race condition in which the file can be replaced with a link before the access is performed, causing the product to access the wrong file.</Description></Weakness><Weakness><CWE_ID>366</CWE_ID><Name>Race Condition within a Thread</Name><Description>Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).</Description></Weakness><Weakness><CWE_ID>370</CWE_ID><Name>Missing Check for Certificate Revocation after Initial Check</Name><Description>The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.</Description></Weakness><Weakness><CWE_ID>362</CWE_ID><Name>Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')</Name><Description>Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).</Description></Weakness><Weakness><CWE_ID>662</CWE_ID><Name>Improper Synchronization</Name><Description>Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice</Description></Weakness><Weakness><CWE_ID>689</CWE_ID><Name>Permission Race Condition During Resource Copy</Name><Description>Database product creates files world-writable before initializing the setuid bits, leading to modification of executables.</Description></Weakness><Weakness><CWE_ID>667</CWE_ID><Name>Improper Locking</Name><Description>Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.</Description></Weakness><Weakness><CWE_ID>665</CWE_ID><Name>Improper Initialization</Name><Description>chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference</Description></Weakness><Weakness><CWE_ID>1223</CWE_ID><Name>Race Condition for Write-Once Attributes</Name><Description>A write-once register in hardware design is programmable by an untrusted software component earlier than the trusted software component, resulting in a race condition issue.</Description></Weakness><Weakness><CWE_ID>1254</CWE_ID><Name>Incorrect Comparison Logic Granularity</Name><Description>Password-checking function in router terminates validation of a password entry when it encounters the first incorrect character, which allows remote attackers to obtain passwords via a brute-force attack that relies on timing differences in responses to incorrect password guesses, aka a timing side-channel attack.</Description></Weakness><Weakness><CWE_ID>1298</CWE_ID><Name>Hardware Logic Contains Race Conditions</Name><Description>A race condition in the hardware logic results in undermining security guarantees of the system.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Passively Sniffing and Capturing Application Code Bound for an Authorized Client During Initial Distribution</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-65 : Sniff Application Code". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Fuzzing for garnering other adjacent user/sensitive data</Name><Description>An adversary who is authorized to send queries to a target sends variants of expected queries in the hope that these modified queries might return information (directly or indirectly through error logs) beyond what the expected set of queries should provide.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>A client that queries an employee database might have templates such that the user only supplies the target's name and the template dictates the fields to be returned (location, position in the company, phone number, etc.). If the server does not verify that the query matches one of the expected templates, an attacker who is allowed to send normal queries could modify their query to try to return additional information. For this example, additional information might include social security numbers or salaries.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Force Use of Corrupted Files</Name><Description>This describes an attack where an application is forced to use a file that an attacker has corrupted. The result is often a denial of service caused by the application being unable to process the corrupted file, but other results, including the disabling of filters or access controls (if the application fails in an unsafe way rather than failing by locking down) or buffer overflows are possible.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Environment Variable Manipulation</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Global variable manipulation</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Manipulate Canonicalization</Name><Description>This attack pattern has been deprecated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027</Entry_ID><Entry_Name>Obfuscated Files or Information</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Leverage Alternate Encoding</Name><Description>An adversary leverages the possibility to encode potentially harmful input or content used by applications such that the applications are ineffective at validating this encoding standard.</Description><Mitigations><Mitigation>Assume all input might use an improper representation. Use canonicalized data inside the application; all data must be converted into the representation used inside the application (UTF-8, UTF-16, etc.)</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>180</CWE_ID><Name>Incorrect Behavior Order: Validate Before Canonicalize</Name><Description>Product checks URI for "&lt;" and other literal characters, but does it before hex decoding the URI, so "%3E" and other sequences are allowed.</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>692</CWE_ID><Name>Incomplete Denylist to Cross-Site Scripting</Name><Description>Denylist only checks "javascript:" tag</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1070</Entry_ID><Entry_Name>Indicator Removal on Host</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.002</Entry_ID><Entry_Name>Impair Defenses: Disable Windows Event Logging</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.003</Entry_ID><Entry_Name>Impair Defenses: Impair Command History Logging</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.008</Entry_ID><Entry_Name>Impair Defenses: Disable Cloud Logs</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Audit Log Manipulation</Name><Description>The attacker injects, manipulates, deletes, or forges malicious log entries into the log file, in an attempt to mislead an audit of the log file or cover tracks of an attack. Due to either insufficient access controls of the log files or the logging mechanism, the attacker is able to perform such actions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>117</CWE_ID><Name>Improper Output Neutralization for Logs</Name><Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Registry Manipulation</Name><Description>This pattern has been deprecated as it was determined to be a duplicate of another pattern. Please refer to the pattern CAPEC-203 : Manipulate Application Registry Values going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Leveraging Race Conditions via Symbolic Links</Name><Description>This attack leverages the use of symbolic links (Symlinks) in order to write to sensitive files. An attacker can create a Symlink link to a target file not otherwise accessible to them. When the privileged program tries to create a temporary file with the same name as the Symlink link, it will actually write to the target file pointed to by the attackers' Symlink link. If the attacker can insert malicious content in the temporary file they will be writing to the sensitive file by using the Symlink. The race occurs because the system checks if the temporary file exists, then creates the file. The attacker would typically create the Symlink during the interval between the check and the creation of the temporary file.</Description><Mitigations><Mitigation>Use safe libraries when creating temporary files. For instance the standard library function mkstemp can be used to safely create temporary files. For shell scripts, the system utility mktemp does the same thing.</Mitigation><Mitigation>Access to the directories should be restricted as to prevent attackers from manipulating the files. Denying access to a file can prevent an attacker from replacing that file with a link to a sensitive file.</Mitigation><Mitigation>Follow the principle of least privilege when assigning access rights to files.</Mitigation><Mitigation>Ensure good compartmentalization in the system to provide protected areas that can be trusted.</Mitigation></Mitigations><Examples><Example><Reference>In this naive example, the Unix program foo is setuid. Its function is to retrieve information for the accounts specified by the user. For "efficiency," it sorts the requested accounts into a temporary file (/tmp/foo naturally) before making the queries. The directory /tmp is world-writable. The malicious user creates a symbolic link to the file /.rhosts named /tmp/foo. Then, they invokes foo with "user" as the requested account. The program creates the (temporary) file /tmp/foo (really creating /.rhosts) and puts the requested account (e.g. "user password")) in it. It removes the temporary file (merely removing the symbolic link). Now the /.rhosts contains + +, which is the incantation necessary to allow anyone to use rlogin to log into the computer as the superuser. [REF-115]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>367</CWE_ID><Name>Time-of-check Time-of-use (TOCTOU) Race Condition</Name><Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description></Weakness><Weakness><CWE_ID>61</CWE_ID><Name>UNIX Symbolic Link (Symlink) Following</Name><Description>"Zip Slip" vulnerability in Go-based Open Container Initiative (OCI) registries product allows writing arbitrary files outside intended directory via symbolic links or hard links in a gzipped tarball.</Description></Weakness><Weakness><CWE_ID>662</CWE_ID><Name>Improper Synchronization</Name><Description>Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice</Description></Weakness><Weakness><CWE_ID>689</CWE_ID><Name>Permission Race Condition During Resource Copy</Name><Description>Database product creates files world-writable before initializing the setuid bits, leading to modification of executables.</Description></Weakness><Weakness><CWE_ID>667</CWE_ID><Name>Improper Locking</Name><Description>Product does not check if it can write to a log file, allowing attackers to avoid logging by accessing the file using an exclusive lock. Overlaps unchecked error condition. This is not quite CWE-412, but close.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1547.001</Entry_ID><Entry_Name>Boot or Logon Autostart Execution: Registry Run Keys / Start Folder</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1547.014</Entry_ID><Entry_Name>Boot or Logon Autostart Execution: Active</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Modification of Registry Run Keys</Name><Description>An adversary adds a new entry to the "run keys" in the Windows registry so that an application of their choosing is executed when a user logs in. In this way, the adversary can get their executable to operate and run on the target system with the authorized user's level of permissions. This attack is a good way for an adversary to run persistent spyware on a user's machine, such as a keylogger.</Description><Mitigations><Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Schema Poisoning</Name><Description>An adversary corrupts or modifies the content of a schema for the purpose of undermining the security of the target. Schemas provide the structure and content definitions for resources used by an application. By replacing or modifying a schema, the adversary can affect how the application handles or interprets a resource, often leading to possible denial of service, entering into an unexpected state, or recording incomplete data.</Description><Mitigations><Mitigation>Design: Protect the schema against unauthorized modification.</Mitigation><Mitigation>Implementation: For applications that use a known schema, use a local copy or a known good repository instead of the schema reference supplied in the schema document.</Mitigation><Mitigation>Implementation: For applications that leverage remote schemas, use the HTTPS protocol to prevent modification of traffic in transit and to avoid unauthorized modification.</Mitigation></Mitigations><Examples><Example><Reference>In a JSON Schema Poisoning Attack, an adervary modifies the JSON schema to cause a Denial of Service (DOS) or to submit malicious input: If the 'name' attribute is required in all submitted documents and this field is removed by the adversary, the application may enter an unexpected state or record incomplete data. Additionally, if this data is needed to perform additional functions, a Denial of Service (DOS) may occur.</Reference><Description /></Example><Example><Reference>In a Database Schema Poisoning Attack, an adversary alters the database schema being used to modify the database in some way. This can result in loss of data, DOS, or malicious input being submitted. Assuming there is a column named "name", an adversary could make the following schema change: The "Name" field of the "Conteacts" table now allows the storing of names up to 65353 characters in length. This could allow the adversary to store excess data within the database to consume system resource or to execute a DOS.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Protocol Manipulation</Name><Description>An adversary subverts a communications protocol to perform an attack. This type of attack can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>27</Entry_ID><Entry_Name>HTTP Response Smuggling</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>HTTP Response Smuggling</Name><Description>
            </Description><Mitigations><Mitigation>Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.</Mitigation><Mitigation>Configuration: front-end HTTP agents notice ambiguous requests.</Mitigation><Mitigation>Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.</Mitigation><Mitigation>Configuration: Disable reuse of back-end connections.</Mitigation><Mitigation>Configuration: Use HTTP/2 for back-end connections.</Mitigation><Mitigation>Configuration: Use the same web server software for front-end and back-end server.</Mitigation><Mitigation>Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.</Mitigation><Mitigation>Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.</Mitigation><Mitigation>Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.</Mitigation><Mitigation>Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:</Mitigation><Mitigation>Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)</Mitigation><Mitigation>Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.</Mitigation><Mitigation>Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.</Mitigation></Mitigations><Examples><Example><Reference>When using Undertow, a Java-based web server in Red Hat's Jboss Enterprise Application Platform version 7.0, the code responsible for parsing HTTP requests permitted invalid characters, that could allow the injection of data into HTTP responses from Undertow to clients when used in tandem with a proxy; allowing for web-cache poisoning, XSS, and confidentiality violation of sensitive information from other HTTP requests sent to Undertow. See also: CVE-2017-2666</Reference><Description /></Example><Example><Reference>Mozilla Firefox and Thunderbird before 1.5.04, with various proxy servers, interpreted HTTP responses differently if HTTP response headers included a space between the header name and colon or if HTTP 1.1 headers were sent through a proxy configured with HTTP 1.0, allowing for HTTP Smuggling vulnerability. See also: CVE-2006-2786</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>436</CWE_ID><Name>Interpretation Conflict</Name><Description>Interpretation conflict (non-standard behavior) enables XSS because browser ignores invalid characters in the middle of tags.</Description></Weakness><Weakness><CWE_ID>444</CWE_ID><Name>Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')</Name><Description>HTTP server allows request smuggling with both a "Transfer-Encoding: chunked" header and a Content-Length header</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>HTTP Verb Tampering</Name><Description>An attacker modifies the HTTP Verb (e.g. GET, PUT, TRACE, etc.) in order to bypass access restrictions. Some web environments allow administrators to restrict access based on the HTTP Verb used with requests. However, attackers can often provide a different HTTP Verb, or even provide a random string as a verb in order to bypass these protections. This allows the attacker to access data that should otherwise be protected.</Description><Mitigations><Mitigation>Design: Ensure that only legitimate HTTP verbs are allowed.</Mitigation><Mitigation>Design: Do not use HTTP verbs as factors in access decisions.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DNS Rebinding</Name><Description>An adversary serves content whose IP address is resolved by a DNS server that the adversary controls. After initial contact by a web browser (or similar client), the adversary changes the IP address to which its name resolves, to an address within the target organization that is not publicly accessible. This allows the web browser to examine this internal address on behalf of the adversary.</Description><Mitigations><Mitigation>Design: IP Pinning causes browsers to record the IP address to which a given name resolves and continue using this address regardless of the TTL set in the DNS response. Unfortunately, this is incompatible with the design of some legitimate sites.</Mitigation><Mitigation>Implementation: Reject HTTP request with a malicious Host header.</Mitigation><Mitigation>Implementation: Employ DNS resolvers that prevent external names from resolving to internal addresses.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>350</CWE_ID><Name>Reliance on Reverse DNS Resolution for a Security-Critical Action</Name><Description>Product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Inter-component Protocol Manipulation</Name><Description>Inter-component protocols are used to communicate between different software and hardware modules within a single computer. Common examples are: interrupt signals and data pipes. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Data Interchange Protocol Manipulation</Name><Description>Data Interchange Protocols are used to transmit structured data between entities. These protocols are often specific to a particular domain (B2B: purchase orders, invoices, transport logistics and waybills, medical records). They are often, but not always, XML-based. Subverting the protocol can allow an adversary to impersonate others, discover sensitive information, control the outcome of a session, or perform other attacks. This type of attack targets invalid assumptions that may be inherent in implementers of the protocol, incorrect implementations of the protocol, or vulnerabilities in the protocol itself.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Web Services Protocol Manipulation</Name><Description>An adversary manipulates a web service related protocol to cause a web application or service to react differently than intended. This can either be performed through the manipulation of call parameters to include unexpected values, or by changing the called function to one that should normally be restricted or limited. By leveraging this pattern of attack, the adversary is able to gain access to data or resources normally restricted, or to cause the application or service to crash.</Description><Mitigations><Mitigation>Design: Range, size and value and consistency verification for any arguments supplied to applications and services from external sources and devise appropriate error response.</Mitigation><Mitigation>Design: Ensure that function calls that should not be called by an unprivileged user are not accessible to them.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>SOAP Manipulation</Name><Description>Simple Object Access Protocol (SOAP) is used as a communication protocol between a client and server to invoke web services on the server. It is an XML-based protocol, and therefore suffers from many of the same shortcomings as other XML-based protocols. Adversaries can make use of these shortcomings and manipulate the content of SOAP paramters, leading to undesirable behavior on the server and allowing the adversary to carry out a number of further attacks.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Fuzzing</Name><Description>In this attack pattern, the adversary leverages fuzzing to try to identify weaknesses in the system. Fuzzing is a software security and functionality testing method that feeds randomly constructed input to the system and looks for an indication that a failure in response to that input has occurred. Fuzzing treats the system as a black box and is totally free from any preconceptions or assumptions about the system. Fuzzing can help an attacker discover certain assumptions made about user input in the system. Fuzzing gives an attacker a quick way of potentially uncovering some of these assumptions despite not necessarily knowing anything about the internals of the system. These assumptions can then be turned against the system by specially crafting user input that may allow an attacker to achieve their goals.</Description><Mitigations><Mitigation>Test to ensure that the software behaves as per specification and that there are no unintended side effects. Ensure that no assumptions about the validity of data are made.</Mitigation><Mitigation>Use fuzz testing during the software QA process to uncover any surprises, uncover any assumptions or unexpected behavior.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: SOAP Parameter Tampering</Name><Description>This attack pattern has been deprecated as its contents have been included in CAPEC-279 : SOAP Manipulation. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Echo Request Ping</Name><Description>An adversary sends out an ICMP Type 8 Echo Request, commonly known as a 'Ping', in order to determine if a target system is responsive. If the request is not blocked by a firewall or ACL, the target host will respond with an ICMP Type 0 Echo Reply datagram. This type of exchange is usually referred to as a 'Ping' due to the Ping utility present in almost all operating systems. Ping, as commonly implemented, allows a user to test for alive hosts, measure round-trip time, and measure the percentage of packet loss.</Description><Mitigations><Mitigation>Consider configuring firewall rules to block ICMP Echo requests and prevent replies. If not practical, monitor and consider action when a system has fast and a repeated pattern of requests that move incrementally through port numbers.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP SYN Scan</Name><Description>An adversary uses a SYN scan to determine the status of ports on the remote target. SYN scanning is the most common type of port scanning that is used because of its many advantages and few drawbacks. As a result, novice attackers tend to overly rely on the SYN scan while performing system reconnaissance. As a scanning method, the primary advantages of SYN scanning are its universality and speed.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: ICMP Echo Request Ping</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-285". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Infrastructure-based footprinting</Name><Description>This attack pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the meta level pattern CAPEC-169 : going forward, or to any of its children patterns.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Leveraging Time-of-Check and Time-of-Use (TOCTOU) Race Conditions</Name><Description>This attack targets a race condition occurring between the time of check (state) for a resource and the time of use of a resource. A typical example is file access. The adversary can leverage a file access race condition by "running the race", meaning that they would modify the resource between the first time the target program accesses the file and the time the target program uses the file. During that period of time, the adversary could replace or modify the file, causing the application to behave unexpectedly.</Description><Mitigations><Mitigation>Use safe libraries to access resources such as files.</Mitigation><Mitigation>Be aware that improper use of access function calls such as chown(), tempfile(), chmod(), etc. can cause a race condition.</Mitigation><Mitigation>Use synchronization to control the flow of execution.</Mitigation><Mitigation>Use static analysis tools to find race conditions.</Mitigation><Mitigation>Pay attention to concurrency problems related to the access of resources.</Mitigation></Mitigations><Examples><Example><Reference>The following code illustrates a file that is accessed multiple times by name in a publicly accessible directory. A race condition exists between the accesses where an adversary can replace the file referenced by the name. [REF-107]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>367</CWE_ID><Name>Time-of-check Time-of-use (TOCTOU) Race Condition</Name><Description>chain: time-of-check time-of-use (TOCTOU) race condition in program allows bypass of protection mechanism that was designed to prevent symlink attacks.</Description></Weakness><Weakness><CWE_ID>368</CWE_ID><Name>Context Switching Race Condition</Name><Description>Web browser fills in address bar of clicked-on link before page has been loaded, and doesn't update afterward.</Description></Weakness><Weakness><CWE_ID>366</CWE_ID><Name>Race Condition within a Thread</Name><Description>Chain: two threads in a web browser use the same resource (CWE-366), but one of those threads can destroy the resource before the other has completed (CWE-416).</Description></Weakness><Weakness><CWE_ID>370</CWE_ID><Name>Missing Check for Certificate Revocation after Initial Check</Name><Description>The product does not check the revocation status of a certificate after its initial revocation check, which can cause the product to perform privileged actions even after the certificate is revoked at a later time.</Description></Weakness><Weakness><CWE_ID>362</CWE_ID><Name>Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')</Name><Description>Chain: Signal handler contains too much functionality (CWE-828), introducing a race condition (CWE-362) that leads to a double free (CWE-415).</Description></Weakness><Weakness><CWE_ID>662</CWE_ID><Name>Improper Synchronization</Name><Description>Attacker provides invalid address to a memory-reading function, causing a mutex to be unlocked twice</Description></Weakness><Weakness><CWE_ID>691</CWE_ID><Name>Insufficient Control Flow Management</Name><Description>Chain: off-by-one error (CWE-193) leads to infinite loop (CWE-835) using invalid hex-encoded characters.</Description></Weakness><Weakness><CWE_ID>663</CWE_ID><Name>Use of a Non-reentrant Function in a Concurrent Context</Name><Description>SIGCHLD signal to FTP server can cause crash under heavy load while executing non-reentrant functions like malloc/free.</Description></Weakness><Weakness><CWE_ID>665</CWE_ID><Name>Improper Initialization</Name><Description>chain: some unprivileged ioctls do not verify that a structure has been initialized before invocation, leading to NULL dereference</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Enumerate Mail Exchange (MX) Records</Name><Description>An adversary enumerates the MX records for a given via a DNS query. This type of information gathering returns the names of mail servers on the network. Mail servers are often not exposed to the Internet but are located within the DMZ of a network protected by a firewall. A side effect of this configuration is that enumerating the MX records for an organization my reveal the IP address of the firewall or possibly other internal systems. Attackers often resort to MX record enumeration when a DNS Zone Transfer is not possible.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DNS Zone Transfers</Name><Description>An attacker exploits a DNS misconfiguration that permits a ZONE transfer. Some external DNS servers will return a list of IP address and valid hostnames. Under certain conditions, it may even be possible to obtain Zone data about the organization's internal network. When successful the attacker learns valuable information about the topology of the target organization, including information about particular servers, their role within the IT structure, and possibly information about the operating systems running upon the network. This is configuration dependent behavior so it may also be required to search out multiple DNS servers while attempting to find one with ZONE transfers allowed.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1018</Entry_ID><Entry_Name>Remote System Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Host Discovery</Name><Description>An adversary sends a probe to an IP address to determine if the host is alive. Host discovery is one of the earliest phases of network reconnaissance. The adversary usually starts with a range of IP addresses belonging to a target network and uses various methods to determine if a host is present at that IP address. Host discovery is usually referred to as 'Ping' scanning using a sonar analogy. The goal is to send a packet through to the IP address and solicit a response from the host. As such, a 'ping' can be virtually any crafted packet whatsoever, provided the adversary can identify a functional host based on its response. An attack of this nature is usually carried out with a 'ping sweep,' where a particular kind of ping is sent to a range of IP addresses.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Traceroute Route Enumeration</Name><Description>An adversary uses a traceroute utility to map out the route which data flows through the network in route to a target destination. Tracerouting can allow the adversary to construct a working topology of systems and routers by listing the systems through which data passes through on their way to the targeted machine. This attack can return varied results depending upon the type of traceroute that is performed. Traceroute works by sending packets to a target while incrementing the Time-to-Live field in the packet header. As the packet traverses each hop along its way to the destination, its TTL expires generating an ICMP diagnostic message that identifies where the packet expired. Traditional techniques for tracerouting involved the use of ICMP and UDP, but as more firewalls began to filter ingress ICMP, methods of traceroute using TCP were developed.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Address Mask Request</Name><Description>An adversary sends an ICMP Type 17 Address Mask Request to gather information about a target's networking configuration. ICMP Address Mask Requests are defined by RFC-950, "Internet Standard Subnetting Procedure." An Address Mask Request is an ICMP type 17 message that triggers a remote system to respond with a list of its related subnets, as well as its default gateway and broadcast address via an ICMP type 18 Address Mask Reply datagram. Gathering this type of information helps the adversary plan router-based attacks as well as denial-of-service attacks against the broadcast address.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1124</Entry_ID><Entry_Name>System Time Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Timestamp Request</Name><Description>This pattern of attack leverages standard requests to learn the exact time associated with a target system. An adversary may be able to use the timestamp returned from the target to attack time-based security algorithms, such as random number generators, or time-based authentication mechanisms.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Information Request</Name><Description>An adversary sends an ICMP Information Request to a host to determine if it will respond to this deprecated mechanism. ICMP Information Requests are a deprecated message type. Information Requests were originally used for diskless machines to automatically obtain their network configuration, but this message type has been superseded by more robust protocol implementations like DHCP.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP ACK Ping</Name><Description>An adversary sends a TCP segment with the ACK flag set to a remote host for the purpose of determining if the host is alive. This is one of several TCP 'ping' types. The RFC 793 expected behavior for a service is to respond with a RST 'reset' packet to any unsolicited ACK segment that is not part of an existing connection. So by sending an ACK segment to a port, the adversary can identify that the host is alive by looking for a RST packet. Typically, a remote server will respond with a RST regardless of whether a port is open or closed. In this way, TCP ACK pings cannot discover the state of a remote port because the behavior is the same in either case. The firewall will look up the ACK packet in its state-table and discard the segment because it does not correspond to any active connection. A TCP ACK Ping can be used to discover if a host is alive via RST response packets sent from the host.</Description><Mitigations><Mitigation>Leverage stateful firewalls that allow for the rejection of a packet that is not part of an existing connection.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>UDP Ping</Name><Description>An adversary sends a UDP datagram to the remote host to determine if the host is alive. If a UDP datagram is sent to an open UDP port there is very often no response, so a typical strategy for using a UDP ping is to send the datagram to a random high port on the target. The goal is to solicit an 'ICMP port unreachable' message from the target, indicating that the host is alive. UDP pings are useful because some firewalls are not configured to block UDP datagrams sent to strange or typically unused ports, like ports in the 65K range. Additionally, while some firewalls may filter incoming ICMP, weaknesses in firewall rule-sets may allow certain types of ICMP (host unreachable, port unreachable) which are useful for UDP ping attempts.</Description><Mitigations><Mitigation>Configure your firewall to block egress ICMP messages.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP SYN Ping</Name><Description>An adversary uses TCP SYN packets as a means towards host discovery. Typical RFC 793 behavior specifies that when a TCP port is open, a host must respond to an incoming SYN "synchronize" packet by completing stage two of the 'three-way handshake' - by sending an SYN/ACK in response. When a port is closed, RFC 793 behavior is to respond with a RST "reset" packet. This behavior can be used to 'ping' a target to see if it is alive by sending a TCP SYN packet to a port and then looking for a RST or an ACK packet in response.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Leading 'Ghost' Character Sequences to Bypass Input Filters</Name><Description>Some APIs will strip certain leading characters from a string of parameters. An adversary can intentionally introduce leading "ghost" characters (extra characters that don't affect the validity of the request at the API layer) that enable the input to pass the filters and therefore process the adversary's input. This occurs when the targeted API will accept input data in several syntactic forms and interpret it in the equivalent semantic way, while the filter does not take into account the full spectrum of the syntactic forms acceptable to the targeted API.</Description><Mitigations><Mitigation>Use an allowlist rather than a denylist input validation.</Mitigation><Mitigation>Canonicalize all data prior to validation.</Mitigation><Mitigation>Take an iterative approach to input validation (defense in depth).</Mitigation></Mitigations><Examples><Example><Reference>Alternate Encoding with Ghost Characters in FTP and Web Servers Some web and FTP servers fail to detect prohibited upward directory traversals if the user-supplied pathname contains extra characters such as an extra leading dot. For example, a program that will disallow access to the pathname "../test.txt" may erroneously allow access to that file if the pathname is specified as ".../test.txt". This attack succeeds because 1) the input validation logic fails to detect the triple-dot as a directory traversal attempt (since it isn't dot-dot), 2) some part of the input processing decided to strip off the "extra" dot, leaving the dot-dot behind. Using the file system API as the target, the following strings are all equivalent to many programs: As you can see, there are many ways to make a semantically equivalent request. All these strings ultimately result in a request for the file ../test.txt.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>41</CWE_ID><Name>Improper Resolution of Path Equivalence</Name><Description>Multi-Factor Vulnerability. Product generates temporary filenames using long filenames, which become predictable in 8.3 format.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>179</CWE_ID><Name>Incorrect Behavior Order: Early Validation</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>180</CWE_ID><Name>Incorrect Behavior Order: Validate Before Canonicalize</Name><Description>Product checks URI for "&lt;" and other literal characters, but does it before hex decoding the URI, so "%3E" and other sequences are allowed.</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>183</CWE_ID><Name>Permissive List of Allowed Inputs</Name><Description>Default allowlist includes unsafe methods, allowing bypass of sandbox</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1055.003</Entry_ID><Entry_Name>Process Injection: Thread Execution Hijacking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Hijacking a Privileged Thread of Execution</Name><Description>An adversary hijacks a privileged thread of execution by injecting malicious code into a running process. By using a privleged thread to do their bidding, adversaries can evade process-based detection that would stop an attack that creates a new process. This can lead to an adversary gaining access to the process's memory and can also enable elevated privileges. The most common way to perform this attack is by suspending an existing thread and manipulating its memory.</Description><Mitigations><Mitigation>Application Architects must be careful to design callback, signal, and similar asynchronous constructs such that they shed excess privilege prior to handing control to user-written (thus untrusted) code.</Mitigation><Mitigation>Application Architects must be careful to design privileged code blocks such that upon return (successful, failed, or unpredicted) that privilege is shed prior to leaving the block/scope.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>270</CWE_ID><Name>Privilege Context Switching Error</Name><Description>Run callback in different security context after it has been changed from untrusted to trusted. * note that "context switch before actions are completed" is one type of problem that happens frequently, espec. in browsers.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1046</Entry_ID><Entry_Name>Network Service Scanning</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Port Scanning</Name><Description>An adversary uses a combination of techniques to determine the state of the ports on a remote target. Any service or application available for TCP or UDP networking will have a port open for communications over the network.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Connect Scan</Name><Description>An adversary uses full TCP connection attempts to determine if a port is open on the target system. The scanning process involves completing a 'three-way handshake' with a remote port, and reports the port as closed if the full handshake cannot be established. An advantage of TCP connect scanning is that it works against any TCP/IP stack.</Description><Mitigations><Mitigation>Employ a robust network defense posture that includes an IDS/IPS system.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP FIN Scan</Name><Description>An adversary uses a TCP FIN scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with the FIN bit set in the packet header. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow the adversary to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.</Description><Mitigations><Mitigation>FIN scans are detected via heuristic (non-signature) based algorithms, much in the same way as other scan types are detected. An IDS/IPS system with heuristic algorithms is required to detect them.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Xmas Scan</Name><Description>An adversary uses a TCP XMAS scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with all possible flags set in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.</Description><Mitigations><Mitigation>Employ a robust network defensive posture that includes a managed IDS/IPS.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Null Scan</Name><Description>An adversary uses a TCP NULL scan to determine if ports are closed on the target machine. This scan type is accomplished by sending TCP segments with no flags in the packet header, generating packets that are illegal based on RFC 793. The RFC 793 expected behavior is that any TCP segment with an out-of-state Flag sent to an open port is discarded, whereas segments with out-of-state flags sent to closed ports should be handled with a RST in response. This behavior should allow an attacker to scan for closed ports by sending certain types of rule-breaking packets (out of sync or disallowed by the TCB) and detect closed ports via RST packets.</Description><Mitigations><Mitigation>Employ a robust network defensive posture that includes a managed IDS/IPS.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP ACK Scan</Name><Description>An adversary uses TCP ACK segments to gather information about firewall or ACL configuration. The purpose of this type of scan is to discover information about filter configurations rather than port state. This type of scanning is rarely useful alone, but when combined with SYN scanning, gives a more complete picture of the type of firewall rules that are present.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Window Scan</Name><Description>An adversary engages in TCP Window scanning to analyze port status and operating system type. TCP Window scanning uses the ACK scanning method but examine the TCP Window Size field of response RST packets to make certain inferences. While TCP Window Scans are fast and relatively stealthy, they work against fewer TCP stack implementations than any other type of scan. Some operating systems return a positive TCP window size when a RST packet is sent from an open port, and a negative value when the RST originates from a closed port. TCP Window scanning is one of the most complex scan types, and its results are difficult to interpret. Window scanning alone rarely yields useful information, but when combined with other types of scanning is more useful. It is a generally more reliable means of making inference about operating system versions than port status.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP RPC Scan</Name><Description>An adversary scans for RPC services listing on a Unix/Linux host.</Description><Mitigations><Mitigation>Typically, an IDS/IPS system is very effective against this type of attack.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>UDP Scan</Name><Description>An adversary engages in UDP scanning to gather information about UDP port status on the target system. UDP scanning methods involve sending a UDP datagram to the target port and looking for evidence that the port is closed. Open UDP ports usually do not respond to UDP datagrams as there is no stateful mechanism within the protocol that requires building or establishing a session. Responses to UDP datagrams are therefore application specific and cannot be relied upon as a method of detecting an open port. UDP scanning relies heavily upon ICMP diagnostic messages in order to determine the status of a remote port.</Description><Mitigations><Mitigation>Firewalls or ACLs which block egress ICMP error types effectively prevent UDP scans from returning any useful information.</Mitigation><Mitigation>UDP scanning is complicated by rate limiting mechanisms governing ICMP error messages.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1016</Entry_ID><Entry_Name>System Network Configuration Discovery</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1049</Entry_ID><Entry_Name>System Network Connections Discovery</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1590</Entry_ID><Entry_Name>Gather Victim Network Information</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Network Topology Mapping</Name><Description>An adversary engages in scanning activities to map network nodes, hosts, devices, and routes. Adversaries usually perform this type of network reconnaissance during the early stages of attack against an external network. Many types of scanning utilities are typically employed, including ICMP tools, network mappers, port scanners, and route testing utilities such as traceroute.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1539</Entry_ID><Entry_Name>Steal Web Session Cookie</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Accessing/Intercepting/Modifying HTTP Cookies</Name><Description>This attack relies on the use of HTTP Cookies to store credentials, state information and other critical data on client systems. There are several different forms of this attack. The first form of this attack involves accessing HTTP Cookies to mine for potentially sensitive data contained therein. The second form involves intercepting this data as it is transmitted from client to server. This intercepted information is then used by the adversary to impersonate the remote user/session. The third form is when the cookie's content is modified by the adversary before it is sent back to the server. Here the adversary seeks to convince the target server to operate on this falsified information.</Description><Mitigations><Mitigation>Design: Use input validation for cookies</Mitigation><Mitigation>Design: Generate and validate MAC for cookies</Mitigation><Mitigation>Implementation: Use SSL/TLS to protect cookie in transit</Mitigation><Mitigation>Implementation: Ensure the web server implements all relevant security patches, many exploitable buffer overflows are fixed in patches issued for the software.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>565</CWE_ID><Name>Reliance on Cookies without Validation and Integrity Checking</Name><Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>113</CWE_ID><Name>Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')</Name><Description>e-commerce app allows HTTP response splitting using CRLF in object id parameters</Description></Weakness><Weakness><CWE_ID>539</CWE_ID><Name>Use of Persistent Cookies Containing Sensitive Information</Name><Description>The web application uses persistent cookies, but the cookies contain sensitive information.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>315</CWE_ID><Name>Cleartext Storage of Sensitive Information in a Cookie</Name><Description>Authentication information stored in cleartext in a cookie.</Description></Weakness><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>472</CWE_ID><Name>External Control of Assumed-Immutable Web Parameter</Name><Description>Modification of message number parameter allows attackers to read other people's messages.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>642</CWE_ID><Name>External Control of Critical State Data</Name><Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Scanning for Vulnerable Software</Name><Description>An attacker engages in scanning activity to find vulnerable software versions or types, such as operating system versions or network services. Vulnerable or exploitable network configurations, such as improperly firewalled systems, or misconfigured systems in the DMZ or external network, provide windows of opportunity for an attacker. Common types of vulnerable software include unpatched operating systems or services (e.g FTP, Telnet, SMTP, SNMP) running on open ports that the attacker has identified. Attackers usually begin probing for vulnerable software once the external network has been port scanned and potential targets have been revealed.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: OS Fingerprinting</Name><Description>This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level patterns CAPEC-312 : Active OS Fingerprinting or CAPEC-313 : Passive OS Fingerprinting going forward, or to any of the detailed patterns that are children of them.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1082</Entry_ID><Entry_Name>System Information Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Active OS Fingerprinting</Name><Description>An adversary engages in activity to detect the operating system or firmware version of a remote target by interrogating a device, server, or platform with a probe designed to solicit behavior that will reveal information about the operating systems or firmware in the environment. Operating System detection is possible because implementations of common protocols (Such as IP or TCP) differ in distinct ways. While the implementation differences are not sufficient to 'break' compatibility with the protocol the differences are detectable because the target will respond in unique ways to specific probing activity that breaks the semantic or logical rules of packet construction for a protocol. Different operating systems will have a unique response to the anomalous input, providing the basis to fingerprint the OS behavior. This type of OS fingerprinting can distinguish between operating system types and versions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1082</Entry_ID><Entry_Name>System Information Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Passive OS Fingerprinting</Name><Description>An adversary engages in activity to detect the version or type of OS software in a an environment by passively monitoring communication between devices, nodes, or applications. Passive techniques for operating system detection send no actual probes to a target, but monitor network or client-server communication between nodes in order to identify operating systems based on observed behavior as compared to a database of known signatures or values. While passive OS fingerprinting is not usually as reliable as active methods, it is generally better able to evade detection.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: IP Fingerprinting Probes</Name><Description>This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that children of CAPEC-312.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: TCP/IP Fingerprinting Probes</Name><Description>This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: ICMP Fingerprinting Probes</Name><Description>This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the standard level pattern CAPEC-312 : Active OS Fingerprinting going forward, or to any of the detailed patterns that are children of CAPEC-312.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>IP ID Sequencing Probe</Name><Description>This OS fingerprinting probe analyzes the IP 'ID' field sequence number generation algorithm of a remote host. Operating systems generate IP 'ID' numbers differently, allowing an attacker to identify the operating system of the host by examining how is assigns ID numbers when generating response packets. RFC 791 does not specify how ID numbers are chosen or their ranges, so ID sequence generation differs from implementation to implementation. There are two kinds of IP 'ID' sequence number analysis - IP 'ID' Sequencing: analyzing the IP 'ID' sequence generation algorithm for one protocol used by a host and Shared IP 'ID' Sequencing: analyzing the packet ordering via IP 'ID' values spanning multiple protocols, such as between ICMP and TCP.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>IP 'ID' Echoed Byte-Order Probe</Name><Description>This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'ID' value from the probe packet. An attacker sends a UDP datagram with an arbitrary IP 'ID' value to a closed port on the remote host to observe the manner in which this bit is echoed back in the ICMP error message. The identification field (ID) is typically utilized for reassembling a fragmented packet. Some operating systems or router firmware reverse the bit order of the ID field when echoing the IP Header portion of the original datagram within an ICMP error message.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>IP (DF) 'Don't Fragment Bit' Echoing Probe</Name><Description>This OS fingerprinting probe tests to determine if the remote host echoes back the IP 'DF' (Don't Fragment) bit in a response packet. An attacker sends a UDP datagram with the DF bit set to a closed port on the remote host to observe whether the 'DF' bit is set in the response packet. Some operating systems will echo the bit in the ICMP error message while others will zero out the bit in the response packet.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Through HTTP Query Strings</Name><Description>An adversary embeds malicious script code in the parameters of an HTTP query string and convinces a victim to submit the HTTP request that contains the query string to a vulnerable web application. The web application then procedes to use the values parameters without properly validation them first and generates the HTML code that will be executed by the victim's browser.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation><Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation><Mitigation>Implementation: Session tokens for specific host</Mitigation><Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation><Mitigation>Implementation: Privileges are constrained, if a script is loaded, ensure system runs in chroot jail or other limited authority mode</Mitigation></Mitigations><Examples><Example><Reference>Web applications that accept name value pairs in a HTTP Query string are inherently at risk to any value (or name for that matter) that an adversary would like to enter in the query string. This can be done manually via web browser or trivially scripted to post the query string to multiple sites. In the latter case, in the instance of many sites using similar infrastructure with predictable http queries being accepted and operated on (such as blogging software, Google applications, and so on), a single malicious payload can be scripted to target a wide variety of sites. Web 2.0 type sites like Technorati and del.icio.us rely on user generated content like tags to build http links that are displayed to other users. del.icio.us allows users to identify sites, tag them with metadata and provide URL, descriptions and more data. This data is then echoed back to any other web browser that is interested in the link. If the data is not validated by the del.icio.us site properly then an arbitrary code can be added into the standard http string sent to del.icio.us by the adversary, for example formatted as normal content with a URL and description and tagged as Java, and available to be clicked on (and executed by) any user browsing for Java content that clicks on this trojaned content.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>80</CWE_ID><Name>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</Name><Description>XSS not quoted in error page.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Timestamp Probe</Name><Description>This OS fingerprinting probe examines the remote server's implementation of TCP timestamps. Not all operating systems implement timestamps within the TCP header, but when timestamps are used then this provides the attacker with a means to guess the operating system of the target. The attacker begins by probing any active TCP service in order to get response which contains a TCP timestamp. Different Operating systems update the timestamp value using different intervals. This type of analysis is most accurate when multiple timestamp responses are received and then analyzed. TCP timestamps can be found in the TCP Options field of the TCP header.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Sequence Number Probe</Name><Description>This OS fingerprinting probe tests the target system's assignment of TCP sequence numbers. One common way to test TCP Sequence Number generation is to send a probe packet to an open port on the target and then compare the how the Sequence Number generated by the target relates to the Acknowledgement Number in the probe packet. Different operating systems assign Sequence Numbers differently, so a fingerprint of the operating system can be obtained by categorizing the relationship between the acknowledgement number and sequence number as follows: 1) the Sequence Number generated by the target is Zero, 2) the Sequence Number generated by the target is the same as the acknowledgement number in the probe, 3) the Sequence Number generated by the target is the acknowledgement number plus one, or 4) the Sequence Number is any other non-zero number.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP (ISN) Greatest Common Divisor Probe</Name><Description>This OS fingerprinting probe sends a number of TCP SYN packets to an open port of a remote machine. The Initial Sequence Number (ISN) in each of the SYN/ACK response packets is analyzed to determine the smallest number that the target host uses when incrementing sequence numbers. This information can be useful for identifying an operating system because particular operating systems and versions increment sequence numbers using different values. The result of the analysis is then compared against a database of OS behaviors to determine the OS type and/or version.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP (ISN) Counter Rate Probe</Name><Description>This OS detection probe measures the average rate of initial sequence number increments during a period of time. Sequence numbers are incremented using a time-based algorithm and are susceptible to a timing analysis that can determine the number of increments per unit time. The result of this analysis is then compared against a database of operating systems and versions to determine likely operation system matches.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP (ISN) Sequence Predictability Probe</Name><Description>This type of operating system probe attempts to determine an estimate for how predictable the sequence number generation algorithm is for a remote host. Statistical techniques, such as standard deviation, can be used to determine how predictable the sequence number generation is for a system. This result can then be compared to a database of operating system behaviors to determine a likely match for operating system and version.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Congestion Control Flag (ECN) Probe</Name><Description>This OS fingerprinting probe checks to see if the remote host supports explicit congestion notification (ECN) messaging. ECN messaging was designed to allow routers to notify a remote host when signal congestion problems are occurring. Explicit Congestion Notification messaging is defined by RFC 3168. Different operating systems and versions may or may not implement ECN notifications, or may respond uniquely to particular ECN flag types.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Initial Window Size Probe</Name><Description>This OS fingerprinting probe checks the initial TCP Window size. TCP stacks limit the range of sequence numbers allowable within a session to maintain the "connected" state within TCP protocol logic. The initial window size specifies a range of acceptable sequence numbers that will qualify as a response to an ACK packet within a session. Various operating systems use different Initial window sizes. The initial window size can be sampled by establishing an ordinary TCP connection.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Options Probe</Name><Description>This OS fingerprinting probe analyzes the type and order of any TCP header options present within a response segment. Most operating systems use unique ordering and different option sets when options are present. RFC 793 does not specify a required order when options are present, so different implementations use unique ways of ordering or structuring TCP options. TCP options can be generated by ordinary TCP traffic.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP 'RST' Flag Checksum Probe</Name><Description>This OS fingerprinting probe performs a checksum on any ASCII data contained within the data portion or a RST packet. Some operating systems will report a human-readable text message in the payload of a 'RST' (reset) packet when specific types of connection errors occur. RFC 1122 allows text payloads within reset packets but not all operating systems or routers implement this functionality.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Error Message Quoting Probe</Name><Description>An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the amount of data returned or "Quoted" from the originating request that generated the ICMP error message.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>26</Entry_ID><Entry_Name>HTTP Request Smuggling</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>HTTP Request Smuggling</Name><Description>
            </Description><Mitigations><Mitigation>Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.</Mitigation><Mitigation>Configuration: front-end HTTP agents notice ambiguous requests.</Mitigation><Mitigation>Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.</Mitigation><Mitigation>Configuration: Disable reuse of back-end connections.</Mitigation><Mitigation>Configuration: Use HTTP/2 for back-end connections.</Mitigation><Mitigation>Configuration: Use the same web server software for front-end and back-end server.</Mitigation><Mitigation>Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.</Mitigation><Mitigation>Configuration: Prioritize Transfer-Encoding header over Content-Length, whenever an HTTP message contains both.</Mitigation><Mitigation>Configuration: Disallow HTTP messages with both Transfer-Encoding and Content-Length or Double Content-Length Headers.</Mitigation><Mitigation>Configuration: Disallow Malformed/Invalid Transfer-Encoding Headers used in obfuscation, such as:</Mitigation><Mitigation>Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)</Mitigation><Mitigation>Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.</Mitigation><Mitigation>Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.</Mitigation></Mitigations><Examples><Example><Reference>When using Haproxy 1.5.3 version as front-end proxy server with with Node.js version 14.13.1 or 12.19.0 as the back-end web server it is possible to use two same header fields for example: two Transfer-Encoding, Transfer-Encoding: chunked and Transfer-Encoding: chunked-false, to bypass Haproxy /flag URI restriction and receive the Haproxy flag value, since Node.js identifies the first header but ignores the second header. See also: CVE-2020-8287</Reference><Description /></Example><Example><Reference>When using Sun Java System Web Proxy Server 3.x or 4.x in conjunction with Sun ONE/iPlanet 6.x, Sun Java System Application Server 7.x or 8.x, it is possible to bypass certain application firewall protections, hijack web sessions, perform Cross Site Scripting or poison the web proxy cache using HTTP Request Smuggling. Differences in the way HTTP requests are parsed by the Proxy Server and the Application Server enable malicious requests to be smuggled through to the Application Server, thereby exposing the Application Server to aforementioned attacks. See also: CVE-2006-6276</Reference><Description /></Example><Example><Reference>Apache server 2.0.45 and version before 1.3.34, when used as a proxy, easily lead to web cache poisoning and bypassing of application firewall restrictions because of non-standard HTTP behavior. Although the HTTP/1.1 specification clearly states that a request with both "Content-Length" and a "Transfer-Encoding: chunked" headers is invalid, vulnerable versions of Apache accept such requests and reassemble the ones with "Transfer-Encoding: chunked" header without replacing the existing "Content-Length" header or adding its own. This leads to HTTP Request Smuggling using a request with a chunked body and a header with "Content-Length: 0". See also: CVE-2005-2088</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>444</CWE_ID><Name>Inconsistent Interpretation of HTTP Requests ('HTTP Request/Response Smuggling')</Name><Description>HTTP server allows request smuggling with both a "Transfer-Encoding: chunked" header and a Content-Length header</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Error Message Echoing Integrity Probe</Name><Description>An adversary uses a technique to generate an ICMP Error message (Port Unreachable, Destination Unreachable, Redirect, Source Quench, Time Exceeded, Parameter Problem) from a target and then analyze the integrity of data returned or "Quoted" from the originating request that generated the error message.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP IP Total Length Field Probe</Name><Description>An adversary sends a UDP packet to a closed port on the target machine to solicit an IP Header's total length field value within the echoed 'Port Unreachable" error message. This type of behavior is useful for building a signature-base of operating system responses, particularly when error messages contain other types of information that is useful identifying specific operating system responses.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>204</CWE_ID><Name>Observable Response Discrepancy</Name><Description>FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP IP 'ID' Field Error Message Probe</Name><Description>An adversary sends a UDP datagram having an assigned value to its internet identification field (ID) to a closed port on a target to observe the manner in which this bit is echoed back in the ICMP error message. This allows the attacker to construct a fingerprint of specific OS behaviors.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>204</CWE_ID><Name>Observable Response Discrepancy</Name><Description>FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>25</Entry_ID><Entry_Name>HTTP Response Splitting</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>HTTP Response Splitting</Name><Description>
            </Description><Mitigations><Mitigation>Design: evaluate HTTP agents prior to deployment for parsing/interpretation discrepancies.</Mitigation><Mitigation>Configuration: front-end HTTP agents notice ambiguous requests.</Mitigation><Mitigation>Configuration: back-end HTTP agents reject ambiguous requests and close the network connection.</Mitigation><Mitigation>Configuration: Disable reuse of back-end connections.</Mitigation><Mitigation>Configuration: Use HTTP/2 for back-end connections.</Mitigation><Mitigation>Configuration: Use the same web server software for front-end and back-end server.</Mitigation><Mitigation>Implementation: Utilize a Web Application Firewall (WAF) that has built-in mitigation to detect abnormal requests/responses.</Mitigation><Mitigation>Configuration: Install latest vendor security patches available for both intermediary and back-end HTTP infrastructure (i.e. proxies and web servers)</Mitigation><Mitigation>Configuration: Ensure that HTTP infrastructure in the chain or network path utilize a strict uniform parsing process.</Mitigation><Mitigation>Implementation: Utilize intermediary HTTP infrastructure capable of filtering and/or sanitizing user-input.</Mitigation></Mitigations><Examples><Example><Reference>In the PHP 5 session extension mechanism, a user-supplied session ID is sent back to the user within the Set-Cookie HTTP header. Since the contents of the user-supplied session ID are not validated, it is possible to inject arbitrary HTTP headers into the response body. This immediately enables HTTP Response Splitting by simply terminating the HTTP response header from within the session ID used in the Set-Cookie directive. See also: CVE-2006-0207</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>113</CWE_ID><Name>Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')</Name><Description>e-commerce app allows HTTP response splitting using CRLF in object id parameters</Description></Weakness><Weakness><CWE_ID>138</CWE_ID><Name>Improper Neutralization of Special Elements</Name><Description>Multi-channel issue. Terminal escape sequences not filtered from log files.</Description></Weakness><Weakness><CWE_ID>436</CWE_ID><Name>Interpretation Conflict</Name><Description>Interpretation conflict (non-standard behavior) enables XSS because browser ignores invalid characters in the middle of tags.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.006</Entry_ID><Entry_Name>Obfuscated Files or Information: HTML Smuggling</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.009</Entry_ID><Entry_Name>Obfuscated Files or Information: Embedded Payloads</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1564.009</Entry_ID><Entry_Name>Hide Artifacts: Resource Forking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Leverage Executable Code in Non-Executable Files</Name><Description>An attack of this type exploits a system's trust in configuration and resource files. When the executable loads the resource (such as an image file or configuration file) the attacker has modified the file to either execute malicious code directly or manipulate the target process (e.g. application server) to execute based on the malicious configuration parameters. Since systems are increasingly interrelated mashing up resources from local and remote sources the possibility of this attack occurring is high.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation><Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation><Mitigation>Implementation: Implement host integrity monitoring to detect any unwanted altering of configuration files.</Mitigation><Mitigation>Implementation: Ensure that files that are not required to execute, such as configuration files, are not over-privileged, i.e. not allowed to execute.</Mitigation></Mitigations><Examples><Example><Reference>Another example targets clients reading pdf files. In this case the attacker simply appends javascript to the end of a legitimate url for a pdf (http://www.gnucitizen.org/blog/danger-danger-danger/) http://path/to/pdf/file.pdf#whatever_name_you_want=javascript:your_code_here The client assumes that they are reading a pdf, but the attacker has modified the resource and loaded executable javascript into the client's browser process.</Reference><Description /></Example><Example><Reference>The attack can also target server processes. The attacker edits the resource or configuration file, for example a web.xml file used to configure security permissions for a J2EE app server, adding role name "public" grants all users with the public role the ability to use the administration functionality. The server trusts its configuration file to be correct, but when they are manipulated, the attacker gains full control.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>94</CWE_ID><Name>Improper Control of Generation of Code ('Code Injection')</Name><Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description></Weakness><Weakness><CWE_ID>96</CWE_ID><Name>Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')</Name><Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description></Weakness><Weakness><CWE_ID>95</CWE_ID><Name>Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')</Name><Description>Chain: Execution after redirect triggers eval injection.</Description></Weakness><Weakness><CWE_ID>97</CWE_ID><Name>Improper Neutralization of Server-Side Includes (SSI) Within a Web Page</Name><Description>The product generates a web page, but does not neutralize or incorrectly neutralizes user-controllable input that could be interpreted as a server-side include (SSI) directive.</Description></Weakness><Weakness><CWE_ID>272</CWE_ID><Name>Least Privilege Violation</Name><Description>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</Description></Weakness><Weakness><CWE_ID>59</CWE_ID><Name>Improper Link Resolution Before File Access ('Link Following')</Name><Description>"Zip Slip" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.</Description></Weakness><Weakness><CWE_ID>282</CWE_ID><Name>Improper Ownership Management</Name><Description>Program runs setuid root but relies on a configuration file owned by a non-root user.</Description></Weakness><Weakness><CWE_ID>270</CWE_ID><Name>Privilege Context Switching Error</Name><Description>Run callback in different security context after it has been changed from untrusted to trusted. * note that "context switch before actions are completed" is one type of problem that happens frequently, espec. in browsers.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Unpublished Interfaces or Functionality</Name><Description>An adversary searches for and invokes interfaces or functionality that the target system designers did not intend to be publicly available. If interfaces fail to authenticate requests, the attacker may be able to invoke functionality they are not authorized for.</Description><Mitigations><Mitigation>Authenticating both services and their discovery, and protecting that authentication mechanism simply fixes the bulk of this problem. Protecting the authentication involves the standard means, including: 1) protecting the channel over which authentication occurs, 2) preventing the theft, forgery, or prediction of authentication credentials or the resultant tokens, or 3) subversion of password reset and the like.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>306</CWE_ID><Name>Missing Authentication for Critical Function</Name><Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness><Weakness><CWE_ID>695</CWE_ID><Name>Use of Low-Level Functionality</Name><Description>The product uses low-level functionality that is explicitly prohibited by the framework or specification under which the product is supposed to operate.</Description></Weakness><Weakness><CWE_ID>1242</CWE_ID><Name>Inclusion of Undocumented Features or Chicken Bits</Name><Description>The device includes chicken bits or undocumented features that can create entry points for unauthorized actors.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1005</Entry_ID><Entry_Name>Data from Local System</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.004</Entry_ID><Entry_Name>Unsecured Credentials: Private Keys</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Retrieve Embedded Sensitive Data</Name><Description>An attacker examines a target system to find sensitive data that has been embedded within it. This information can reveal confidential contents, such as account numbers or individual keys/credentials that can be used as an intermediate step in a larger attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>226</CWE_ID><Name>Sensitive Information in Resource Not Removed Before Reuse</Name><Description>Memory not properly cleared before reuse.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>525</CWE_ID><Name>Use of Web Browser Cache Containing Sensitive Information</Name><Description>The web application does not use an appropriate caching policy that specifies the extent to which each web page and associated form fields should be cached.</Description></Weakness><Weakness><CWE_ID>312</CWE_ID><Name>Cleartext Storage of Sensitive Information</Name><Description>Authentication information stored in cleartext in a cookie.</Description></Weakness><Weakness><CWE_ID>314</CWE_ID><Name>Cleartext Storage in the Registry</Name><Description>Cleartext passwords in registry key.</Description></Weakness><Weakness><CWE_ID>315</CWE_ID><Name>Cleartext Storage of Sensitive Information in a Cookie</Name><Description>Authentication information stored in cleartext in a cookie.</Description></Weakness><Weakness><CWE_ID>318</CWE_ID><Name>Cleartext Storage of Sensitive Information in Executable</Name><Description>administration passwords in cleartext in executable</Description></Weakness><Weakness><CWE_ID>1239</CWE_ID><Name>Improper Zeroization of Hardware Register</Name><Description>The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.</Description></Weakness><Weakness><CWE_ID>1258</CWE_ID><Name>Exposure of Sensitive System Information Due to Uncleared Debug Information</Name><Description>Rust library leaks Oauth client details in application debug logs</Description></Weakness><Weakness><CWE_ID>1266</CWE_ID><Name>Improper Scrubbing of Sensitive Data from Decommissioned Device</Name><Description>The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.</Description></Weakness><Weakness><CWE_ID>1272</CWE_ID><Name>Sensitive Information Uncleared Before Debug/Power State Transition</Name><Description>Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.</Description></Weakness><Weakness><CWE_ID>1278</CWE_ID><Name>Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques</Name><Description>Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.</Description></Weakness><Weakness><CWE_ID>1301</CWE_ID><Name>Insufficient or Incomplete Data Removal within Hardware Component</Name><Description>Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been "factory-default reset" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.</Description></Weakness><Weakness><CWE_ID>1330</CWE_ID><Name>Remanent Data Readable after Memory Erase</Name><Description>Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been "factory-default reset" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.007</Entry_ID><Entry_Name>Hijack Execution Flow: Path Interception by PATH Environment Variable</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.009</Entry_ID><Entry_Name>Hijack Execution Flow: Path Interception by Unquoted Path</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Leveraging/Manipulating Configuration File Search Paths</Name><Description>This pattern of attack sees an adversary load a malicious resource into a program's standard path so that when a known command is executed then the system instead executes the malicious component. The adversary can either modify the search path a program uses, like a PATH variable or classpath, or they can manipulate resources on the path to point to their malicious components. J2EE applications and other component based applications that are built from multiple binaries can have very long list of dependencies to execute. If one of these libraries and/or references is controllable by the attacker then application controls can be circumvented by the attacker.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Ensure that the program's compound parts, including all system dependencies, classpath, path, and so on, are secured to the same or higher level assurance as the program</Mitigation><Mitigation>Implementation: Host integrity monitoring</Mitigation></Mitigations><Examples><Example><Reference>Another method is to redirect commands by aliasing one legitimate command to another to create unexpected results. the Unix command "rm" could be aliased to "mv" and move all files the victim thinks they are deleting to a directory the attacker controls. In a Unix shell .profile setting In this case the attacker retains a copy of all the files the victim attempts to remove.</Reference><Description /></Example><Example><Reference>A standard UNIX path looks similar to this If the attacker modifies the path variable to point to a locale that includes malicious resources then the user unwittingly can execute commands on the attackers' behalf: This is a form of usurping control of the program and the attack can be done on the classpath, database resources, or any other resources built from compound parts. At runtime detection and blocking of this attack is nearly impossible, because the configuration allows execution.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>426</CWE_ID><Name>Untrusted Search Path</Name><Description>Server allows client to specify the search path, which can be modified to point to a program that the client has uploaded.</Description></Weakness><Weakness><CWE_ID>427</CWE_ID><Name>Uncontrolled Search Path Element</Name><Description>Product searches /tmp for modules before other paths.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1056.004</Entry_ID><Entry_Name>Input Capture: Credential API Hooking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Harvesting Information via API Event Monitoring</Name><Description>An adversary hosts an event within an application framework and then monitors the data exchanged during the course of the event for the purpose of harvesting any important data leaked during the transactions. One example could be harvesting lists of usernames or userIDs for the purpose of sending spam messages to those users. One example of this type of attack involves the adversary creating an event within the sub-application. Assume the adversary hosts a "virtual sale" of rare items. As other users enter the event, the attacker records via AiTM (CAPEC-94) proxy the user_ids and usernames of everyone who attends. The adversary would then be able to spam those users within the application using an automated script.</Description><Mitigations><Mitigation>Leverage encryption techniques during information transactions so as to protect them from attack patterns of this kind.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>319</CWE_ID><Name>Cleartext Transmission of Sensitive Information</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>419</CWE_ID><Name>Unprotected Primary Channel</Name><Description>The product uses a primary channel for administration or restricted functionality, but it does not properly protect the channel.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Application API Message Manipulation via Man-in-the-Middle</Name><Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack can allow the attacker to gain unauthorized privileges within the application, or conduct attacks such as phishing, deceptive strategies to spread malware, or traditional web-application attacks. The techniques require use of specialized software that allow the attacker to perform adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system. Despite the use of AiTH software, the attack is actually directed at the server, as the client is one node in a series of content brokers that pass information along to the application framework. Additionally, it is not true "Adversary-in-the-Middle" attack at the network layer, but an application-layer attack the root cause of which is the master applications trust in the integrity of code supplied by the client.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>471</CWE_ID><Name>Modification of Assumed-Immutable Data (MAID)</Name><Description>Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Transaction or Event Tampering via Application API Manipulation</Name><Description>An attacker hosts or joins an event or transaction within an application framework in order to change the content of messages or items that are being exchanged. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, substitute one item or another, spoof an existing item and conduct a false exchange, or otherwise change the amounts or identity of what is being exchanged. The techniques require use of specialized software that allow the attacker to man-in-the-middle communications between the web browser and the remote system in order to change the content of various application elements. Often, items exchanged in game can be monetized via sales for coin, virtual dollars, etc. The purpose of the attack is for the attack to scam the victim by trapping the data packets involved the exchange and altering the integrity of the transfer process.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>471</CWE_ID><Name>Modification of Assumed-Immutable Data (MAID)</Name><Description>Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Application API Navigation Remapping</Name><Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of links/buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains links/buttons that point to an attacker controlled destination. Some applications make navigation remapping more difficult to detect because the actual HREF values of images, profile elements, and links/buttons are masked. One example would be to place an image in a user's photo gallery that when clicked upon redirected the user to an off-site location. Also, traditional web vulnerabilities (such as CSRF) can be constructed with remapped buttons or links. In some cases navigation remapping can be used for Phishing attacks or even means to artificially boost the page view, user site reputation, or click-fraud.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>471</CWE_ID><Name>Modification of Assumed-Immutable Data (MAID)</Name><Description>Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Navigation Remapping To Propagate Malicious Content</Name><Description>An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>471</CWE_ID><Name>Modification of Assumed-Immutable Data (MAID)</Name><Description>Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Application API Button Hijacking</Name><Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the destination and/or content of buttons displayed to a user within API messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that looks authentic but contains buttons that point to an attacker controlled destination.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>An in-game event occurs and the attacker traps the result, which turns out to be a form that will be populated to their primary profile. The attacker, using a MITM proxy, observes the following data: By altering the destination of "Claim_Link" to point to the attackers' server an unwitting victim can be enticed to click the link. Another example would be for the attacker to rewrite the button destinations for an event so that clicking "Yes" or "No" causes the user to load the attackers' code.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>471</CWE_ID><Name>Modification of Assumed-Immutable Data (MAID)</Name><Description>Gain privileges by modifying assumed-immutable code addresses that are accessed by a driver.</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>602</CWE_ID><Name>Client-Side Enforcement of Server-Side Security</Name><Description>client allows server to modify client's configuration and overwrite arbitrary files.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Content Spoofing Via Application API Manipulation</Name><Description>An attacker manipulates either egress or ingress data from a client within an application framework in order to change the content of messages. Performing this attack allows the attacker to manipulate content in such a way as to produce messages or content that look authentic but may contain deceptive links, spam-like content, or links to the attackers' code. In general, content-spoofing within an application API can be employed to stage many different types of attacks varied based on the attackers' intent. The techniques require use of specialized software that allow the attacker to use adversary-in-the-middle (CAPEC-94) communications between the web browser and the remote system.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating Opaque Client-based Data Tokens</Name><Description>In circumstances where an application holds important data client-side in tokens (cookies, URLs, data files, and so forth) that data can be manipulated. If client or server-side application components reinterpret that data as authentication tokens or data (such as store item pricing or wallet information) then even opaquely manipulating that data may bear fruit for an Attacker. In this pattern an attacker undermines the assumption that client side tokens have been adequately protected from tampering through use of encryption or obfuscation.</Description><Mitigations><Mitigation>One solution to this problem is to protect encrypted data with a CRC of some sort. If knowing who last manipulated the data is important, then using a cryptographic "message authentication code" (or hMAC) is prescribed. However, this guidance is not a panacea. In particular, any value created by (and therefore encrypted by) the client, which itself is a "malicious" value, all the protective cryptography in the world can't make the value 'correct' again. Put simply, if the client has control over the whole process of generating and encoding the value, then simply protecting its integrity doesn't help.</Mitigation><Mitigation>Make sure to protect client side authentication tokens for confidentiality (encryption) and integrity (signed hash)</Mitigation><Mitigation>Make sure that all session tokens use a good source of randomness</Mitigation><Mitigation>Perform validation on the server side to make sure that client side data tokens are consistent with what is expected.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>472</CWE_ID><Name>External Control of Assumed-Immutable Web Parameter</Name><Description>Modification of message number parameter allows attackers to read other people's messages.</Description></Weakness><Weakness><CWE_ID>565</CWE_ID><Name>Reliance on Cookies without Validation and Integrity Checking</Name><Description>e-dating application allows admin privileges by setting the admin cookie to 1.</Description></Weakness><Weakness><CWE_ID>315</CWE_ID><Name>Cleartext Storage of Sensitive Information in a Cookie</Name><Description>Authentication information stored in cleartext in a cookie.</Description></Weakness><Weakness><CWE_ID>539</CWE_ID><Name>Use of Persistent Cookies Containing Sensitive Information</Name><Description>The web application uses persistent cookies, but the cookies contain sensitive information.</Description></Weakness><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>233</CWE_ID><Name>Improper Handling of Parameters</Name><Description>The product does not properly handle when the expected number of parameters, fields, or arguments is not provided in input, or if those parameters are undefined.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Bypassing Physical Security</Name><Description>Facilities often used layered models for physical security such as traditional locks, Electronic-based card entry systems, coupled with physical alarms. Hardware security mechanisms range from the use of computer case and cable locks as well as RFID tags for tracking computer assets. This layered approach makes it difficult for random physical security breaches to go unnoticed, but is less effective at stopping deliberate and carefully planned break-ins. Avoiding detection begins with evading building security and surveillance and methods for bypassing the electronic or physical locks which secure entry points.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Bypassing Physical Locks</Name><Description>An attacker uses techniques and methods to bypass physical security measures of a building or facility. Physical locks may range from traditional lock and key mechanisms, cable locks used to secure laptops or servers, locks on server cases, or other such devices. Techniques such as lock bumping, lock forcing via snap guns, or lock picking can be employed to bypass those locks and gain access to the facilities or devices they protect, although stealth, evidence of tampering, and the integrity of the lock following an attack, are considerations that may determine the method employed. Physical locks are limited by the complexity of the locking mechanism. While some locks may offer protections such as shock resistant foam to prevent bumping or lock forcing methods, many commonly employed locks offer no such countermeasures.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Lock Bumping</Name><Description>An attacker uses a bump key to force a lock on a building or facility and gain entry. Lock Bumping is the use of a special type of key that can be tapped or bumped to cause the pins within the lock to fall into temporary alignment, allowing the lock to be opened. Lock bumping allows an attacker to open a lock without having the correct key. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A bump key is a specially constructed key that exploits this design. When the bump key is struck or firmly tapped, its teeth transfer the force of the tap into the key pins, causing the lock to momentarily shift into proper alignment for the mechanism to be opened.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Lock Picking</Name><Description>An attacker uses lock picking tools and techniques to bypass the locks on a building or facility. Lock picking is the use of a special set of tools to manipulate the pins within a lock. Different sets of tools are required for each type of lock. Lock picking attacks have the advantage of being non-invasive in that if performed correctly the lock will not be damaged. A standard lock pin-and-tumbler lock is secured by a set of internal pins that prevent the tumbler device from turning. Spring loaded driver pins push down on the key pins preventing rotation so that the bolt remains in a locked position.. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. Most common locks, such as domestic locks in the US, can be picked using a standard 2 tools (i.e. a torsion wrench and a hook pick).</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using a Snap Gun Lock to Force a Lock</Name><Description>An attacker uses a Snap Gun, also known as a Pick Gun, to force the lock on a building or facility. A Pick Gun is a special type of lock picking instrument that works on similar principles as lock bumping. A snap gun is a hand-held device with an attached metal pick. The metal pick strikes the pins within the lock, transferring motion from the key pins to the driver pins and forcing the lock into momentary alignment. A standard lock is secured by a set of internal pins that prevent the device from turning. Spring loaded driver pins push down on the key pins. When the correct key is inserted, the ridges on the key push the key pins up and against the driver pins, causing correct alignment which allows the lock cylinder to rotate. A Snap Gun exploits this design by using a metal pin to strike all of the key pins at once, forcing the driver pins to shift into an unlocked position. Unlike bump keys or lock picks, a Snap Gun may damage the lock more easily, leaving evidence that the lock has been tampered with.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Bypassing Electronic Locks and Access Controls</Name><Description>An attacker exploits security assumptions to bypass electronic locks or other forms of access controls. Most attacks against electronic access controls follow similar methods but utilize different tools. Some electronic locks utilize magnetic strip cards, others employ RFID tags embedded within a card or badge, or may involve more sophisticated protections such as voice-print, thumb-print, or retinal biometrics. Magnetic Strip and RFID technologies are the most widespread because they are cost effective to deploy and more easily integrated with other electronic security measures. These technologies share common weaknesses that an attacker can exploit to gain access to a facility protected by the mechanisms via copying legitimate cards or badges, or generating new cards using reverse-engineered algorithms.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Bypassing Card or Badge-Based Systems</Name><Description>This attack pattern has been deprecated as it a generalization of CAPEC-397: Cloning Magnetic Strip Cards, CAPEC-398: Magnetic Strip Card Brute Force Attacks, CAPEC-399: Cloning RFID Cards or Chips and CAPEC-400: RFID Chip Deactivation or Destruction. Please refer to these CAPECs going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cloning Magnetic Strip Cards</Name><Description>An attacker duplicates the data on a Magnetic strip card (i.e. 'swipe card' or 'magstripe') to gain unauthorized access to a physical location or a person's private information. Magstripe cards encode data on a band of iron-based magnetic particles arrayed in a stripe along a rectangular card. Most magstripe card data formats conform to ISO standards 7810, 7811, 7813, 8583, and 4909. The primary advantage of magstripe technology is ease of encoding and portability, but this also renders magnetic strip cards susceptible to unauthorized duplication. If magstripe cards are used for access control, all an attacker need do is obtain a valid card long enough to make a copy of the card and then return the card to its location (i.e. a co-worker's desk). Magstripe reader/writers are widely available as well as software for analyzing data encoded on the cards. By swiping a valid card, it becomes trivial to make any number of duplicates that function as the original.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Magnetic Strip Card Brute Force Attacks</Name><Description>An adversary analyzes the data on two or more magnetic strip cards and is able to generate new cards containing valid sequences that allow unauthorized access and/or impersonation of individuals.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cloning RFID Cards or Chips</Name><Description>An attacker analyzes data returned by an RFID chip and uses this information to duplicate a RFID signal that responds identically to the target chip. In some cases RFID chips are used for building access control, employee identification, or as markers on products being delivered along a supply chain. Some organizations also embed RFID tags inside computer assets to trigger alarms if they are removed from particular rooms, zones, or buildings. Similar to Magnetic strip cards, RFID cards are susceptible to duplication (cloning) and reuse.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Alternative IP Address Encodings</Name><Description>This attack relies on the adversary using unexpected formats for representing IP addresses. Networked applications may expect network location information in a specific format, such as fully qualified domains names (FQDNs), URL, IP address, or IP Address ranges. If the location information is not validated against a variety of different possible encodings and formats, the adversary can use an alternate format to bypass application access control.</Description><Mitigations><Mitigation>Design: Default deny access control policies</Mitigation><Mitigation>Design: Input validation routines should check and enforce both input data types and content against a positive specification. In regards to IP addresses, this should include the authorized manner for the application to represent IP addresses and not accept user specified IP addresses and IP address formats (such as ranges)</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>291</CWE_ID><Name>Reliance on IP Address for Authentication</Name><Description>S-bus functionality in a home automation product performs access control using an IP allowlist, which can be bypassed by a forged IP address.</Description></Weakness><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating Writeable Terminal Devices</Name><Description>This attack exploits terminal devices that allow themselves to be written to by other users. The attacker sends command strings to the target terminal device hoping that the target user will hit enter and thereby execute the malicious command with their privileges. The attacker can send the results (such as copying /etc/passwd) to a known directory and collect once the attack has succeeded.</Description><Mitigations><Mitigation>Design: Ensure that terminals are only writeable by named owner user and/or administrator</Mitigation><Mitigation>Design: Enforce principle of least privilege</Mitigation></Mitigations><Examples><Example><Reference>"Any system that allows other peers to write directly to its terminal process is vulnerable to this type of attack. If the terminals are available through being over-privileged (i.e. world-writable) or the attacker is an administrator, then a series of commands in this format can be used to echo commands out to victim terminals. where XX is the tty number of the user under attack. This will paste the characters to another terminal (tty). Note this technique works only if the victim's tty is world writable (which it may not be). That is one reason why programs like write(1) and talk(1) in UNIX systems need to run setuid." [REF-1] If the victim continues to hit "enter" and execute the commands, there are an endless supply of vectors available to the attacker, copying files, open up network connections, ftp out to servers, and so on.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>RFID Chip Deactivation or Destruction</Name><Description>An attacker uses methods to deactivate a passive RFID tag for the purpose of rendering the tag, badge, card, or object containing the tag unresponsive. RFID tags are used primarily for access control, inventory, or anti-theft devices. The purpose of attacking the RFID chip is to disable or damage the chip without causing damage to the object housing it.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Physically Hacking Hardware</Name><Description>An adversary exploits a weakness in access control to gain access to currently installed hardware and precedes to implement changes or secretly replace a hardware component which undermines the system's integrity for the purpose of carrying out an attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1263</CWE_ID><Name>Improper Physical Access Control</Name><Description>The product is designed with access restricted to certain information, but it does not sufficiently protect against an unauthorized actor with physical access to these areas.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Bypassing ATA Password Security</Name><Description>An adversary exploits a weakness in ATA security on a drive to gain access to the information the drive contains without supplying the proper credentials. ATA Security is often employed to protect hard disk information from unauthorized access. The mechanism requires the user to type in a password before the BIOS is allowed access to drive contents. Some implementations of ATA security will accept the ATA command to update the password without the user having authenticated with the BIOS. This occurs because the security mechanism assumes the user has first authenticated via the BIOS prior to sending commands to the drive. Various methods exist for exploiting this flaw, the most common being installing the ATA protected drive into a system lacking ATA security features (a.k.a. hot swapping). Once the drive is installed into the new system the BIOS can be used to reset the drive password.</Description><Mitigations><Mitigation>Avoid using ATA password security when possible.</Mitigation><Mitigation>Use full disk encryption to protect the entire contents of the drive or sensitive partitions on the drive.</Mitigation><Mitigation>Leverage third-party utilities that interface with self-encrypting drives (SEDs) to provide authentication, while relying on the SED itself for data encryption.</Mitigation></Mitigations><Examples><Example><Reference>The A-FF Repair Station tool is a data recovery utility that can be used for ATA password removal (both High and Maximum level) and firmware area recovery. An adversary with access to this tool could reset the ATA password to bypass this security feature and unlock the hard drive. The adversary could then obtain any data contained within the drive. [REF-702]</Reference><Description /></Example><Example><Reference>An adversary gains physical access to the targeted hard drive and installs it into a system that does not support ATA security features. Once the drive is installed in the feature-lacking system, the adversary is able to reset the hard drive password via the BIOS. As a result, the adversary is able to bypass ATA password security and access content on the drive.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Social Information Gathering Attacks</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Social Information Gathering via Research</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Dumpster Diving</Name><Description>An adversary cases an establishment and searches through trash bins, dumpsters, or areas where company information may have been accidentally discarded for information items which may be useful to the dumpster diver. The devastating nature of the items and/or information found can be anything from medical records, resumes, personal photos and emails, bank statements, account details or information about software, tech support logs and so much more, including hardware devices. By collecting this information an adversary may be able to learn important facts about the person or organization that play a role in helping the adversary in their attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1589</Entry_ID><Entry_Name>Gather Victim Identity Information</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Pretexting</Name><Description>An adversary engages in pretexting behavior to solicit information from target persons, or manipulate the target into performing some action that serves the adversary's interests. During a pretexting attack, the adversary creates an invented scenario, assuming an identity or role to persuade a targeted victim to release information or perform some action. It is more than just creating a lie; in some cases it can be creating a whole new identity and then using that identity to manipulate the receipt of information.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Information Gathering from Traditional Sources</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Information Gathering from Non-Traditional Sources</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate attack pattern. Please refer to CAPEC-118 : Collect and Analyze Information.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Meta-characters in E-mail Headers to Inject Malicious Payloads</Name><Description>This type of attack involves an attacker leveraging meta-characters in email headers to inject improper behavior into email programs. Email software has become increasingly sophisticated and feature-rich. In addition, email applications are ubiquitous and connected directly to the Web making them ideal targets to launch and propagate attacks. As the user demand for new functionality in email applications grows, they become more like browsers with complex rendering and plug in routines. As more email functionality is included and abstracted from the user, this creates opportunities for attackers. Virtually all email applications do not list email header information by default, however the email header contains valuable attacker vectors for the attacker to exploit particularly if the behavior of the email client application is known. Meta-characters are hidden from the user, but can contain scripts, enumerations, probes, and other attacks against the user's system.</Description><Mitigations><Mitigation>Design: Perform validation on email header data</Mitigation><Mitigation>Implementation: Implement email filtering solutions on mail server or on MTA, relay server.</Mitigation><Mitigation>Implementation: Mail servers that perform strict validation may catch these attacks, because metacharacters are not allowed in many header variables such as dns names</Mitigation></Mitigations><Examples><Example><Reference>Meta-characters are among the most valuable tools attackers have to deceive users into taking some action on their behalf. E-mail is perhaps the most efficient and cost effective attack distribution tool available, this has led to the phishing pandemic. Meta-characters like \w \s \d ^ can allow the attacker to escape out of the expected behavior to execute additional commands. Escaping out the process (such as email client) lets the attacker run arbitrary code in the user's process.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>150</CWE_ID><Name>Improper Neutralization of Escape, Meta, or Control Sequences</Name><Description>MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files.</Description></Weakness><Weakness><CWE_ID>88</CWE_ID><Name>Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')</Name><Description>Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert "-o" and "-X" switches.</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Information Elicitation</Name><Description>An adversary engages an individual using any combination of social engineering methods for the purpose of extracting information. Accurate contextual and environmental queues, such as knowing important information about the target company or individual can greatly increase the success of the attack and the quality of information gathered. Authentic mimicry combined with detailed knowledge increases the success of elicitation attacks.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Pretexting</Name><Description>This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-407 : Social Information Gathering via Pretexting". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Pretexting via Customer Service</Name><Description>An adversary engages in pretexting behavior, assuming the role of someone who works for Customer Service, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. One example of a scenario such as this would be to call an individual, articulate your false affiliation with a credit card company, and then attempt to get the individual to verify their credit card number.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Pretexting via Tech Support</Name><Description>An adversary engages in pretexting behavior, assuming the role of a tech support worker, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. An adversary who uses social engineering to impersonate a tech support worker can have devastating effects on a network. This is an effective attack vector, because it can give an adversary physical access to network computers. It only takes a matter of seconds for someone to compromise a computer with physical access. One of the best technological tools at the disposal of a social engineer, posing as a technical support person, is a USB thumb drive. These are small, easy to conceal, and can be loaded with different payloads depending on what task needs to be done. However, this form of attack does not require physical access as it can also be effectively carried out via phone or email.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Pretexting via Delivery Person</Name><Description>An adversary engages in pretexting behavior, assuming the role of a delivery person, to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. Impersonating a delivery person is an effective attack and an easy attack since not much acting is involved. Usually the hardest part is looking the part and having all of the proper credentials, papers and "deliveries" in order to be able to pull it off.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Pretexting via Phone</Name><Description>An adversary engages in pretexting behavior, assuming some sort of trusted role, and contacting the targeted individual or organization via phone to solicit information from target persons, or manipulate the target into performing an action that serves the adversary's interests. This is the most common social engineering attack. Some of the most commonly effective approaches are to impersonate a fellow employee, impersonate a computer technician or to target help desk personnel.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulate Human Behavior</Name><Description>An adversary exploits inherent human psychological predisposition to influence a targeted individual or group to solicit information or manipulate the target into performing an action that serves the adversary's interests. Many interpersonal social engineering techniques do not involve outright deception, although they can; many are subtle ways of manipulating a target to remove barriers, make the target feel comfortable, and produce an exchange in which the target is either more likely to share information directly, or let key information slip out unintentionally. A skilled adversary uses these techniques when appropriate to produce the desired outcome. Manipulation techniques vary from the overt, such as pretending to be a supervisor to a help desk, to the subtle, such as making the target feel comfortable with the adversary's speech and thought patterns.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent successful social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception</Name><Description>The adversary uses social engineering to exploit the target's perception of the relationship between the adversary and themselves. This goal is to persuade the target to unknowingly perform an action or divulge information that is advantageous to the adversary.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception of Reciprocation</Name><Description>An adversary uses a social engineering techniques to produce a sense of obligation in the target to perform a certain action or concede some sensitive or key piece of information. Obligation has to do with actions one feels they need to take due to some sort of social, legal, or moral requirement, duty, contract, or promise. There are various techniques for fostering a sense of obligation to reciprocate or concede during ordinary modes of communication. One method is to compliment the target, and follow up the compliment with a question. If performed correctly the target may volunteer a key piece of information, sometimes involuntarily.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Target Influence via Perception of Concession</Name><Description>This attack pattern has been deprecated as it was deemed not to be a legitimate pattern.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>MIME Conversion</Name><Description>An attacker exploits a weakness in the MIME conversion routine to cause a buffer overflow and gain control over the mail server machine. The MIME system is designed to allow various different information formats to be interpreted and sent via e-mail. Attack points exist when data are converted to MIME compatible format and back.</Description><Mitigations><Mitigation>Stay up to date with third party vendor patches</Mitigation><Mitigation>Use the sendmail restricted shell program (smrsh)</Mitigation><Mitigation>Use mail.local</Mitigation></Mitigations><Examples><Example><Reference>A MIME conversion buffer overflow exists in Sendmail versions 8.8.3 and 8.8.4. Sendmail versions 8.8.3 and 8.8.4 are vulnerable to a buffer overflow in the MIME handling code. By sending a message with specially-crafted headers to the server, a remote attacker can overflow a buffer and execute arbitrary commands on the system with root privileges. Sendmail performs a 7 bit to 8 bit conversion on email messages. This vulnerability is due to the fact that insufficient bounds checking was performed while performing these conversions. This gave attacker an opportunity to overwrite the internal stack of sendmail while it is executing with root privileges. An attacker first probes the target system to figure out what mail server is used on the system and what version. An attacker could then test out the exploit at their leisure on their own machine running the same version of the mail server before using it in the wild.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception of Scarcity</Name><Description>The adversary leverages a perception of scarcity to persuade the target to perform an action or divulge information that is advantageous to the adversary. By conveying a perception of scarcity, or a situation of limited supply, the adversary aims to create a sense of urgency in the context of a target's decision-making process.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception of Authority</Name><Description>An adversary uses a social engineering technique to convey a sense of authority that motivates the target to reveal specific information or take specific action. There are various techniques for producing a sense of authority during ordinary modes of communication. One common method is impersonation. By impersonating someone with a position of power within an organization, an adversary may motivate the target individual to reveal some piece of sensitive information or perform an action that benefits the adversary.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception of Commitment and Consistency</Name><Description>An adversary uses social engineering to convince the target to do minor tasks as opposed to larger actions. After complying with a request, individuals are more likely to agree to subsequent requests that are similar in type and required effort.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation><Mitigation>Individuals should avoid complying with suspicious requests.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception of Liking</Name><Description>The adversary influences the target's actions by building a relationship where the target has a liking to the adversary. People are more likely to be influenced by people of whom they are fond, so the adversary attempts to ingratiate themself with the target via actions, appearance, or a combination thereof.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence Perception of Consensus or Social Proof</Name><Description>The adversary influences the target's actions by leveraging the inherent human nature to assume behavior of others is appropriate. In situations of uncertainty, people tend to behave in ways they see others behaving. The adversary convinces the target of adopting behavior or actions that is advantageous to the adversary.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Target Influence via Framing</Name><Description>An adversary uses framing techniques to contextualize a conversation so that the target is more likely to be influenced by the adversary's point of view. Framing is information and experiences in life that alter the way we react to decisions we must make. This type of persuasive technique exploits the way people are conditioned to perceive data and its significance, while avoiding negative or avoidance responses from the target. Rather than a specific technique framing is a methodology of conversation that slowly encourages the target to adopt to the adversary's perspective. One technique of framing is to avoid the use of the word "No" and to contextualize responses in a manner that is positive. When performed skillfully the target is much more likely to volunteer information or perform actions favorable to the adversary.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation><Mitigation>Avoid sharing unnecessary information during interactions beyond what is absolutely required for effective communication.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence via Incentives</Name><Description>The adversary incites a behavior from the target by manipulating something of influence. This is commonly associated with financial, social, or ideological incentivization. Examples include monetary fraud, peer pressure, and preying on the target's morals or ethics. The most effective incentive against one target might not be as effective against another, therefore the adversary must gather information about the target's vulnerability to particular incentives.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence via Psychological Principles</Name><Description>The adversary shapes the target's actions or behavior by focusing on the ways human interact and learn, leveraging such elements as cognitive and social psychology. In a variety of ways, a target can be influenced to behave or perform an action through capitalizing on what scholarship and research has learned about how and why humans react to specific scenarios and cues.</Description><Mitigations><Mitigation>An organization should provide regular, robust cybersecurity training to its employees to prevent social engineering attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Influence via Modes of Thinking</Name><Description>The adversary tailors their communication to the language and thought patterns of the target thereby weakening barriers or reluctance to communication. This method is a way of building rapport with a target by matching their speech patterns and the primary ways or dominant senses with which they make abstractions. This technique can be used to make the target more receptive to sharing information because the adversary has adapted their communication forms to match those of the target. When skillfully employed, the target is likely to be unaware that they are being manipulated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Target Influence via Eye Cues</Name><Description>The adversary gains information via non-verbal means from the target through eye movements.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploiting Multiple Input Interpretation Layers</Name><Description>An attacker supplies the target software with input data that contains sequences of special characters designed to bypass input validation logic. This exploit relies on the target making multiples passes over the input data and processing a "layer" of special characters with each pass. In this manner, the attacker can disguise input that would otherwise be rejected as invalid by concealing it with layers of special/escape characters that are stripped off by subsequent processing steps. The goal is to first discover cases where the input validation layer executes before one or more parsing layers. That is, user input may go through the following logic in an application: &lt;parser1&gt; --&gt; &lt;input validator&gt; --&gt; &lt;parser2&gt;. In such cases, the attacker will need to provide input that will pass through the input validator, but after passing through parser2, will be converted into something that the input validator was supposed to stop.</Description><Mitigations><Mitigation>An iterative approach to input validation may be required to ensure that no dangerous characters are present. It may be necessary to implement redundant checking across different input validation layers. Ensure that invalid data is rejected as soon as possible and do not continue to work with it.</Mitigation><Mitigation>Make sure to perform input validation on canonicalized data (i.e. data that is data in its most standard form). This will help avoid tricky encodings getting past the filters.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist would not be permitted to enter into the system.</Mitigation></Mitigations><Examples><Example><Reference>The backslash character provides a good example of the multiple-parser issue. A backslash is used to escape characters in strings, but is also used to delimit directories on the NT file system. When performing a command injection that includes NT paths, there is usually a need to "double escape" the backslash. In some cases, a quadruple escape is necessary. This diagram shows each successive layer of parsing translating the backslash character. A double backslash becomes a single as it is parsed. By using quadruple backslashes, the attacker is able to control the result in the final string. [REF-1]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>179</CWE_ID><Name>Incorrect Behavior Order: Early Validation</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>183</CWE_ID><Name>Permissive List of Allowed Inputs</Name><Description>Default allowlist includes unsafe methods, allowing bypass of sandbox</Description></Weakness><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness><Weakness><CWE_ID>78</CWE_ID><Name>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Name><Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED:  Target Influence via Micro-Expressions</Name><Description>This attack pattern has been deprecated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED:  Target Influence via Neuro-Linguistic Programming (NLP)</Name><Description>This attack pattern has been deprecated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED:  Target Influence via Voice in NLP</Name><Description>This attack pattern has been deprecated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Target Influence via The Human Buffer Overflow</Name><Description>An attacker utilizes a technique to insinuate commands to the subconscious mind of the target via communication patterns. The human buffer overflow methodology does not rely on over-stimulating the mind of the target, but rather embedding messages within communication that the mind of the listener assembles at a subconscious level. The human buffer-overflow method is similar to subconscious programming to the extent that messages are embedded within the message.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Target Influence via Interview and Interrogation</Name><Description /><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Target Influence via Instant Rapport</Name><Description /><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195</Entry_ID><Entry_Name>Supply Chain Compromise</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Modification During Manufacture</Name><Description>An attacker modifies a technology, product, or component during a stage in its manufacture for the purpose of carrying out an attack against some entity involved in the supply chain lifecycle. There are an almost limitless number of ways an attacker can modify a technology when they are involved in its manufacture, as the attacker has potential inroads to the software composition, hardware design and assembly, firmware, or basic design mechanics. Additionally, manufacturing of key components is often outsourced with the final product assembled by the primary manufacturer. The greatest risk, however, is deliberate manipulation of design specifications to produce malicious hardware or devices. There are billions of transistors in a single integrated circuit and studies have shown that fewer than 10 transistors are required to create malicious functionality.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195</Entry_ID><Entry_Name>Supply Chain Compromise</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Manipulation During Distribution</Name><Description>An attacker undermines the integrity of a product, software, or technology at some stage of the distribution channel. The core threat of modification or manipulation during distribution arise from the many stages of distribution, as a product may traverse multiple suppliers and integrators as the final asset is delivered. Components and services provided from a manufacturer to a supplier may be tampered with during integration or packaging.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1269</CWE_ID><Name>Product Released in Non-Release Configuration</Name><Description>Laptops with Intel chipsets were found to be running in Manufacturing Mode. After this information was reported to the OEM, the vulnerability (CVE-2018-4251) was patched disallowing access to the interface.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Overflow Binary Resource File</Name><Description>An attack of this type exploits a buffer overflow vulnerability in the handling of binary resources. Binary resources may include music files like MP3, image files like JPEG files, and any other binary file. These attacks may pass unnoticed to the client machine through normal usage of files, such as a browser loading a seemingly innocent JPEG file. This can allow the adversary access to the execution stack and execute arbitrary code in the target process.</Description><Mitigations><Mitigation>Perform appropriate bounds checking on all buffers.</Mitigation><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Static code analysis</Mitigation><Mitigation>Implementation: Execute program in less trusted process space environment, do not allow lower integrity processes to write to higher integrity processes</Mitigation><Mitigation>Implementation: Keep software patched to ensure that known vulnerabilities are not available for adversaries to target on host.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1200</Entry_ID><Entry_Name>Hardware Additions</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Hardware Integrity Attack</Name><Description>An adversary exploits a weakness in the system maintenance process and causes a change to be made to a technology, product, component, or sub-component or a new one installed during its deployed use at the victim location for the purpose of carrying out an attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Malicious Logic Insertion</Name><Description>An adversary installs or adds malicious logic (also known as malware) into a seemingly benign component of a fielded system. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. With the proliferation of mass digital storage and inexpensive multimedia devices, Bluetooth and 802.11 support, new attack vectors for spreading malware are emerging for things we once thought of as innocuous greeting cards, picture frames, or digital projectors. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems and their components that are still under development and part of the supply chain.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Infected Software</Name><Description>An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain.</Description><Mitigations><Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>506</CWE_ID><Name>Embedded Malicious Code</Name><Description>A command history tool was shipped with a code-execution backdoor inserted by a malicious party.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Logic Inserted Into Product by Authorized Developer</Name><Description>An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product.</Description><Mitigations><Mitigation>Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.</Mitigation></Mitigations><Examples><Example><Reference>In January 2022 the author of popular JavaScript packages "Faker" and "colors", used for generating mock data and including colored text within NodeJS consoles respectively, introduced malicious code that resulted in a Denial of Service (DoS) via an infinite loop. When applications that leveraged these packages updated to the malicious version, their applications executed the infinite loop and output gibberish ASCI characters endlessly. This resulted in the application being unusable until a stable version of the package was obtained. [REF-705]</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Development Alteration</Name><Description>An adversary modifies a technology, product, or component during its development to acheive a negative impact once the system is deployed. The goal of the adversary is to modify the system in such a way that the negative impact can be leveraged when the system is later deployed. Development alteration attacks may include attacks that insert malicious logic into the system's software, modify or replace hardware components, and other attacks which negatively impact the system during development. These attacks generally require insider access to modify source code or to tamper with hardware components. The product is then delivered to the user where the negative impact can be leveraged at a later time.</Description><Mitigations><Mitigation>Assess software and software components during development and prior to deployment to ensure that they function as intended and without any malicious functionality.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Logic Insertion into Product Software via Configuration Management Manipulation</Name><Description>
            </Description><Mitigations><Mitigation>Assess software during development and prior to deployment to ensure that it functions as intended and without any malicious functionality.</Mitigation><Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation></Mitigations><Examples><Example><Reference>In 2016, the policy-based configuration management system Chef was shown to be vulnerable to remote code execution attacks based on its Chef Manage add-on improperly deserializing user-driven cookie data. This allowed unauthenticated users the ability to craft cookie data that executed arbitrary code with the web server's privileges. [REF-706]</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195</Entry_ID><Entry_Name>Supply Chain Compromise</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Logic Insertion into Product via Inclusion of Third-Party Component</Name><Description>
            </Description><Mitigations><Mitigation>Assess software and hardware during development and prior to deployment to ensure that it functions as intended and without any malicious functionality. This includes both initial development, as well as updates propagated to the product after deployment.</Mitigation><Mitigation>Don't assume popular third-party components are free from malware or vulnerabilities. For software, assess for malicious functionality via update/commit reviews or automated static/dynamic analysis prior to including the component within the application and deploying in a production environment.</Mitigation></Mitigations><Examples><Example><Reference>From mid-2014 to early 2015, Lenovo computers were shipped with the Superfish Visual Search software that ultimately functioned as adware on the system. The Visual Search installation included a self-signed root HTTPS certificate that was able to intercept encrypted traffic for any site visited by the user. Of more concern was the fact that the certificate's corresponding private key was the same for every Lenovo machine. Once the private key was discovered [REF-709], an adversary could then conduct an Adversary-in-the-Middle (AitM) attack that would go undetected by machines that had this certificate installed on it. Adversaries could then masquerade as legitimate entities such as financial institutions, popular corporations, or other secure destinations on the Internet. [REF-708]</Reference><Description /></Example><Example><Reference>In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Design Alteration</Name><Description>An adversary modifies the design of a technology, product, or component to acheive a negative impact once the system is deployed. In this type of attack, the goal of the adversary is to modify the design of the system, prior to development starting, in such a way that the negative impact can be leveraged when the system is later deployed. Design alteration attacks differ from development alteration attacks in that design alteration attacks take place prior to development and which then may or may not be developed by the adverary. Design alteration attacks include modifying system designs to degrade system performance, cause unexpected states or errors, and general design changes that may lead to additional vulnerabilities. These attacks generally require insider access to modify design documents, but they may also be spoofed via web communications. The product is then developed and delivered to the user where the negative impact can be leveraged at a later time.</Description><Mitigations><Mitigation>Assess design documentation prior to development to ensure that they function as intended and without any malicious functionality.</Mitigation><Mitigation>Ensure that design documentation is saved in a secure location and has proper access controls set in place to avoid unnecessary modification.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.009</Entry_ID><Entry_Name>Obfuscated Files or Information: Embedded Payloads</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Embed Virus into DLL</Name><Description>An adversary tampers with a DLL and embeds a computer virus into gaps between legitimate machine instructions. These gaps may be the result of compiler optimizations that pad memory blocks for performance gains. The embedded virus then attempts to infect any machine which interfaces with the product, and possibly steal private data or eavesdrop.</Description><Mitigations><Mitigation>Leverage anti-virus products to detect and quarantine software with known virus.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>506</CWE_ID><Name>Embedded Malicious Code</Name><Description>A command history tool was shipped with a code-execution backdoor inserted by a malicious party.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Malware Propagation via USB Stick</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Buffer Overflow via Symbolic Links</Name><Description>This type of attack leverages the use of symbolic links to cause buffer overflows. An adversary can try to create or manipulate a symbolic link file such that its contents result in out of bounds data. When the target software processes the symbolic link file, it could potentially overflow internal buffers with insufficient bounds checking.</Description><Mitigations><Mitigation>Pay attention to the fact that the resource you read from can be a replaced by a Symbolic link. You can do a Symlink check before reading the file and decide that this is not a legitimate way of accessing the resource.</Mitigation><Mitigation>Because Symlink can be modified by an adversary, make sure that the ones you read are located in protected directories.</Mitigation><Mitigation>Pay attention to the resource pointed to by your symlink links (See attack pattern named "Forced Symlink race"), they can be replaced by malicious resources.</Mitigation><Mitigation>Always check the size of the input data before copying to a buffer.</Mitigation><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation><Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation></Mitigations><Examples><Example><Reference>The EFTP server has a buffer overflow that can be exploited if an adversary uploads a .lnk (link) file that contains more than 1,744 bytes. This is a classic example of an indirect buffer overflow. First the adversary uploads some content (the link file) and then the adversary causes the client consuming the data to be exploited. In this example, the ls command is exploited to compromise the server software.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Malware Propagation via USB U3 Autorun</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Embed Virus into DLL. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Malware Propagation via Infected Peripheral Device</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-448 : Malware Infection into Product Software. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Infected Hardware</Name><Description>An adversary inserts malicious logic into hardware, typically in the form of a computer virus or rootkit. This logic is often hidden from the user of the hardware and works behind the scenes to achieve negative impacts. This pattern of attack focuses on hardware already fielded and used in operation as opposed to hardware that is still under development and part of the supply chain.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Malicious Logic Insertion via Counterfeit Hardware</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Modification of Existing Components with Counterfeit Hardware</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-452 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Malicious Logic Insertion via Inclusion of Counterfeit Hardware Components</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-457 : Malicious Logic Insertion into Product Hardware. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Infected Memory</Name><Description>An adversary inserts malicious logic into memory enabling them to achieve a negative impact. This logic is often hidden from the user of the system and works behind the scenes to achieve negative impacts. This pattern of attack focuses on systems already fielded and used in operation as opposed to systems that are still under development and part of the supply chain.</Description><Mitigations><Mitigation>Leverage anti-virus products to detect stop operations with known virus.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1257</CWE_ID><Name>Improper Access Control Applied to Mirrored or Aliased Memory Regions</Name><Description>Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.
			</Description></Weakness><Weakness><CWE_ID>1260</CWE_ID><Name>Improper Handling of Overlap Between Protected Memory Ranges</Name><Description>processor design flaw allows ring 0 code to access more privileged rings by causing a register window to overlap a range of protected system RAM [REF-1100]</Description></Weakness><Weakness><CWE_ID>1274</CWE_ID><Name>Improper Access Control for Volatile Memory Containing Boot Code</Name><Description>Locked memory regions may be modified through other interfaces in a secure-boot-loader image due to improper access control.</Description></Weakness><Weakness><CWE_ID>1312</CWE_ID><Name>Missing Protection for Mirrored Regions in On-Chip Fabric Firewall</Name><Description>The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.</Description></Weakness><Weakness><CWE_ID>1316</CWE_ID><Name>Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges</Name><Description>Attacker can modify MCHBAR register to overlap with an attacker-controlled region, which modification prevents the SENTER instruction from properly applying VT-d protection while a Measured Launch Environment is being launched.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1091</Entry_ID><Entry_Name>Replication Through Removable Media</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1092</Entry_ID><Entry_Name>Communication Through Removable Media</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>USB Memory Attacks</Name><Description>An adversary loads malicious code onto a USB memory stick in order to infect any system which the device is plugged in to. USB drives present a significant security risk for business and government agencies. Given the ability to integrate wireless functionality into a USB stick, it is possible to design malware that not only steals confidential data, but sniffs the network, or monitor keystrokes, and then exfiltrates the stolen data off-site via a Wireless connection. Also, viruses can be transmitted via the USB interface without the specific use of a memory stick. The attacks from USB devices are often of such sophistication that experts conclude they are not the work of single individuals, but suggest state sponsorship. These attacks can be performed by an adversary with direct access to a target system or can be executed via means such as USB Drop Attacks.</Description><Mitigations><Mitigation>Ensure that proper, physical system access is regulated to prevent an adversary from physically connecting a malicious USB device themself.</Mitigation><Mitigation>Use anti-virus and anti-malware tools which can prevent malware from executing if it finds its way onto a target system. Additionally, make sure these tools are regularly updated to contain up-to-date virus and malware signatures.</Mitigation><Mitigation>Do not connect untrusted USB devices to systems connected on an organizational network. Additionally, use an isolated testing machine to validate untrusted devices and confirm malware does not exist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1299</CWE_ID><Name>Missing Protection Mechanism for Alternate Hardware Interface</Name><Description>monitor device allows access to physical UART debug port without authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Flash Memory Attacks</Name><Description>An adversary inserts malicious logic into a product or technology via flashing the on-board memory with a code-base that contains malicious logic. Various attacks exist against the integrity of flash memory, the most direct being rootkits coded into the BIOS or chipset of a device.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1282</CWE_ID><Name>Assumed-Immutable Data is Stored in Writable Memory</Name><Description>Immutable data, such as a first-stage bootloader, device identifiers, and "write-once" configuration settings are stored in writable memory that can be re-programmed or updated in the field.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Creating a Rogue Certification Authority Certificate</Name><Description>An adversary exploits a weakness resulting from using a hashing algorithm with weak collision resistance to generate certificate signing requests (CSR) that contain collision blocks in their "to be signed" parts. The adversary submits one CSR to be signed by a trusted certificate authority then uses the signed blob to make a second certificate appear signed by said certificate authority. Due to the hash collision, both certificates, though different, hash to the same value and so the signed blob works just as well in the second certificate. The net effect is that the adversary's second X.509 certificate, which the Certification Authority has never seen, is now signed and validated by that Certification Authority.</Description><Mitigations><Mitigation>Certification Authorities need to stop using deprecated or cryptographically insecure hashing algorithms to hash the certificates that they are about to sign. Instead they should be using stronger hashing functions such as SHA-256 or SHA-512.</Mitigation></Mitigations><Examples><Example><Reference>The MD5 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.</Reference><Description /></Example><Example><Reference>The SHA1 algorithm is not collision resistant, allowing attackers to use spoofing attacks to create rogue certificate Authorities.</Reference><Description /></Example><Example><Reference>Research has show significant vulnerabilities in PKI infrastructure. Trusted certificate authorities have been shown to use weak hashing algorithms after attacks have been demonstrated against those algorithms. Additionally, reliable methods have been demonstrated for generated MD5 collisions that could be used to generate malicious CSRs.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness><Weakness><CWE_ID>295</CWE_ID><Name>Improper Certificate Validation</Name><Description>chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.</Description></Weakness><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Overflow Variables and Tags</Name><Description>This type of attack leverages the use of tags or variables from a formatted configuration data to cause buffer overflow. The adversary crafts a malicious HTML page or configuration file that includes oversized strings, thus causing an overflow.</Description><Mitigations><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation><Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation><Mitigation>Do not trust input data from user. Validate all user input.</Mitigation></Mitigations><Examples><Example><Reference>A buffer overflow vulnerability exists in the Yamaha MidiPlug that can be accessed via a Text variable found in an EMBED tag.</Reference><Description /></Example><Example><Reference>A buffer overflow in Exim allows local users to gain root privileges by providing a long :include: option in a .forward file.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>733</CWE_ID><Name>Compiler Optimization Removal or Modification of Security-critical Code</Name><Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>HTTP Parameter Pollution (HPP)</Name><Description>An adversary adds duplicate HTTP GET/POST parameters by injecting query string delimiters. Via HPP it may be possible to override existing hardcoded HTTP parameters, modify the application behaviors, access and, potentially exploit, uncontrollable variables, and bypass input validation checkpoints and WAF rules.</Description><Mitigations><Mitigation>Configuration: If using a Web Application Firewall (WAF), filters should be carefully configured to detect abnormal HTTP requests</Mitigation><Mitigation>Design: Perform URL encoding</Mitigation><Mitigation>Implementation: Use strict regular expressions in URL rewriting</Mitigation><Mitigation>Implementation: Beware of multiple occurrences of a parameter in a Query String</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>88</CWE_ID><Name>Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')</Name><Description>Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert "-o" and "-X" switches.</Description></Weakness><Weakness><CWE_ID>147</CWE_ID><Name>Improper Neutralization of Input Terminators</Name><Description>Improperly terminated comment or phrase allows commands.</Description></Weakness><Weakness><CWE_ID>235</CWE_ID><Name>Improper Handling of Extra Parameters</Name><Description>MIE. multiple gateway/security products allow restriction bypass using multiple MIME fields with the same name, which are interpreted differently by clients.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Web Services API Signature Forgery Leveraging Hash Function Extension Weakness</Name><Description>An adversary utilizes a hash function extension/padding weakness, to modify the parameters passed to the web service requesting authentication by generating their own call in order to generate a legitimate signature hash (as described in the notes), without knowledge of the secret token sometimes provided by the web service.</Description><Mitigations><Mitigation>Design: Use a secure message authentication code (MAC) function such as an HMAC-SHA1</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>328</CWE_ID><Name>Use of Weak Hash</Name><Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description></Weakness><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cross-Domain Search Timing</Name><Description>An attacker initiates cross domain HTTP / GET requests and times the server responses. The timing of these responses may leak important information on what is happening on the server. Browser's same origin policy prevents the attacker from directly reading the server responses (in the absence of any other weaknesses), but does not prevent the attacker from timing the responses to requests that the attacker issued cross domain.</Description><Mitigations><Mitigation>Design: The victim's site could protect all potentially sensitive functionality (e.g. search functions) with cross site request forgery (CSRF) protection and not perform any work on behalf of forged requests</Mitigation><Mitigation>Design: The browser's security model could be fixed to not leak timing information for cross domain requests</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>385</CWE_ID><Name>Covert Timing Channel</Name><Description>Covert timing channels convey information by modulating some aspect of system behavior over time, so that the program receiving the information can observe system behavior and infer protected information.</Description></Weakness><Weakness><CWE_ID>352</CWE_ID><Name>Cross-Site Request Forgery (CSRF)</Name><Description>web interface allows password changes or stopping a virtual machine via CSRF</Description></Weakness><Weakness><CWE_ID>208</CWE_ID><Name>Observable Timing Discrepancy</Name><Description>Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Padding Oracle Crypto Attack</Name><Description>An adversary is able to efficiently decrypt data without knowing the decryption key if a target system leaks data on whether or not a padding error happened while decrypting the ciphertext. A target system that leaks this type of information becomes the padding oracle and an adversary is able to make use of that oracle to efficiently decrypt data without knowing the decryption key by issuing on average 128*b calls to the padding oracle (where b is the number of bytes in the ciphertext block). In addition to performing decryption, an adversary is also able to produce valid ciphertexts (i.e., perform encryption) by using the padding oracle, all without knowing the encryption key.</Description><Mitigations><Mitigation>Design: Use a message authentication code (MAC) or another mechanism to perform verification of message authenticity / integrity prior to decryption</Mitigation><Mitigation>Implementation: Do not leak information back to the user as to any cryptography (e.g., padding) encountered during decryption.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>209</CWE_ID><Name>Generation of Error Message Containing Sensitive Information</Name><Description>SSH password for private key stored in build log</Description></Weakness><Weakness><CWE_ID>514</CWE_ID><Name>Covert Channel</Name><Description>A covert channel is a path that can be used to transfer information in a way not intended by the system's designers.</Description></Weakness><Weakness><CWE_ID>649</CWE_ID><Name>Reliance on Obfuscation or Encryption of Security-Relevant Inputs without Integrity Checking</Name><Description>An IPSec configuration does not perform integrity checking of the IPSec packet as the result of either not configuring ESP properly to support the integrity service or using AH improperly. In either case, the security gateway receiving the IPSec packet would not validate the integrity of the packet to ensure that it was not changed. Thus if the packets were intercepted the attacker could undetectably change some of the bits in the packets. The meaningful bit flipping was possible due to the known weaknesses in the CBC encryption mode. Since the attacker knew the structure of the packet, they were able (in one variation of the attack) to use bit flipping to change the destination IP of the packet to the destination machine controlled by the attacker. And so the destination security gateway would decrypt the packet and then forward the plaintext to the machine controlled by the attacker. The attacker could then read the original message. For instance if VPN was used with the vulnerable IPSec configuration the attacker could read the victim's e-mail. This vulnerability demonstrates the need to enforce the integrity service properly when critical data could be modified by an attacker. This problem might have also been mitigated by using an encryption mode that is not susceptible to bit flipping attacks, but the preferred mechanism to address this problem still remains message verification for integrity. While this attack focuses on the network layer and requires an entity that controls part of the communication path such as a router, the situation is not much different at the software level, where an attacker can modify tokens/parameters used by the application.</Description></Weakness><Weakness><CWE_ID>347</CWE_ID><Name>Improper Verification of Cryptographic Signature</Name><Description>Accepts a configuration file without a Message Integrity Check (MIC) signature.</Description></Weakness><Weakness><CWE_ID>354</CWE_ID><Name>Improper Validation of Integrity Check Value</Name><Description>The product does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.</Description></Weakness><Weakness><CWE_ID>696</CWE_ID><Name>Incorrect Behavior Order</Name><Description>Chain: lexer in Java-based GraphQL server does not enforce maximum of tokens early enough (CWE-696), allowing excessive CPU consumption (CWE-1176)</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1606.001</Entry_ID><Entry_Name>Forge Web Credentials: Web Cookies</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Evercookie</Name><Description>An attacker creates a very persistent cookie that stays present even after the user thinks it has been removed. The cookie is stored on the victim's machine in over ten places. When the victim clears the cookie cache via traditional means inside the browser, that operation removes the cookie from certain places but not others. The malicious code then replicates the cookie from all of the places where it was not deleted to all of the possible storage locations once again. So the victim again has the cookie in all of the original storage locations. In other words, failure to delete the cookie in even one location will result in the cookie's resurrection everywhere. The evercookie will also persist across different browsers because certain stores (e.g., Local Shared Objects) are shared between different browsers.</Description><Mitigations><Mitigation>Design: Browser's design needs to be changed to limit where cookies can be stored on the client side and provide an option to clear these cookies in all places, as well as another option to stop these cookies from being written in the first place.</Mitigation><Mitigation>Design: Safari browser's private browsing mode is currently effective against evercookies.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>359</CWE_ID><Name>Exposure of Private Personal Information to an Unauthorized Actor</Name><Description>The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1090.001</Entry_ID><Entry_Name>Proxy: Internal Proxy</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Transparent Proxy Abuse</Name><Description>A transparent proxy serves as an intermediate between the client and the internet at large. It intercepts all requests originating from the client and forwards them to the correct location. The proxy also intercepts all responses to the client and forwards these to the client. All of this is done in a manner transparent to the client.</Description><Mitigations><Mitigation>Design: Ensure that the transparent proxy uses an actual network layer IP address for routing requests. On the transparent proxy, disable the use of routing based on address information in the HTTP host header.</Mitigation><Mitigation>Configuration: Disable in the browser the execution of Java Script, Flash, SilverLight, etc.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>441</CWE_ID><Name>Unintended Proxy or Intermediary ('Confused Deputy')</Name><Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Leveraging Active Adversary in the Middle Attacks to Bypass Same Origin Policy</Name><Description>An attacker leverages an adversary in the middle attack (CAPEC-94) in order to bypass the same origin policy protection in the victim's browser. This active adversary in the middle attack could be launched, for instance, when the victim is connected to a public WIFI hot spot. An attacker is able to intercept requests and responses between the victim's browser and some non-sensitive website that does not use TLS.</Description><Mitigations><Mitigation>Design: Tunnel communications through a secure proxy</Mitigation><Mitigation>Design: Trust level separation for privileged / non privileged interactions (e.g., two different browsers, two different users, two different operating systems, two different virtual machines)</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cross Site Identification</Name><Description>An attacker harvests identifying information about a victim via an active session that the victim's browser has with a social networking site. A victim may have the social networking site open in one tab or perhaps is simply using the "remember me" feature to keep their session with the social networking site active. An attacker induces a payload to execute in the victim's browser that transparently to the victim initiates a request to the social networking site (e.g., via available social network site APIs) to retrieve identifying information about a victim. While some of this information may be public, the attacker is able to harvest this information in context and may use it for further attacks on the user (e.g., spear phishing).</Description><Mitigations><Mitigation>Usage: Users should always explicitly log out from the social networking sites when done using them.</Mitigation><Mitigation>Usage: Users should not open other tabs in the browser when using a social networking site.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>352</CWE_ID><Name>Cross-Site Request Forgery (CSRF)</Name><Description>web interface allows password changes or stopping a virtual machine via CSRF</Description></Weakness><Weakness><CWE_ID>359</CWE_ID><Name>Exposure of Private Personal Information to an Unauthorized Actor</Name><Description>The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Generic Cross-Browser Cross-Domain Theft</Name><Description>An attacker makes use of Cascading Style Sheets (CSS) injection to steal data cross domain from the victim's browser. The attack works by abusing the standards relating to loading of CSS: 1. Send cookies on any load of CSS (including cross-domain) 2. When parsing returned CSS ignore all data that does not make sense before a valid CSS descriptor is found by the CSS parser.</Description><Mitigations><Mitigation>Design: Prior to performing CSS parsing, require the CSS to start with well-formed CSS when it is a cross-domain load and the MIME type is broken. This is a browser level fix.</Mitigation><Mitigation>Implementation: Perform proper HTML encoding and URL escaping</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness><Weakness><CWE_ID>149</CWE_ID><Name>Improper Neutralization of Quoting Syntax</Name><Description>MIE. MFV too? bypass AV/security with fields that should not be quoted, duplicate quotes, missing leading/trailing quotes.</Description></Weakness><Weakness><CWE_ID>177</CWE_ID><Name>Improper Handling of URL Encoding (Hex Encoding)</Name><Description>"%0a" (overlaps CRLF)</Description></Weakness><Weakness><CWE_ID>838</CWE_ID><Name>Inappropriate Encoding for Output Context</Name><Description>Server does not properly handle requests that do not contain UTF-8 data; browser assumes UTF-8, allowing XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.002</Entry_ID><Entry_Name>Endpoint Denial of Service: Service Exhaustion Flood</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>HTTP DoS</Name><Description>An attacker performs flooding at the HTTP level to bring down only a particular web application rather than anything listening on a TCP/IP connection. This denial of service attack requires substantially fewer packets to be sent which makes DoS harder to detect. This is an equivalent of SYN flood in HTTP. The idea is to keep the HTTP session alive indefinitely and then repeat that hundreds of times. This attack targets resource depletion weaknesses in web server software. The web server will wait to attacker's responses on the initiated HTTP sessions while the connection threads are being exhausted.</Description><Mitigations><Mitigation>Configuration: Configure web server software to limit the waiting period on opened HTTP sessions</Mitigation><Mitigation>Design: Use load balancing mechanisms</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness><Weakness><CWE_ID>772</CWE_ID><Name>Missing Release of Resource after Effective Lifetime</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Buffer Overflow via Parameter Expansion</Name><Description>In this attack, the target software is given input that the adversary knows will be modified and expanded in size during processing. This attack relies on the target software failing to anticipate that the expanded data may exceed some internal limit, thereby creating a buffer overflow.</Description><Mitigations><Mitigation>Ensure that when parameter expansion happens in the code that the assumptions used to determine the resulting size of the parameter are accurate and that the new size of the parameter is visible to the whole system</Mitigation></Mitigations><Examples><Example><Reference>Attack Example: FTP glob() The glob() function in FTP servers has been susceptible to attack as a result of incorrect resizing. This is an ftpd glob() Expansion LIST Heap Overflow Vulnerability. ftp daemon contains a heap-based buffer overflow condition. The overflow occurs when the LIST command is issued with an argument that expands into an oversized string after being processed by glob(). This buffer overflow occurs in memory that is dynamically allocated. It may be possible for adversaries to exploit this vulnerability and execute arbitrary code on the affected host. To exploit this, the adversary must be able to create directories on the target host. The glob() function is used to expand short-hand notation into complete file names. By sending to the FTP server a request containing a tilde (~) and other wildcard characters in the pathname string, a remote adversary can overflow a buffer and execute arbitrary code on the FTP server to gain root privileges. Once the request is processed, the glob() function expands the user input, which could exceed the expected length. In order to exploit this vulnerability, the adversary must be able to create directories on the FTP server. [REF-1]</Reference><Description /></Example><Example><Reference>Buffer overflow in the glob implementation in libc in NetBSD-current before 20050914, and NetBSD 2.* and 3.* before 20061203, as used by the FTP daemon, allows remote authenticated users to execute arbitrary code via a long pathname that results from path expansion. The limit computation of an internal buffer was done incorrectly. The size of the buffer in byte was used as element count, even though the elements of the buffer are 2 bytes long. Long expanded path names would therefore overflow the buffer.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>130</CWE_ID><Name>Improper Handling of Length Parameter Inconsistency</Name><Description>Buffer overflow by modifying a length value.</Description></Weakness><Weakness><CWE_ID>131</CWE_ID><Name>Incorrect Calculation of Buffer Size</Name><Description>Chain: Language interpreter calculates wrong buffer size (CWE-131) by using "size = ptr ? X : Y" instead of "size = (ptr ? X : Y)" expression.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Expanding Control over the Operating System from the Database</Name><Description>An attacker is able to leverage access gained to the database to read / write data to the file system, compromise the operating system, create a tunnel for accessing the host machine, and use this access to potentially attack other machines on the same network as the database machine. Traditionally SQL injections attacks are viewed as a way to gain unauthorized read access to the data stored in the database, modify the data in the database, delete the data, etc. However, almost every data base management system (DBMS) system includes facilities that if compromised allow an attacker complete access to the file system, operating system, and full access to the host running the database. The attacker can then use this privileged access to launch subsequent attacks. These facilities include dropping into a command shell, creating user defined functions that can call system level libraries present on the host machine, stored procedures, etc.</Description><Mitigations><Mitigation>Design: Follow the defensive programming practices needed to protect an application accessing the database from SQL injection</Mitigation><Mitigation>Configuration: Ensure that the DBMS is patched with the latest security patches</Mitigation><Mitigation>Design: Ensure that the DBMS login used by the application has the lowest possible level of privileges in the DBMS</Mitigation><Mitigation>Design: Ensure that DBMS runs with the lowest possible level of privileges on the host machine and that it runs as a separate user</Mitigation><Mitigation>Usage: Do not use the DBMS machine for anything else other than the database</Mitigation><Mitigation>Usage: Do not place any trust in the database host on the internal network. Authenticate and validate all network activity originating from the database host.</Mitigation><Mitigation>Usage: Use an intrusion detection system to monitor network connections and logs on the database host.</Mitigation><Mitigation>Implementation: Remove / disable all unneeded / unused functions of the DBMS system that may allow an attacker to elevate privileges if compromised</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>250</CWE_ID><Name>Execution with Unnecessary Privileges</Name><Description>Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access "open file" dialog.</Description></Weakness><Weakness><CWE_ID>89</CWE_ID><Name>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Name><Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.001</Entry_ID><Entry_Name>Hijack Execution Flow:DLL search order hijacking</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.004</Entry_ID><Entry_Name>Hijack Execution Flow: Dylib Hijacking</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.008</Entry_ID><Entry_Name>Hijack Execution Flow: Path Interception by Search Order Hijacking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Search Order Hijacking</Name><Description>An adversary exploits a weakness in an application's specification of external libraries to exploit the functionality of the loader where the process loading the library searches first in the same directory in which the process binary resides and then in other directories. Exploitation of this preferential search order can allow an attacker to make the loading process load the adversary's rogue library rather than the legitimate library. This attack can be leveraged with many different libraries and with many different loading processes. No forensic trails are left in the system's registry or file system that an incorrect library had been loaded.</Description><Mitigations><Mitigation>Design: Fix the Windows loading process to eliminate the preferential search order by looking for DLLs in the precise location where they are expected</Mitigation><Mitigation>Design: Sign system DLLs so that unauthorized DLLs can be detected.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>427</CWE_ID><Name>Uncontrolled Search Path Element</Name><Description>Product searches /tmp for modules before other paths.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Browser Fingerprinting</Name><Description>An attacker carefully crafts small snippets of Java Script to efficiently detect the type of browser the potential victim is using. Many web-based attacks need prior knowledge of the web browser including the version of browser to ensure successful exploitation of a vulnerability. Having this knowledge allows an attacker to target the victim with attacks that specifically exploit known or zero day weaknesses in the type and version of the browser used by the victim. Automating this process via Java Script as a part of the same delivery system used to exploit the browser is considered more efficient as the attacker can supply a browser fingerprinting method and integrate it with exploit code, all contained in Java Script and in response to the same web page request by the browser.</Description><Mitigations><Mitigation>Configuration: Disable Java Script in the browser</Mitigation></Mitigations><Examples><Example><Reference>The following code snippets can be used to detect various browsers:</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.001</Entry_ID><Entry_Name>Masquerading: Invalid Code Signature</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1553.002</Entry_ID><Entry_Name>Subvert Trust Controls: Code Signing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Signature Spoof</Name><Description>An attacker generates a message or datablock that causes the recipient to believe that the message or datablock was generated and cryptographically signed by an authoritative or reputable source, misleading a victim or victim operating system into performing malicious actions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.004</Entry_ID><Entry_Name>Unsecured Credentials: Private Keys</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Signature Spoofing by Key Theft</Name><Description>An attacker obtains an authoritative or reputable signer's private signature key by theft and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.</Description><Mitigations><Mitigation>Restrict access to private keys from non-supervisory accounts</Mitigation><Mitigation>Restrict access to administrative personnel and processes only</Mitigation><Mitigation>Ensure all remote methods are secured</Mitigation><Mitigation>Ensure all services are patched and up to date</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Signature Spoofing by Improper Validation</Name><Description>An adversary exploits a cryptographic weakness in the signature verification algorithm implementation to generate a valid signature without knowing the key.</Description><Mitigations><Mitigation>Use programs and products that contain cryptographic elements that have been thoroughly tested for flaws in the signature verification routines.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>347</CWE_ID><Name>Improper Verification of Cryptographic Signature</Name><Description>Accepts a configuration file without a Message Integrity Check (MIC) signature.</Description></Weakness><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness><Weakness><CWE_ID>295</CWE_ID><Name>Improper Certificate Validation</Name><Description>chain: OS package manager does not check properly check the return value, allowing bypass using a revoked certificate.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Signature Spoofing by Misrepresentation</Name><Description>An attacker exploits a weakness in the parsing or display code of the recipient software to generate a data blob containing a supposedly valid signature, but the signer's identity is falsely represented, which can lead to the attacker manipulating the recipient software or its victim user to perform compromising actions.</Description><Mitigations><Mitigation>Ensure the application is using parsing and data display techniques that will accurately display control characters, international symbols and markings, and ultimately recognize potential homograph attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Signature Spoofing by Mixing Signed and Unsigned Content</Name><Description>An attacker exploits the underlying complexity of a data structure that allows for both signed and unsigned content, to cause unsigned data to be processed as though it were signed data.</Description><Mitigations><Mitigation>Ensure the application is fully patched and does not allow the processing of unsigned data as if it is signed data.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>319</CWE_ID><Name>Cleartext Transmission of Sensitive Information</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.011</Entry_ID><Entry_Name>Hijack Execution Flow:Service Registry Permissions Weakness</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1543.003</Entry_ID><Entry_Name>Create or Modify System Process:Windows Service</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Modification of Windows Service Configuration</Name><Description>An adversary exploits a weakness in access control to modify the execution parameters of a Windows service. The goal of this attack is to execute a malicious binary in place of an existing service.</Description><Mitigations><Mitigation>Ensure proper permissions are set for Registry hives to prevent users from modifying keys for system components that may lead to privilege escalation.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1553.004</Entry_ID><Entry_Name>Subvert Trust Controls:Install Root Certificate</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Root Certificate</Name><Description>An adversary exploits a weakness in authorization and installs a new root certificate on a compromised system. Certificates are commonly used for establishing secure TLS/SSL communications within a web browser. When a user attempts to browse a website that presents a certificate that is not trusted an error message will be displayed to warn the user of the security risk. Depending on the security settings, the browser may not allow the user to establish a connection to the website. Adversaries have used this technique to avoid security warnings prompting users when compromised systems connect over HTTPS to adversary controlled web servers that spoof legitimate websites in order to collect login credentials.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Passing Local Filenames to Functions That Expect a URL</Name><Description>This attack relies on client side code to access local files and resources instead of URLs. When the client browser is expecting a URL string, but instead receives a request for a local file, that execution is likely to occur in the browser process space with the browser's authority to local files. The attacker can send the results of this request to the local files out to a site that they control. This attack may be used to steal sensitive authentication data (either local or remote), or to gain system profile information to launch further attacks.</Description><Mitigations><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Ensure all configuration files and resource are either removed or protected when promoting code into production.</Mitigation><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation></Mitigations><Examples><Example><Reference>J2EE applications frequently use .properties files to store configuration information including JDBC connections, LDAP connection strings, proxy information, system passwords and other system metadata that is valuable to attackers looking to probe the system or bypass policy enforcement points. When these files are stored in publicly accessible directories and are allowed to be read by the public user, then an attacker can list the directory identify a .properties file and simply load its contents in the browser listing its contents. A standard Hibernate properties file contains Even if the attacker cannot write this file, there is plenty of information to leverage to gain further access.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>241</CWE_ID><Name>Improper Handling of Unexpected Data Type</Name><Description>Anti-virus product has assert error when line length is non-numeric.</Description></Weakness><Weakness><CWE_ID>706</CWE_ID><Name>Use of Incorrectly-Resolved Name or Reference</Name><Description>The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1611</Entry_ID><Entry_Name>Escape to Host</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Escaping Virtualization</Name><Description>An adversary gains access to an application, service, or device with the privileges of an authorized or privileged user by escaping the confines of a virtualized environment. The adversary is then able to access resources or execute unauthorized code within the host environment, generally with the privileges of the user running the virtualized process. Successfully executing an attack of this type is often the first step in executing more complex attacks.</Description><Mitigations><Mitigation>Ensure virtualization software is current and up-to-date.</Mitigation><Mitigation>Abide by the least privilege principle to avoid assigning users more privileges than necessary.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1090.004</Entry_ID><Entry_Name>Proxy:Domain Fronting</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Contradictory Destinations in Traffic Routing Schemes</Name><Description>Adversaries can provide contradictory destinations when sending messages. Traffic is routed in networks using the domain names in various headers available at different levels of the OSI model. In a Content Delivery Network (CDN) multiple domains might be available, and if there are contradictory domain names provided it is possible to route traffic to an inappropriate destination. The technique, called Domain Fronting, involves using different domain names in the SNI field of the TLS header and the Host field of the HTTP header. An alternative technique, called Domainless Fronting, is similar, but the SNI field is left blank.</Description><Mitigations><Mitigation>Monitor connections, checking headers in traffic for contradictory domain names, or empty domain names.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>923</CWE_ID><Name>Improper Restriction of Communication Channel to Intended Endpoints</Name><Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1498.001</Entry_ID><Entry_Name>Network Denial of Service: Direct Network Flood</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.001</Entry_ID><Entry_Name>Endpoint Denial of Service: OS Exhaustion Flood</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.002</Entry_ID><Entry_Name>Endpoint Denial of Service: Service Exhaustion Flood</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>TCP Flood</Name><Description>An adversary may execute a flooding attack using the TCP protocol with the intent to deny legitimate users access to a service. These attacks exploit the weakness within the TCP protocol where there is some state information for the connection the server needs to maintain. This often involves the use of TCP SYN messages.</Description><Mitigations><Mitigation>To mitigate this type of an attack, an organization can monitor incoming packets and look for patterns in the TCP traffic to determine if the network is under an attack. The potential target may implement a rate limit on TCP SYN messages which would provide limited capabilities while under attack.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: XML Client-Side Attack</Name><Description>This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads and CAPEC-231: XML Oversized Payloads. Please refer to these CAPECs going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.004</Entry_ID><Entry_Name>Unsecure Credentials: Private Keys</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Signature Spoofing by Key Recreation</Name><Description>An attacker obtains an authoritative or reputable signer's private signature key by exploiting a cryptographic weakness in the signature algorithm or pseudorandom number generation and then uses this key to forge signatures from the original signer to mislead a victim into performing actions that benefit the attacker.</Description><Mitigations><Mitigation>Ensure cryptographic elements have been sufficiently tested for weaknesses.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>330</CWE_ID><Name>Use of Insufficiently Random Values</Name><Description>Application generates passwords that are based on the time of day.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>UDP Flood</Name><Description>An adversary may execute a flooding attack using the UDP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. Additionally, firewalls often open a port for each UDP connection destined for a service with an open UDP port, meaning the firewalls in essence save the connection state thus the high packet nature of a UDP flood can also overwhelm resources allocated to the firewall. UDP attacks can also target services like DNS or VoIP which utilize these protocols. Additionally, due to the session-less nature of the UDP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.</Description><Mitigations><Mitigation>To mitigate this type of an attack, modern firewalls drop UDP traffic destined for closed ports, and unsolicited UDP reply packets. A variety of other countermeasures such as universal reverse path forwarding and remote triggered black holing(RFC3704) along with modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Flood</Name><Description>An adversary may execute a flooding attack using the ICMP protocol with the intent to deny legitimate users access to a service by consuming the available network bandwidth. A typical attack involves a victim server receiving ICMP packets at a high rate from a wide range of source addresses. Additionally, due to the session-less nature of the ICMP protocol, the source of a packet is easily spoofed making it difficult to find the source of the attack.</Description><Mitigations><Mitigation>To mitigate this type of an attack, an organization can enable ingress filtering. Additionally modifications to BGP like black hole routing and sinkhole routing(RFC3882) help mitigate the spoofed source IP nature of these attacks.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.002</Entry_ID><Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>HTTP Flood</Name><Description>An adversary may execute a flooding attack using the HTTP protocol with the intent to deny legitimate users access to a service by consuming resources at the application layer such as web services and their infrastructure. These attacks use legitimate session-based HTTP GET requests designed to consume large amounts of a server's resources. Since these are legitimate sessions this attack is very difficult to detect.</Description><Mitigations><Mitigation>Design: Use a Web Application Firewall (WAF) to help filter out malicious traffic. This can be setup with rules to block IP addresses found in IP reputation databases, which contains lists of known bad IP addresses. Analysts should also monitor when the traffic flow becomes abnormally large, and be able to add on-the-fly rules to block malicious traffic. Special care should be taken to ensure low false positive rates in block rules and functionality should be implemented to allow a legitimate user to resume sending traffic if they have been blocked.</Mitigation><Mitigation>Hire a third party provider to implement a Web Application Firewall (WAF) for your application. Third party providers have dedicated resources and expertise that could allow them to update rules and prevent HTTP Floods very quickly.</Mitigation><Mitigation>Design: Use a load balancer such as nginx to prevent small scale HTTP Floods by dispersing traffic between a group of servers.</Mitigation><Mitigation>Implementation: Make a requesting machine solve some kind of challenge before allowing them to send an HTTP request. This could be a captcha or something similar that works to deter bots.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.002</Entry_ID><Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>SSL Flood</Name><Description>An adversary may execute a flooding attack using the SSL protocol with the intent to deny legitimate users access to a service by consuming all the available resources on the server side. These attacks take advantage of the asymmetric relationship between the processing power used by the client and the processing power used by the server to create a secure connection. In this manner the attacker can make a large number of HTTPS requests on a low provisioned machine to tie up a disproportionately large number of resources on the server. The clients then continue to keep renegotiating the SSL connection. When multiplied by a large number of attacking machines, this attack can result in a crash or loss of service to legitimate users.</Description><Mitigations><Mitigation>To mitigate this type of an attack, an organization can create rule based filters to silently drop connections if too many are attempted in a certain time period.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1110.001</Entry_ID><Entry_Name>Brute Force:Password Guessing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Password Brute Forcing</Name><Description>An adversary tries every possible value for a password until they succeed. A brute force attack, if feasible computationally, will always be successful because it will essentially go through all possible passwords given the alphabet used (lower case letters, upper case letters, numbers, symbols, etc.) and the maximum length of the password.</Description><Mitigations><Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation><Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation><Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation></Mitigations><Examples><Example><Reference>A system does not enforce a strong password policy and the user picks a five letter password consisting of lower case English letters only. The system does not implement any password throttling mechanism. Assuming the adversary does not know the length of the users' password, an adversary can brute force this password in maximum 1+26+26^2+26^3+26^4+26^5 = 1 + 26 + 676 + 17576 + 456976 + 11,881,376 = 12,356,631 attempts, and half these tries (6,178,316) on average. Using modern hardware this attack is trivial. If the adversary were to assume that the user password could also contain upper case letters (and it was case sensitive) and/or numbers, than the number of trials would have been larger. An adversary's job would have most likely been even easier because many users who choose easy to brute force passwords like this are also likely to use a word that can be found in the dictionary. Since there are far fewer valid English words containing up to five letters than 12,356,631, an attack that tries each of the entries in the English dictionary would go even faster.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>257</CWE_ID><Name>Storing Passwords in a Recoverable Format</Name><Description>A messaging platform serializes all elements of User/Group objects, making private information available to adversaries</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1498.002</Entry_ID><Entry_Name>Network Denial of Service:Reflection Amplification</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Amplification</Name><Description>An adversary may execute an amplification where the size of a response is far greater than that of the request that generates it. The goal of this attack is to use a relatively few resources to create a large amount of traffic against a target server. To execute this attack, an adversary send a request to a 3rd party service, spoofing the source address to be that of the target server. The larger response that is generated by the 3rd party service is then sent to the target server. By sending a large number of initial requests, the adversary can generate a tremendous amount of traffic directed at the target. The greater the discrepancy in size between the initial request and the final payload delivered to the target increased the effectiveness of this attack.</Description><Mitigations><Mitigation>To mitigate this type of an attack, an organization can attempt to identify the 3rd party services being used in an active attack and blocking them until the attack ends. This can be accomplished by filtering traffic for suspicious message patterns such as a spike in traffic where each response contains the same large block of data. Care should be taken to prevent false positive rates so legitimate traffic isn't blocked.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Quadratic Data Expansion</Name><Description>An adversary exploits macro-like substitution to cause a denial of service situation due to excessive memory being allocated to fully expand the data. The result of this denial of service could cause the application to freeze or crash. This involves defining a very large entity and using it multiple times in a single entity substitution. CAPEC-197 is a similar attack pattern, but it is easier to discover and defend against. This attack pattern does not perform multi-level substitution and therefore does not obviously appear to consume extensive resources.</Description><Mitigations><Mitigation>Design: Use libraries and templates that minimize unfiltered input. Use methods that limit entity expansion and throw exceptions on attempted entity expansion.</Mitigation><Mitigation>Implementation: For XML based data - disable altogether the use of inline DTD schemas when parsing XML objects. If a DTD must be used, normalize, filter and use an allowlist and parse with methods and routines that will detect entity expansion from untrusted sources.</Mitigation></Mitigations><Examples><Example><Reference>In this example the attacker defines one large entity and refers to it many times. This results in a relatively small message of 100KBs that will expand to a message in the GB range.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Regular Expression Exponential Blowup</Name><Description>An adversary may execute an attack on a program that uses a poor Regular Expression(Regex) implementation by choosing input that results in an extreme situation for the Regex. A typical extreme situation operates at exponential time compared to the input size. This is due to most implementations using a Nondeterministic Finite Automaton(NFA) state machine to be built by the Regex algorithm since NFA allows backtracking and thus more complex regular expressions.</Description><Mitigations><Mitigation>Test custom written Regex with fuzzing to determine if the Regex is a poor one. Add timeouts to processes that handle the Regex logic. If an evil Regex is found rewrite it as a good Regex.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>400</CWE_ID><Name>Uncontrolled Resource Consumption</Name><Description>Chain: anti-virus product encounters a malformed file but returns from a function without closing a file descriptor (CWE-775) leading to file descriptor consumption (CWE-400) and failed scans.</Description></Weakness><Weakness><CWE_ID>1333</CWE_ID><Name>Inefficient Regular Expression Complexity</Name><Description>ReDoS when validating URL.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>SOAP Array Blowup</Name><Description>An adversary may execute an attack on a web service that uses SOAP messages in communication. By sending a very large SOAP array declaration to the web service, the attacker forces the web service to allocate space for the array elements before they are parsed by the XML parser. The attacker message is typically small in size containing a large array declaration of say 1,000,000 elements and a couple of array elements. This attack targets exhaustion of the memory resources of the web service.</Description><Mitigations><Mitigation>Enforce strict schema validation. The schema should enforce a maximum number of array elements. If the number of maximum array elements can't be limited another validation method should be used. One such method could be comparing the declared number of items in the array with the existing number of elements of the array. If these numbers don't match drop the SOAP packet at the web service layer.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP Fragmentation</Name><Description>An adversary may execute a TCP Fragmentation attack against a target with the intention of avoiding filtering rules of network controls, by attempting to fragment the TCP packet such that the headers flag field is pushed into the second fragment which typically is not filtered.</Description><Mitigations><Mitigation>This attack may be mitigated by enforcing rules at the router following the guidance of RFC1858. The essential part of the guidance is creating the following rule "IF FO=1 and PROTOCOL=TCP then DROP PACKET" as this mitigated both tiny fragment and overlapping fragment attacks in IPv4. In IPv6 overlapping(RFC5722) additional steps may be required such as deep packet inspection. The delayed fragments may be mitigated by enforcing a timeout on the transmission to receive all packets by a certain time since the first packet is received. According to RFC2460 IPv6 implementations should enforce a rule to discard all fragments if the fragments are not ALL received within 60 seconds of the FIRST arriving fragment.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>UDP Fragmentation</Name><Description>An attacker may execute a UDP Fragmentation attack against a target server in an attempt to consume resources such as bandwidth and CPU. IP fragmentation occurs when an IP datagram is larger than the MTU of the route the datagram has to traverse. Typically the attacker will use large UDP packets over 1500 bytes of data which forces fragmentation as ethernet MTU is 1500 bytes. This attack is a variation on a typical UDP flood but it enables more network bandwidth to be consumed with fewer packets. Additionally it has the potential to consume server CPU resources and fill memory buffers associated with the processing and reassembling of fragmented packets.</Description><Mitigations><Mitigation>This attack may be mitigated by changing default cache sizes to be larger at the OS level. Additionally rules can be enforced to prune the cache with shorter timeouts for packet reassembly as the cache nears capacity.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>ICMP Fragmentation</Name><Description>An attacker may execute a ICMP Fragmentation attack against a target with the intention of consuming resources or causing a crash. The attacker crafts a large number of identical fragmented IP packets containing a portion of a fragmented ICMP message. The attacker these sends these messages to a target host which causes the host to become non-responsive. Another vector may be sending a fragmented ICMP message to a target host with incorrect sizes in the header which causes the host to hang.</Description><Mitigations><Mitigation>This attack may be mitigated through egress filtering based on ICMP payload so a network is a "good neighbor" to other networks. Bad IP implementations become patched, so using the proper version of a browser or OS is recommended.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1083</Entry_ID><Entry_Name>File and Directory Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>File Discovery</Name><Description>An adversary engages in probing and exploration activities to determine if common key files exists. Such files often contain configuration and security parameters of the targeted application, system or network. Using this knowledge may often pave the way for more damaging attacks.</Description><Mitigations><Mitigation>Leverage file protection mechanisms to render these files accessible only to authorized parties.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Probe iOS Screenshots</Name><Description>An adversary examines screenshot images created by iOS in an attempt to obtain sensitive information. This attack targets temporary screenshots created by the underlying OS while the application remains open in the background.</Description><Mitigations><Mitigation>To mitigate this type of an attack, an application that may display sensitive information should clear the screen contents before a screenshot is taken. This can be accomplished by setting the key window's hidden property to YES. This code to hide the contents should be placed in both the applicationWillResignActive() and applicationDidEnterBackground() methods.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>359</CWE_ID><Name>Exposure of Private Personal Information to an Unauthorized Actor</Name><Description>The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Android Intent Intercept</Name><Description>An adversary, through a previously installed malicious application, intercepts messages from a trusted Android-based application in an attempt to achieve a variety of different objectives including denial of service, information disclosure, and data injection. An implicit intent sent from a trusted application can be received by any application that has declared an appropriate intent filter. If the intent is not protected by a permission that the malicious application lacks, then the attacker can gain access to the data contained within the intent. Further, the intent can be either blocked from reaching the intended destination, or modified and potentially forwarded along.</Description><Mitigations><Mitigation>To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An explicit intent is delivered to a specific application as declared within the intent, whereas the Android operating system determines who receives an implicit intent which could potentially be a malicious application. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly. Implicit intents should never be used for inter-application communication.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>925</CWE_ID><Name>Improper Verification of Intent by Broadcast Receiver</Name><Description>The Android application uses a Broadcast Receiver that receives an Intent but does not properly verify that the Intent came from an authorized source.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Blue Boxing</Name><Description>
            </Description><Mitigations><Mitigation>Implementation: Upgrade phone lines. Note this may be prohibitively expensive</Mitigation><Mitigation>Use strong access control such as two factor access control for administrative access to the switch</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Password Recovery Exploitation</Name><Description>An attacker may take advantage of the application feature to help users recover their forgotten passwords in order to gain access into the system with the same privileges as the original user. Generally password recovery schemes tend to be weak and insecure.</Description><Mitigations><Mitigation>Use multiple security questions (e.g. have three and make the user answer two of them correctly). Let the user select their own security questions or provide them with choices of questions that are not generic.</Mitigation><Mitigation>E-mail the temporary password to the registered e-mail address of the user rather than letting the user reset the password online.</Mitigation><Mitigation>Ensure that your password recovery functionality is not vulnerable to an injection style attack.</Mitigation></Mitigations><Examples><Example><Reference>phpBanner Exchange is a PHP script (using the mySQL database) that facilitates the running of a banner exchange without extensive knowledge of PHP or mySQL. A SQL injection was discovered in the password recovery module of the system that allows recovering an arbitrary user's password and taking over their account. The problem is due to faulty input sanitization in the phpBannerExchange, specifically the e-mail address of the user which is requested by the password recovery module. The e-mail address requested by the password recovery module on the resetpw.php page. That e-mail address is validated with the following regular expression: A bug in the implementation of eregi() allows to pass additional character using a null byte "\0". Since eregi() is implemented in C, the variable $email is treated as a zero-terminated string. All characters following the Null Byte will not be recognized by the regular expression. So an e-mail address can be provided that includes the special character " ' " to break the SQL query below (and it will not be rejected by the regular expression because of the null byte trick). So a SQL injection becomes possible: This query will return a non-zero result set even though the email supplied (attacker's email) is not in the database. Then a new password for the user is generated and sent to the $email address, an e-mail address controlled by the attacker. An attacker can then log in into the system.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>640</CWE_ID><Name>Weak Password Recovery Mechanism for Forgotten Password</Name><Description>The product contains a mechanism for users to recover or change their passwords without knowing the original password, but the mechanism is weak.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>WebView Injection</Name><Description>An adversary, through a previously installed malicious application, injects code into the context of a web page displayed by a WebView component. Through the injected code, an adversary is able to manipulate the DOM tree and cookies of the page, expose sensitive information, and can launch attacks against the web application from within the web page.</Description><Mitigations><Mitigation>The only known mitigation to this type of attack is to keep the malicious application off the system. There is nothing that can be done to the target application to protect itself from a malicious application that has been installed and executed.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>749</CWE_ID><Name>Exposed Dangerous Method or Function</Name><Description>security tool ActiveX control allows download or upload of files</Description></Weakness><Weakness><CWE_ID>940</CWE_ID><Name>Improper Verification of Source of a Communication Channel</Name><Description>DNS server caches glue records received from non-delegated name servers</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Android Activity Hijack</Name><Description>An adversary intercepts an implicit intent sent to launch a Android-based trusted activity and instead launches a counterfeit activity in its place. The malicious activity is then used to mimic the trusted activity's user interface and prompt the target to enter sensitive data as if they were interacting with the trusted activity.</Description><Mitigations><Mitigation>To mitigate this type of an attack, explicit intents should be used whenever sensitive data is being sent. An 'explicit intent' is delivered to a specific application as declared within the intent, whereas an 'implicit intent' is directed to an application as defined by the Android operating system. If an implicit intent must be used, then it should be assumed that the intent will be received by an unknown application and any response should be treated accordingly (i.e., with appropriate security controls).</Mitigation><Mitigation>Never use implicit intents for inter-application communication.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>923</CWE_ID><Name>Improper Restriction of Communication Channel to Intended Endpoints</Name><Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Intent Spoof</Name><Description>An adversary, through a previously installed malicious application, issues an intent directed toward a specific trusted application's component in an attempt to achieve a variety of different objectives including modification of data, information disclosure, and data injection. Components that have been unintentionally exported and made public are subject to this type of an attack. If the component trusts the intent's action without verififcation, then the target application performs the functionality at the adversary's request, helping the adversary achieve the desired negative technical impact.</Description><Mitigations><Mitigation>To limit one's exposure to this type of attack, developers should avoid exporting components unless the component is specifically designed to handle requests from untrusted applications. Developers should be aware that declaring an intent filter will automatically export the component, exposing it to public access. Critical, state-changing actions should not be placed in exported components. If a single component handles both inter- and intra-application requests, the developer should consider dividing that component into separate components. If a component must be exported (e.g., to receive system broadcasts), then the component should dynamically check the caller's identity prior to performing any operations. Requiring Signature or SignatureOrSystem permissions is an effective way of limiting a component's exposure to a set of trusted applications. Finally, the return values of exported components can also leak private data, so developers should check the caller's identity prior to returning sensitive values.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>WebView Exposure</Name><Description>An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface.</Description><Mitigations><Mitigation>To mitigate this type of an attack, an application should limit permissions to only those required and should verify the origin of all web content it loads.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.004</Entry_ID><Entry_Name>Masquerading: Masquerade Task or Service</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Task Impersonation</Name><Description>An adversary, through a previously installed malicious application, impersonates an expected or routine task in an attempt to steal sensitive information or leverage a user's privileges.</Description><Mitigations><Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Scheme Squatting</Name><Description>An adversary, through a previously installed malicious application, registers for a URL scheme intended for a target application that has not been installed. Thereafter, messages intended for the target application are handled by the malicious application. Upon receiving a message, the malicious application displays a screen that mimics the target application, thereby convincing the user to enter sensitive information. This type of attack is most often used to obtain sensitive information (e.g., credentials) from the user as they think that they are interacting with the intended target application.</Description><Mitigations><Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. Applications usually have to declare the schemes they wish to register, so detecting this during a review is feasible.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Tapjacking</Name><Description>An adversary, through a previously installed malicious application, displays an interface that misleads the user and convinces them to tap on an attacker desired location on the screen. This is often accomplished by overlaying one screen on top of another while giving the appearance of a single interface. There are two main techniques used to accomplish this. The first is to leverage transparent properties that allow taps on the screen to pass through the visible application to an application running in the background. The second is to strategically place a small object (e.g., a button or text field) on top of the visible screen and make it appear to be a part of the underlying application. In both cases, the user is convinced to tap on the screen but does not realize the application that they are interacting with.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Physical Theft</Name><Description>An adversary gains physical access to a system or device through theft of the item. Possession of a system or device enables a number of unique attacks to be executed and often provides the adversary with an extended timeframe for which to perform an attack. Most protections put in place to secure sensitive information can be defeated when an adversary has physical access and enough time.</Description><Mitigations><Mitigation>To mitigate this type of attack, physical security techniques such as locks doors, alarms, and monitoring of targets should be implemented.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Shoulder Surfing</Name><Description>In a shoulder surfing attack, an adversary observes an unaware individual's keystrokes, screen content, or conversations with the goal of obtaining sensitive information. One motive for this attack is to obtain sensitive information about the target for financial, personal, political, or other gains. From an insider threat perspective, an additional motive could be to obtain system/application credentials or cryptographic keys. Shoulder surfing attacks are accomplished by observing the content "over the victim's shoulder", as implied by the name of this attack.</Description><Mitigations><Mitigation>Be mindful of your surroundings when discussing or viewing sensitive information in public areas.</Mitigation><Mitigation>Pertaining to insider threats, ensure that sensitive information is not displayed to nor discussed around individuals without need-to-know access to said information.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>359</CWE_ID><Name>Exposure of Private Personal Information to an Unauthorized Actor</Name><Description>The product does not properly prevent a person's private, personal information from being accessed by actors who either (1) are not explicitly authorized to access the information or (2) do not have the implicit consent of the person about whom the information is collected.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1558.003</Entry_ID><Entry_Name>Steal or Forge Kerberos Tickets:Kerberoasting</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Kerberoasting</Name><Description>Through the exploitation of how service accounts leverage Kerberos authentication with Service Principal Names (SPNs), the adversary obtains and subsequently cracks the hashed credentials of a service account target to exploit its privileges. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. As an authenticated user, the adversary may request Active Directory and obtain a service ticket with portions encrypted via RC4 with the private key of the authenticated account. By extracting the local ticket and saving it disk, the adversary can brute force the hashed value to reveal the target account credentials.</Description><Mitigations><Mitigation>Monitor system and domain logs for abnormal access.</Mitigation><Mitigation>Employ a robust password policy for service accounts. Passwords should be of adequate length and complexity, and they should expire after a period of time.</Mitigation><Mitigation>Employ the principle of least privilege: limit service accounts privileges to what is required for functionality and no more.</Mitigation><Mitigation>Enable AES Kerberos encryption (or another stronger encryption algorithm), rather than RC4, where possible.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Poison Web Service Registry</Name><Description>SOA and Web Services often use a registry to perform look up, get schema information, and metadata about services. A poisoned registry can redirect (think phishing for servers) the service requester to a malicious service provider, provide incorrect information in schema or metadata, and delete information about service provider interfaces.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Harden registry server and file access permissions</Mitigation><Mitigation>Implementation: Implement communications to and from the registry using secure protocols</Mitigation></Mitigations><Examples><Example><Reference>WS-Addressing provides location and metadata about the service endpoints. An extremely hard to detect attack is an attacker who updates the WS-Addressing header, leaves the standard service request and service provider addressing and header information intact, but adds an additional WS-Addressing Replyto header. In this case the attacker is able to send a copy (like a cc in mail) of every result the service provider generates. So every query to the bank account service, would generate a reply message of the transaction status to both the authorized service requester and an attacker service. This would be extremely hard to detect at runtime. In this example "evilsite" is an additional reply to address with full access to all the messages that the authorized (validClient) has access to. Since this is registered with ReplyTo header it will not generate a Soap fault.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>SaaS User Request Forgery</Name><Description>An adversary, through a previously installed malicious application, performs malicious actions against a third-party Software as a Service (SaaS) application (also known as a cloud based application) by leveraging the persistent and implicit trust placed on a trusted user's session. This attack is executed after a trusted user is authenticated into a cloud service, "piggy-backing" on the authenticated session, and exploiting the fact that the cloud service believes it is only interacting with the trusted user. If successful, the actions embedded in the malicious application will be processed and accepted by the targeted SaaS application and executed at the trusted user's privilege level.</Description><Mitigations><Mitigation>To limit one's exposure to this type of attack, tunnel communications through a secure proxy service.</Mitigation><Mitigation>Detection of this type of attack can be done through heuristic analysis of behavioral anomalies (a la credit card fraud detection) which can be used to identify inhuman behavioral patterns. (e.g., spidering)</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Infiltration of Software Development Environment</Name><Description>An attacker uses common delivery mechanisms such as email attachments or removable media to infiltrate the IDE (Integrated Development Environment) of a victim manufacturer with the intent of implanting malware allowing for attack control of the victim IDE environment. The attack then uses this access to exfiltrate sensitive data or information, manipulate said data or information, and conceal these actions. This will allow and aid the attack to meet the goal of future compromise of a recipient of the victim's manufactured product further down in the supply chain.</Description><Mitigations><Mitigation>Avoid the common delivery mechanisms of adversaries, such as email attachments, which could introduce the malware.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Hardware Component Substitution During Baselining</Name><Description>An adversary with access to system components during allocated baseline development can substitute a maliciously altered hardware component for a baseline component during the product development and research phases. This can lead to adjustments and calibrations being made in the product so that when the final product, now containing the modified component, is deployed it will not perform as designed and be advantageous to the adversary.</Description><Mitigations><Mitigation>Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.</Mitigation><Mitigation>Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.</Mitigation></Mitigations><Examples><Example><Reference>An adversary supplies the product development facility of a network security device with a hardware component that is used to simulate large volumes of network traffic. The device claims in logs, stats, and via the display panel to be pumping out very large quantities of network traffic, when it is in fact putting out very low volumes. The developed product is adjusted and configured to handle what it believes to be a heavy network load, but when deployed at the victim site the large volumes of network traffic are dropped instead of being processed by the network security device. This allows the adversary an advantage when attacking the victim in that the adversary's presence may not be detected by the device.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Documentation Alteration to Circumvent Dial-down</Name><Description>An attacker with access to a manufacturer's documentation, which include descriptions of advanced technology and/or specific components' criticality, alters the documents to circumvent dial-down functionality requirements. This alteration would change the interpretation of implementation and manufacturing techniques, allowing for advanced technologies to remain in place even though these technologies might be restricted to certain customers, such as nations on the terrorist watch list, giving the attacker on the receiving end of a shipped product access to an advanced technology that might otherwise be restricted.</Description><Mitigations><Mitigation>Digitize documents and cryptographically sign them to verify authenticity.</Mitigation><Mitigation>Password protect documents and make them read-only for unauthorized users.</Mitigation><Mitigation>Avoid emailing important documents and configurations.</Mitigation><Mitigation>Ensure deleted files are actually deleted.</Mitigation><Mitigation>Maintain backups of the document for recovery and verification.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Documentation Alteration to Produce Under-performing Systems</Name><Description>An attacker with access to a manufacturer's documentation alters the descriptions of system capabilities with the intent of causing errors in derived system requirements, impacting the overall effectiveness and capability of the system, allowing an attacker to take advantage of the introduced system capability flaw once the system is deployed.</Description><Mitigations><Mitigation>Digitize documents and cryptographically sign them to verify authenticity.</Mitigation><Mitigation>Password protect documents and make them read-only for unauthorized users.</Mitigation><Mitigation>Avoid emailing important documents and configurations.</Mitigation><Mitigation>Ensure deleted files are actually deleted.</Mitigation><Mitigation>Maintain backups of the document for recovery and verification.</Mitigation><Mitigation>Separate need-to-know information from system configuration information depending on the user.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Documentation Alteration to Cause Errors in System Design</Name><Description>An attacker with access to a manufacturer's documentation containing requirements allocation and software design processes maliciously alters the documentation in order to cause errors in system design. This allows the attacker to take advantage of a weakness in a deployed system of the manufacturer for malicious purposes.</Description><Mitigations><Mitigation>Digitize documents and cryptographically sign them to verify authenticity.</Mitigation><Mitigation>Password protect documents and make them read-only for unauthorized users.</Mitigation><Mitigation>Avoid emailing important documents and configurations.</Mitigation><Mitigation>Ensure deleted files are actually deleted.</Mitigation><Mitigation>Maintain multiple instances of the document across different privileged users for recovery and verification.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>28</Entry_ID><Entry_Name>Null Byte Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Embedding NULL Bytes</Name><Description>An adversary embeds one or more null bytes in input to the target software. This attack relies on the usage of a null-valued byte as a string terminator in many environments. The goal is for certain components of the target software to stop processing the input when it encounters the null byte(s).</Description><Mitigations><Mitigation>Properly handle the NULL characters supplied as part of user input prior to doing anything with the data.</Mitigation></Mitigations><Examples><Example><Reference>Directory Browsing Assume a Web application allows a user to access a set of reports. The path to the reports directory may be something like web/username/reports. If the username is supplied via a hidden field, an adversary could insert a bogus username such as ../../../../../WINDOWS. If the adversary needs to remove the trailing string /reports, then they can simply insert enough characters so the string is truncated. Alternatively the adversary might apply the postfix NULL character (%00) to determine whether this terminates the string. Different forms of NULL to think about include</Reference><Description /></Example><Example><Reference>Exploitation of a buffer overflow vulnerability in the ActiveX component packaged with Adobe Systems Inc.'s Acrobat/Acrobat Reader allows remote adversaries to execute arbitrary code. The problem specifically exists upon retrieving a link of the following form: Where [long string] is a malicious crafted long string containing acceptable URI characters. The request must be made to a web server that truncates the request at the null byte (%00), otherwise an invalid file name is specified and a "file not found" page will be returned. Example web servers that truncate the requested URI include Microsoft IIS and Netscape Enterprise. Though the requested URI is truncated for the purposes of locating the file the long string is still passed to the Adobe ActiveX component responsible for rendering the page. This in turn triggers a buffer overflow within RTLHeapFree() allowing for an adversary to overwrite an arbitrary word in memory. The responsible instructions from RTLHeapFree() are shown here: The register EDI contains a pointer to a user-supplied string. The adversary therefore has control over both the ECX and EAX registers used in the shown MOV instruction. Successful exploitation allows remote adversaries to utilize the arbitrary word overwrite to redirect the flow of control and eventually take control of the affected system. Code execution will occur under the context of the user that instantiated the vulnerable version of Adobe Acrobat. An adversary does not need to establish a malicious web site as exploitation can occur by adding malicious content to the end of any embedded link and referencing any Microsoft IIS or Netscape Enterprise web server. Clicking on a direct malicious link is also not required as it may be embedded within an IMAGE tag, an IFRAME or an auto-loading script. Successful exploitation requires that a payload be written such that certain areas of the input are URI acceptable. This includes initial injected instructions as well as certain overwritten addresses. This increases the complexity of successful exploitation. While not trivial, exploitation is definitely plausible [REF-445].</Reference><Description /></Example><Example><Reference>Consider the following PHP script: A malicious adversary might open the following URL, disclosing the boot.ini file:</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>158</CWE_ID><Name>Improper Neutralization of Null Byte or NUL Character</Name><Description>Null byte bypasses PHP regexp check (interaction error).</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Counterfeit Hardware Component Inserted During Product Assembly</Name><Description>An adversary with either direct access to the product assembly process or to the supply of subcomponents used in the product assembly process introduces counterfeit hardware components into product assembly. The assembly containing the counterfeit components results in a system specifically designed for malicious purposes.</Description><Mitigations><Mitigation>Hardware attacks are often difficult to detect, as inserted components can be difficult to identify or remain dormant for an extended period of time.</Mitigation><Mitigation>Acquire hardware and hardware components from trusted vendors. Additionally, determine where vendors purchase components or if any components are created/acquired via subcontractors to determine where supply chain risks may exist.</Mitigation></Mitigations><Examples><Example><Reference>A manufacturer of a firewall system requires a hardware card which functions as a multi-jack ethernet card with four ethernet ports. The adversary constructs a counterfeit card that functions normally except that packets from the adversary's network are allowed to bypass firewall processing completely. Once deployed at a victim location, this allows the adversary to bypass the firewall unrestricted.</Reference><Description /></Example><Example><Reference>In 2018 it was discovered that Chinese spies infiltrated several U.S. government agencies and corporations as far back as 2015 by including a malicious microchip within the motherboard of servers sold by Elemental Technologies to the victims. Although these servers were assembled via a U.S. based company, the motherboards used within the servers were manufactured and maliciously altered via a Chinese subcontractor. Elemental Technologies then sold these malicious servers to various U.S. government agencies, such as the DoD and CIA, and corporations like Amazon and Apple. The malicious microchip provided adversaries with a backdoor into the system, which further allowed them to access any network that contained the exploited systems, to exfiltrate data to be sent to the Chinese government.[REF-713]</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Hardware Design Specifications Are Altered</Name><Description>An attacker with access to a manufacturer's hardware manufacturing process documentation alters the design specifications, which introduces flaws advantageous to the attacker once the system is deployed.</Description><Mitigations><Mitigation>Digitize documents and cryptographically sign them to verify authenticity.</Mitigation><Mitigation>Password protect documents and make them read-only for unauthorized users.</Mitigation><Mitigation>Avoid emailing important documents and configurations.</Mitigation><Mitigation>Ensure deleted files are actually deleted.</Mitigation><Mitigation>Maintain backups of the document for recovery and verification.</Mitigation><Mitigation>Separate need-to-know information from system configuration information depending on the user.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Hardware Component Replacement</Name><Description>An adversary replaces legitimate hardware in the system with faulty counterfeit or tampered hardware in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.</Description><Mitigations><Mitigation>Ensure that all contractors and sub-suppliers use trusted means of shipping (e.g., bonded/cleared/vetted and insured couriers) to ensure that components, once purchased, are not subject to compromise during their delivery.</Mitigation><Mitigation>Prevent or detect tampering with critical hardware or firmware components while in transit through use of state-of-the-art anti-tamper devices.</Mitigation><Mitigation>Use tamper-resistant and tamper-evident packaging when shipping critical components (e.g., plastic coating for circuit boards, tamper tape, paint, sensors, and/or seals for cases and containers) and inspect received system components for evidence of tampering.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Software Implanted</Name><Description>An attacker implants malicious software into the system in the supply chain distribution channel, with purpose of causing malicious disruption or allowing for additional compromise when the system is deployed.</Description><Mitigations><Mitigation>Deploy strong code integrity policies to allow only authorized apps to run.</Mitigation><Mitigation>Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.</Mitigation><Mitigation>Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.</Mitigation><Mitigation>Require SSL for update channels and implement certificate transparency based verification.</Mitigation><Mitigation>Sign everything, including configuration files, XML files and packages.</Mitigation><Mitigation>Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Rogue Integration Procedures</Name><Description>An attacker alters or establishes rogue processes in an integration facility in order to insert maliciously altered components into the system. The attacker would then supply the malicious components. This would allow for malicious disruption or additional compromise when the system is deployed.</Description><Mitigations><Mitigation>Deploy strong code integrity policies to allow only authorized apps to run.</Mitigation><Mitigation>Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.</Mitigation><Mitigation>Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.</Mitigation><Mitigation>Require SSL for update channels and implement certificate transparency based verification.</Mitigation><Mitigation>Sign everything, including configuration files, XML files and packages.</Mitigation><Mitigation>Develop an incident response process, disclose supply chain incidents and notify customers with accurate and timely information.</Mitigation><Mitigation>Maintain strong physical system access controls and monitor networks and physical facilities for insider threats.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.002</Entry_ID><Entry_Name>Endpoint Denial of Service:Service Exhaustion Flood</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1498.001</Entry_ID><Entry_Name>Network Denial of Service:Direct Network Flood</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>XML Flood</Name><Description>An adversary may execute a flooding attack using XML messages with the intent to deny legitimate users access to a web service. These attacks are accomplished by sending a large number of XML based requests and letting the service attempt to parse each one. In many cases this type of an attack will result in a XML Denial of Service (XDoS) due to an application becoming unstable, freezing, or crashing.</Description><Mitigations><Mitigation>Design: Build throttling mechanism into the resource allocation. Provide for a timeout mechanism for allocated resources whose transaction does not complete within a specified interval.</Mitigation><Mitigation>Implementation: Provide for network flow control and traffic shaping to control access to the resources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>770</CWE_ID><Name>Allocation of Resources Without Limits or Throttling</Name><Description>Go-based workload orchestrator does not limit resource usage with unauthenticated connections, allowing a DoS by flooding the service</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Malware-Directed Internal Reconnaissance</Name><Description>Adversary uses malware or a similarly controlled application installed inside an organizational perimeter to gather information about the composition, configuration, and security mechanisms of a targeted application, system or network.</Description><Mitigations><Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation><Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Postfix, Null Terminate, and Backslash</Name><Description>If a string is passed through a filter of some kind, then a terminal NULL may not be valid. Using alternate representation of NULL allows an adversary to embed the NULL mid-string while postfixing the proper data so that the filter is avoided. One example is a filter that looks for a trailing slash character. If a string insertion is possible, but the slash must exist, an alternate encoding of NULL in mid-string may be used.</Description><Mitigations><Mitigation>Properly handle Null characters. Make sure canonicalization is properly applied. Do not pass Null characters to the underlying APIs.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</Mitigation></Mitigations><Examples><Example><Reference>A rather simple injection is possible in a URL: This attack has appeared with regularity in the wild. There are many variations of this kind of attack. Spending a short amount of time injecting against Web applications will usually result in a new exploit being discovered.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>158</CWE_ID><Name>Improper Neutralization of Null Byte or NUL Character</Name><Description>Null byte bypasses PHP regexp check (interaction error).</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Provide Counterfeit Component</Name><Description>An attacker provides a counterfeit component during the procurement process of a lower-tier component supplier to a sub-system developer or integrator, which is then built into the system being upgraded or repaired by the victim, allowing the attacker to cause disruption or additional compromise.</Description><Mitigations><Mitigation>There are various methods to detect if the component is a counterfeit. See section II of [REF-703] for many techniques.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Hardware Component Substitution</Name><Description>An attacker substitutes out a tested and approved hardware component for a maliciously-altered hardware component. This type of attack is carried out directly on the system, enabling the attacker to then cause disruption or additional compromise.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1495</Entry_ID><Entry_Name>Firmware Corruption</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1542.001</Entry_ID><Entry_Name>Pre-OS Boot:System Firmware</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Altered Installed BIOS</Name><Description>An attacker with access to download and update system software sends a maliciously altered BIOS to the victim or victim supplier/integrator, which when installed allows for future exploitation.</Description><Mitigations><Mitigation>Deploy strong code integrity policies to allow only authorized apps to run.</Mitigation><Mitigation>Use endpoint detection and response solutions that can automaticalkly detect and remediate suspicious activities.</Mitigation><Mitigation>Maintain a highly secure build and update infrastructure by immediately applying security patches for OS and software, implementing mandatory integrity controls to ensure only trusted tools run, and requiring multi-factor authentication for admins.</Mitigation><Mitigation>Require SSL for update channels and implement certificate transparency based verification.</Mitigation><Mitigation>Sign update packages and BIOS patches.</Mitigation><Mitigation>Use hardware security modules/trusted platform modules to verify authenticity using hardware-based cryptography.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Malicious Manual Software Update</Name><Description>An attacker introduces malicious code to the victim's system by altering the payload of a software update, allowing for additional compromise or site disruption at the victim location. These manual, or user-assisted attacks, vary from requiring the user to download and run an executable, to as streamlined as tricking the user to click a URL. Attacks which aim at penetrating a specific network infrastructure often rely upon secondary attack methods to achieve the desired impact. Spamming, for example, is a common method employed as an secondary attack vector. Thus the attacker has in their arsenal a choice of initial attack vectors ranging from traditional SMTP/POP/IMAP spamming and its varieties, to web-application mechanisms which commonly implement both chat and rich HTML messaging within the user interface.</Description><Mitigations><Mitigation>Only accept software updates from an official source.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Malicious Hardware Update</Name><Description>An adversary introduces malicious hardware during an update or replacement procedure, allowing for additional compromise or site disruption at the victim location. After deployment, it is not uncommon for upgrades and replacements to occur involving hardware and various replaceable parts. These upgrades and replacements are intended to correct defects, provide additional features, and to replace broken or worn-out parts. However, by forcing or tricking the replacement of a good component with a defective or corrupted component, an adversary can leverage known defects to obtain a desired malicious impact.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Malicious Gray Market Hardware</Name><Description>An attacker maliciously alters hardware components that will be sold on the gray market, allowing for victim disruption and compromise when the victim needs replacement hardware components for systems where the parts are no longer in regular supply from original suppliers, or where the hardware components from the attacker seems to be a great benefit from a cost perspective.</Description><Mitigations><Mitigation>Purchase only from authorized resellers.</Mitigation><Mitigation>Validate serial numbers from multiple sources</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Data Injected During Configuration</Name><Description>An attacker with access to data files and processes on a victim's system injects malicious data into critical operational data during configuration or recalibration, causing the victim's system to perform in a suboptimal manner that benefits the adversary.</Description><Mitigations><Mitigation>Ensure that proper access control is implemented on all systems to prevent unauthorized access to system files and processes.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Infiltration of Hardware Development Environment</Name><Description>An adversary, leveraging the ability to manipulate components of primary support systems and tools within the development and production environments, inserts malicious software within the hardware and/or firmware development environment. The infiltration purpose is to alter developed hardware components in a system destined for deployment at the victim's organization, for the purpose of disruption or further compromise.</Description><Mitigations><Mitigation>Verify software downloads and updates to ensure they have not been modified be adversaries</Mitigation><Mitigation>Leverage antivirus tools to detect known malware</Mitigation><Mitigation>Do not download software from untrusted sources</Mitigation><Mitigation>Educate designers, developers, engineers, etc. on social engineering attacks to avoid downloading malicious software via attacks such as phishing attacks</Mitigation></Mitigations><Examples><Example><Reference>The adversary, knowing the manufacturer runs email on a system adjacent to the hardware development systems used for hardware and/or firmware design, sends a phishing email with a malicious attachment to the manufacturer. When viewed, the malicious attachment installs a backdoor that allows the adversary to remotely compromise the adjacent hardware development system from the manufacturer's workstation. The adversary is then able to exfiltrate and alter sensitive data on the hardware system, allowing for future compromise once the developed system is deployed at the victim location.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Software Dependencies and Development Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Open-Source Library Manipulation</Name><Description>Adversaries implant malicious code in open source software (OSS) libraries to have it widely distributed, as OSS is commonly downloaded by developers and other users to incorporate into software development projects. The adversary can have a particular system in mind to target, or the implantation can be the first stage of follow-on attacks on many systems.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>ASIC With Malicious Functionality</Name><Description>An attacker with access to the development environment process of an application-specific integrated circuit (ASIC) for a victim system being developed or maintained after initial deployment can insert malicious functionality into the system for the purpose of disruption or further compromise.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Query System for Information</Name><Description>An adversary, aware of an application's location (and possibly authorized to use the application), probes an application's structure and evaluates its robustness by submitting requests and examining responses. Often, this is accomplished by sending variants of expected queries in the hope that these modified queries might return information beyond what the expected set of queries would provide.</Description><Mitigations><Mitigation>Application designers can construct a 'code book' for error messages. When using a code book, application error messages aren't generated in string or stack trace form, but are cataloged and replaced with a unique (often integer-based) value 'coding' for the error. Such a technique will require helpdesk and hosting personnel to use a 'code book' or similar mapping to decode application errors/logs in order to respond to them normally.</Mitigation><Mitigation>Application designers can wrap application functionality (preferably through the underlying framework) in an output encoding scheme that obscures or cleanses error messages to prevent such attacks. Such a technique is often used in conjunction with the above 'code book' suggestion.</Mitigation></Mitigations><Examples><Example><Reference>Attacker sends bad data at various servlets in a J2EE system, records returned exception stack traces, and maps application functionality. In addition, this technique allows attackers to correlate those servlets used with the underlying open source packages (and potentially version numbers) that provide them.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>209</CWE_ID><Name>Generation of Error Message Containing Sensitive Information</Name><Description>SSH password for private key stored in build log</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Overread Buffers</Name><Description>An adversary attacks a target by providing input that causes an application to read beyond the boundary of a defined buffer. This typically occurs when a value influencing where to start or stop reading is set to reflect positions outside of the valid memory location of the buffer. This type of attack may result in exposure of sensitive information, a system crash, or arbitrary code execution.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>125</CWE_ID><Name>Out-of-bounds Read</Name><Description>OS kernel trusts userland-supplied length value, allowing reading of sensitive information</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1592.002</Entry_ID><Entry_Name>Gather Victim Host Information: Software</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Application Fingerprinting</Name><Description>An adversary engages in fingerprinting activities to determine the type or version of an application installed on a remote target.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>204</CWE_ID><Name>Observable Response Discrepancy</Name><Description>FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.</Description></Weakness><Weakness><CWE_ID>205</CWE_ID><Name>Observable Behavioral Discrepancy</Name><Description>Behavioral infoleak by responding to SYN-FIN packets.</Description></Weakness><Weakness><CWE_ID>208</CWE_ID><Name>Observable Timing Discrepancy</Name><Description>Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1587.001</Entry_ID><Entry_Name>Develop Capabilities: Malware</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027</Entry_ID><Entry_Name>Obfuscated Files or Information</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Targeted Malware</Name><Description>An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.005</Entry_ID><Entry_Name>Masquerading: Match Legitimate Name or Location</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Counterfeit Websites</Name><Description>Adversary creates duplicates of legitimate websites. When users visit a counterfeit site, the site can gather information or upload malware.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Counterfeit Organizations</Name><Description>An adversary creates a false front organizations with the appearance of a legitimate supplier in the critical life cycle path that then injects corrupted/malicious information system components into the organizational supply chain.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1005</Entry_ID><Entry_Name>Data from Local System</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1555.001</Entry_ID><Entry_Name>Credentials from Password Stores:Keychain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Pull Data from System Resources</Name><Description>An adversary who is authorized or has the ability to search known system resources, does so with the intention of gathering useful information. System resources include files, memory, and other aspects of the target system. In this pattern of attack, the adversary does not necessarily know what they are going to find when they start pulling data. This is different than CAPEC-150 where the adversary knows what they are looking for due to the common location.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1239</CWE_ID><Name>Improper Zeroization of Hardware Register</Name><Description>The hardware product does not properly clear sensitive information from built-in registers when the user of the hardware block changes.</Description></Weakness><Weakness><CWE_ID>1243</CWE_ID><Name>Sensitive Non-Volatile Information Not Protected During Debug</Name><Description>Access to security-sensitive information stored in fuses is not limited during debug.</Description></Weakness><Weakness><CWE_ID>1258</CWE_ID><Name>Exposure of Sensitive System Information Due to Uncleared Debug Information</Name><Description>Rust library leaks Oauth client details in application debug logs</Description></Weakness><Weakness><CWE_ID>1266</CWE_ID><Name>Improper Scrubbing of Sensitive Data from Decommissioned Device</Name><Description>The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.</Description></Weakness><Weakness><CWE_ID>1272</CWE_ID><Name>Sensitive Information Uncleared Before Debug/Power State Transition</Name><Description>Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.</Description></Weakness><Weakness><CWE_ID>1278</CWE_ID><Name>Missing Protection Against Hardware Reverse Engineering Using Integrated Circuit (IC) Imaging Techniques</Name><Description>Information stored in hardware may be recovered by an attacker with the capability to capture and analyze images of the integrated circuit using techniques such as scanning electron microscopy.</Description></Weakness><Weakness><CWE_ID>1323</CWE_ID><Name>Improper Management of Sensitive Trace Data</Name><Description>Trace data collected from several sources on the
                System-on-Chip (SoC) is stored in unprotected locations or
                transported to untrusted agents.</Description></Weakness><Weakness><CWE_ID>1258</CWE_ID><Name>Exposure of Sensitive System Information Due to Uncleared Debug Information</Name><Description>Rust library leaks Oauth client details in application debug logs</Description></Weakness><Weakness><CWE_ID>1330</CWE_ID><Name>Remanent Data Readable after Memory Erase</Name><Description>Firmware Data Deletion Vulnerability in which a base station factory reset might not delete all user information. The impact of this enables a new owner of a used device that has been "factory-default reset" with a vulnerable firmware version can still retrieve, at least, the previous owner's wireless network name, and the previous owner's wireless security (such as WPA2) key. This issue was addressed with improved, data deletion.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Incomplete Data Deletion in a Multi-Tenant Environment</Name><Description>An adversary obtains unauthorized information due to insecure or incomplete data deletion in a multi-tenant environment. If a cloud provider fails to completely delete storage and data from former cloud tenants' systems/resources, once these resources are allocated to new, potentially malicious tenants, the latter can probe the provided resources for sensitive information still there.</Description><Mitigations><Mitigation>Cloud providers should completely delete data to render it irrecoverable and inaccessible from any layer and component of infrastructure resources.</Mitigation><Mitigation>Deletion of data should be completed promptly when requested.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness><Weakness><CWE_ID>1266</CWE_ID><Name>Improper Scrubbing of Sensitive Data from Decommissioned Device</Name><Description>The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.</Description></Weakness><Weakness><CWE_ID>1272</CWE_ID><Name>Sensitive Information Uncleared Before Debug/Power State Transition</Name><Description>Product software does not set a flag as per TPM specifications, thereby preventing a failed authorization attempt from being recorded after a loss of power.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Physical Destruction of Device or Component</Name><Description>An adversary conducts a physical attack a device or component, destroying it such that it no longer functions as intended.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Contaminate Resource</Name><Description>An adversary contaminates organizational information systems (including devices and networks) by causing them to handle information of a classification/sensitivity for which they have not been authorized. When this happens, the contaminated information system, device, or network must be brought offline to investigate and mitigate the data spill, which denies availability of the system until the investigation is complete.</Description><Mitigations><Mitigation>Properly safeguard classified/sensitive data. This includes training cleared individuals to ensure they are handling and disposing of this data properly, as well as ensuring systems only handle information of the classification level they are designed for.</Mitigation><Mitigation>Design systems with redundancy in mind. This could mean creating backing servers that could be switched over to in the event that a server has to be taken down for investigation.</Mitigation><Mitigation>Have a planned and efficient response plan to limit the amount of time a system is offline while the contamination is investigated.</Mitigation></Mitigations><Examples><Example><Reference>An insider threat was able to obtain a classified document. They have knowledge that a backend server which provides access to a website also runs a mail server. The adversary creates a throwaway email address and sends the classified document to the mail server. When an administrator checks the mail server they notice that it has processed an email with a classified document and the server has to be taken offline while they investigate the contamination. In the meantime, the website has to be taken down as well and access to the website is denied until the backend can be migrated to another server or the investigation is complete.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Local Execution of Code</Name><Description>An adversary installs and executes malicious code on the target system in an effort to achieve a negative technical impact. Examples include rootkits, ransomware, spyware, adware, and others.</Description><Mitigations><Mitigation>Employ robust cybersecurity training for all employees.</Mitigation><Mitigation>Implement system antivirus software that scans all attachments before opening them.</Mitigation><Mitigation>Regularly patch all software.</Mitigation><Mitigation>Execute all suspicious files in a sandbox environment.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1110.002</Entry_ID><Entry_Name>Brute Force:Password Cracking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Rainbow Table Password Cracking</Name><Description>An attacker gets access to the database table where hashes of passwords are stored. They then use a rainbow table of pre-computed hash chains to attempt to look up the original password. Once the original password corresponding to the hash is obtained, the attacker uses the original password to gain access to the system.</Description><Mitigations><Mitigation>Use salt when computing password hashes. That is, concatenate the salt (random bits) with the original password prior to hashing it.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>261</CWE_ID><Name>Weak Encoding for Password</Name><Description>Obscuring a password with a trivial encoding does not protect the password.</Description></Weakness><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>916</CWE_ID><Name>Use of Password Hash With Insufficient Computational Effort</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1543</Entry_ID><Entry_Name>Create or Modify System Process</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Install New Service</Name><Description>When an operating system starts, it also starts programs called services or daemons. Adversaries may install a new service which will be executed at startup (on a Windows system, by modifying the registry). The service name may be disguised by using a name from a related operating system or benign software. Services are usually run with elevated privileges.</Description><Mitigations><Mitigation>Limit privileges of user accounts so new service creation can only be performed by authorized administrators.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1543</Entry_ID><Entry_Name>Create or Modify System Process</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Modify Existing Service</Name><Description>When an operating system starts, it also starts programs called services or daemons. Modifying existing services may break existing services or may enable services that are disabled/not commonly used.</Description><Mitigations><Mitigation>Limit privileges of user accounts so service changes can only be performed by authorized administrators. Also monitor any service changes that may occur inadvertently.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1014</Entry_ID><Entry_Name>Rootkit</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1542.003</Entry_ID><Entry_Name>Pre-OS Boot:Bootkit</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1547.006</Entry_ID><Entry_Name>Boot or Logon Autostart Execution:Kernel Modules and Extensions</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Install Rootkit </Name><Description>An adversary exploits a weakness in authentication to install malware that alters the functionality and information provide by targeted operating system API calls. Often referred to as rootkits, it is often used to hide the presence of programs, files, network connections, services, drivers, and other system components.</Description><Mitigations><Mitigation>Prevent adversary access to privileged accounts necessary to install rootkits.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Functionality Bypass</Name><Description>An adversary attacks a system by bypassing some or all functionality intended to protect it. Often, a system user will think that protection is in place, but the functionality behind those protections has been disabled by the adversary.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>424</CWE_ID><Name>Improper Protection of Alternate Path</Name><Description>Access-control setting in web-based document collaboration tool is not properly implemented by the code, which prevents listing hidden directories but does not prevent direct requests to files in those directories.</Description></Weakness><Weakness><CWE_ID>1299</CWE_ID><Name>Missing Protection Mechanism for Alternate Hardware Interface</Name><Description>monitor device allows access to physical UART debug port without authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1021</Entry_ID><Entry_Name>Remote Services</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1114.002</Entry_ID><Entry_Name>Email Collection:Remote Email Collection</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1133</Entry_ID><Entry_Name>External Remote Services</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Remote Services with Stolen Credentials</Name><Description>This pattern of attack involves an adversary that uses stolen credentials to leverage remote services such as RDP, telnet, SSH, and VNC to log into a system. Once access is gained, any number of malicious activities could be performed.</Description><Mitigations><Mitigation>Disable RDP, telnet, SSH and enable firewall rules to block such traffic. Limit users and accounts that have remote interactive login access. Remove the Local Administrators group from the list of groups allowed to login through RDP. Limit remote user permissions. Use remote desktop gateways and multifactor authentication for remote logins.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1546.001</Entry_ID><Entry_Name>Event Triggered Execution:Change Default File Association</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Replace File Extension Handlers</Name><Description>When a file is opened, its file handler is checked to determine which program opens the file. File handlers are configuration properties of many operating systems. Applications can modify the file handler for a given file extension to call an arbitrary program when a file with the given extension is opened.</Description><Mitigations><Mitigation>Inspect registry for changes. Limit privileges of user accounts so changes to default file handlers can only be performed by authorized administrators.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Schedule Software To Run</Name><Description>This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1505.005</Entry_ID><Entry_Name>Server Software Component: Terminal Services DLL</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1546.008</Entry_ID><Entry_Name>Event Triggered Execution: Accessibility Features</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Replace Trusted Executable</Name><Description>An adversary exploits weaknesses in privilege management or access control to replace a trusted executable with a malicious version and enable the execution of malware when that trusted executable is called.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Orbital Jamming</Name><Description>In this attack pattern, the adversary sends disruptive signals at a target satellite using a rogue uplink station to disrupt the intended transmission. Those within the satellite's footprint are prevented from reaching the satellite's targeted or neighboring channels. The satellite's footprint size depends upon its position in the sky; higher orbital satellites cover multiple continents.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Removing/short-circuiting 'guard logic'</Name><Description>This attack pattern has been deprecated as it is a duplicate of CAPEC-207 : Removing Important Client Functionality. Please refer to this other pattern going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1078</Entry_ID><Entry_Name>Valid Accounts</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Use of Known Domain Credentials</Name><Description>
            </Description><Mitigations><Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation><Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation><Mitigation>Ensure users are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation><Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation><Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation><Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation><Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation><Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>1273</CWE_ID><Name>Device Unlock Credential Sharing</Name><Description>The credentials necessary for unlocking a device are shared across multiple parties and may expose sensitive information.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1021.002</Entry_ID><Entry_Name>Remote Services:SMB/Windows Admin Shares</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Windows Admin Shares with Stolen Credentials</Name><Description>An adversary guesses or obtains (i.e. steals or purchases) legitimate Windows administrator credentials (e.g. userID/password) to access Windows Admin Shares on a local machine or within a Windows domain.</Description><Mitigations><Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation><Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation><Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1080</Entry_ID><Entry_Name>Taint shared content</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Modify Shared File</Name><Description>An adversary manipulates the files in a shared location by adding malicious programs, scripts, or exploit code to valid content. Once a user opens the shared content, the tainted content is executed.</Description><Mitigations><Mitigation>Disallow shared content. Protect shared folders by minimizing users that have write access. Use utilities that mitigate exploitation like the Microsoft Enhanced Mitigation Experience Toolkit (EMET) to prevent exploits from being run.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Add Malicious File to Shared Webroot</Name><Description>An adversaries may add malicious content to a website through the open file share and then browse to that content with a web browser to cause the server to execute the content. The malicious content will typically run under the context and permissions of the web server process, often resulting in local system or administrative privileges depending on how the web server is configured.</Description><Mitigations><Mitigation>Ensure proper permissions on directories that are accessible through a web server. Disallow remote access to the web root. Disable execution on directories within the web root. Ensure that permissions of the web server process are only what is required by not using built-in accounts and instead create specific accounts to limit unnecessary access or permissions overlap across multiple systems.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1037</Entry_ID><Entry_Name>Boot or Logon Initialization Scripts</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1543.001</Entry_ID><Entry_Name>Create or Modify System Process: Launch Agent</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1543.004</Entry_ID><Entry_Name>Create or Modify System Process: Launch Daemon</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1547</Entry_ID><Entry_Name>Boot or Logon Autostart Execution</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Run Software at Logon</Name><Description>Operating system allows logon scripts to be run whenever a specific user or users logon to a system. If adversaries can access these scripts, they may insert additional code into the logon script. This code can allow them to maintain persistence or move laterally within an enclave because it is executed every time the affected user or users logon to a computer. Modifying logon scripts can effectively bypass workstation and enclave firewalls. Depending on the access configuration of the logon scripts, either local credentials or a remote administrative account may be necessary.</Description><Mitigations><Mitigation>Restrict write access to logon scripts to necessary administrators.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1110.003</Entry_ID><Entry_Name>Brute Force:Password Spraying</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Password Spraying</Name><Description>
            </Description><Mitigations><Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation><Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation><Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Dump Password Hashes</Name><Description>This CAPEC has been deprecated because of is not directly related to a weakness, social engineering, supply chains, or a physical-based attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Obtain Data via Utilities</Name><Description>This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1056.001</Entry_ID><Entry_Name>Input Capture:Keylogging</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Capture Credentials via Keylogger</Name><Description>An adversary deploys a keylogger in an effort to obtain credentials directly from a system's user. After capturing all the keystrokes made by a user, the adversary can analyze the data and determine which string are likely to be passwords or other credential related information.</Description><Mitigations><Mitigation>Strong physical security can help reduce the ability of an adversary to install a keylogger.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1056</Entry_ID><Entry_Name>Input Capture</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Collect Data as Provided by Users</Name><Description>An attacker leverages a tool, device, or program to obtain specific information as provided by a user of the target system. This information is often needed by the attacker to launch a follow-on attack. This attack is different than Social Engineering as the adversary is not tricking or deceiving the user. Instead the adversary is putting a mechanism in place that captures the information that a user legitimately enters into a system. Deploying a keylogger, performing a UAC prompt, or wrapping the Windows default credential provider are all examples of such interactions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1040</Entry_ID><Entry_Name>Network Sniffing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Utilizing REST's Trust in the System Resource to Obtain Sensitive Data</Name><Description>This attack utilizes a REST(REpresentational State Transfer)-style applications' trust in the system resources and environment to obtain sensitive data once SSL is terminated.</Description><Mitigations><Mitigation>Implementation: Implement message level security such as HMAC in the HTTP communication</Mitigation><Mitigation>Design: Utilize defense in depth, do not rely on a single security mechanism like SSL</Mitigation><Mitigation>Design: Enforce principle of least privilege</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Signature-Based Avoidance</Name><Description>This CAPEC has been deprecated because it is not directly related to a weakness, social engineering, supply chains, or a physical-based attack.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.002</Entry_ID><Entry_Name>Impair Defenses: Disable Windows Event Logging</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.002</Entry_ID><Entry_Name>Impair Defenses: Impair Command History Logging</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.006</Entry_ID><Entry_Name>Impair Defenses: Indicator Blocking</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.008</Entry_ID><Entry_Name>Impair Defenses: Disable Cloud Logs</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Block Logging to Central Repository</Name><Description>
            </Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.001</Entry_ID><Entry_Name>Obfuscated Files or Information:Binary Padding</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Artificially Inflate File Sizes</Name><Description>
            </Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>An adversary could potentially increase file sizes on devices containing limited storage resources, such as SCADA or IOT devices, resulting in denial of service conditions.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1057</Entry_ID><Entry_Name>Process Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Process Footprinting</Name><Description>An adversary exploits functionality meant to identify information about the currently running processes on the target system to an authorized user. By knowing what processes are running on the target system, the adversary can learn about the target environment as a means towards further malicious behavior.</Description><Mitigations><Mitigation>Identify programs that may be used to acquire process information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1007</Entry_ID><Entry_Name>System Service Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Services Footprinting</Name><Description>An adversary exploits functionality meant to identify information about the services on the target system to an authorized user. By knowing what services are registered on the target system, the adversary can learn about the target environment as a means towards further malicious behavior. Depending on the operating system, commands that can obtain services information include "sc" and "tasklist/svc" using Tasklist, and "net start" using Net.</Description><Mitigations><Mitigation>Identify programs that may be used to acquire service information and block them by using a software restriction policy or tools that restrict program execution by uaing a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1087</Entry_ID><Entry_Name>Account Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Account Footprinting</Name><Description>An adversary exploits functionality meant to identify information about the domain accounts and their permissions on the target system to an authorized user. By knowing what accounts are registered on the target system, the adversary can inform further and more targeted malicious behavior. Example Windows commands which can acquire this information are: "net user" and "dsquery".</Description><Mitigations><Mitigation>Identify programs that may be used to acquire account information and block them by using a software restriction policy or tools that restrict program execution by uysing a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1069</Entry_ID><Entry_Name>Permission Groups Discovery</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1615</Entry_ID><Entry_Name>Group Policy Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Group Permission Footprinting</Name><Description>An adversary exploits functionality meant to identify information about user groups and their permissions on the target system to an authorized user. By knowing what users/permissions are registered on the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command which can list local groups is "net localgroup".</Description><Mitigations><Mitigation>Identify programs (such as "net") that may be used to enumerate local group permissions and block them by using a software restriction Policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1033</Entry_ID><Entry_Name>System Owner/User Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Owner Footprinting</Name><Description>An adversary exploits functionality meant to identify information about the primary users on the target system to an authorized user. They may do this, for example, by reviewing logins or file modification times. By knowing what owners use the target system, the adversary can inform further and more targeted malicious behavior. An example Windows command that may accomplish this is "dir /A ntuser.dat". Which will display the last modified time of a user's ntuser.dat file when run within the root folder of a user. This time is synonymous with the last time that user was logged in.</Description><Mitigations><Mitigation>Ensure that proper permissions on files and folders are enacted to limit accessibility.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1556.006</Entry_ID><Entry_Name>Modify Authentication Process: Multi-Factor Authentication</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.001</Entry_ID><Entry_Name>Impair Defenses: Disable or Modify Tools</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.002</Entry_ID><Entry_Name>Impair Defenses: Disable Windows Event Logging</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.004</Entry_ID><Entry_Name>Impair Defenses: Disable or Modify System Firewall</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.007</Entry_ID><Entry_Name>Impair Defenses: Disable or Modify Cloud Firewall</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.008</Entry_ID><Entry_Name>Impair Defenses: Disable Cloud Logs</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1562.009</Entry_ID><Entry_Name>Impair Defenses: Safe Mode Boot</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Disable Security Software</Name><Description>An adversary exploits a weakness in access control to disable security tools so that detection does not occur. This can take the form of killing processes, deleting registry keys so that tools do not start at run time, deleting log files, or other methods.</Description><Mitigations><Mitigation>Ensure proper permissions are in place to prevent adversaries from altering the execution status of security tools.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>284</CWE_ID><Name>Improper Access Control</Name><Description>Bulletin board applies restrictions on number of images during post creation, but does not enforce this on editing.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1547.004</Entry_ID><Entry_Name>Boot or Logon Autostart Execution: Winlogon helper DLL</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Replace Winlogon Helper DLL</Name><Description>Winlogon is a part of Windows that performs logon actions. In Windows systems prior to Windows Vista, a registry key can be modified that causes Winlogon to load a DLL on startup. Adversaries may take advantage of this feature to load adversarial code at startup.</Description><Mitigations><Mitigation>Changes to registry entries in "HKLM\Software\Microsoft\Windows NT\Winlogon\Notify" that do not correlate with known software, patch cycles, etc are suspicious. New DLLs written to System32 which do not correlate with known good software or patching may be suspicious.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Restful Privilege Elevation</Name><Description>An adversary identifies a Rest HTTP (Get, Put, Delete) style permission method allowing them to perform various malicious actions upon server data due to lack of access control mechanisms implemented within the application service accepting HTTP messages.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Implementation: Ensure that HTTP Get methods only retrieve state and do not alter state on the server side</Mitigation><Mitigation>Implementation: Ensure that HTTP methods have proper ACLs based on what the functionality they expose</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>267</CWE_ID><Name>Privilege Defined With Unsafe Actions</Name><Description>Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).</Description></Weakness><Weakness><CWE_ID>269</CWE_ID><Name>Improper Privilege Management</Name><Description>User with capability can prevent setuid program from dropping privileges (Unsafe privileged actions).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1082</Entry_ID><Entry_Name>System Information Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>System Footprinting</Name><Description>An adversary engages in active probing and exploration activities to determine security information about a remote target system. Often times adversaries will rely on remote applications that can be probed for system configurations.</Description><Mitigations><Mitigation>Keep patches up to date by installing weekly or daily if possible.</Mitigation><Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>204</CWE_ID><Name>Observable Response Discrepancy</Name><Description>FTP server generates an error message if the user name does not exist instead of prompting for a password, which allows remote attackers to determine valid usernames.</Description></Weakness><Weakness><CWE_ID>205</CWE_ID><Name>Observable Behavioral Discrepancy</Name><Description>Behavioral infoleak by responding to SYN-FIN packets.</Description></Weakness><Weakness><CWE_ID>208</CWE_ID><Name>Observable Timing Discrepancy</Name><Description>Browser allows remote attackers to determine the existence of arbitrary files by setting the src property to the target filename and using Javascript to determine if the web page immediately stops loading, which indicates whether the file exists or not.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1518.001</Entry_ID><Entry_Name>Software Discovery:Security Software Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Security Software Footprinting</Name><Description>Adversaries may attempt to get a listing of security tools that are installed on the system and their configurations. This may include security related system features (such as a built-in firewall or anti-spyware) as well as third-party security software.</Description><Mitigations><Mitigation>Identify programs that may be used to acquire security tool information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Route Disabling</Name><Description>An adversary disables the network route between two targets. The goal is to completely sever the communications channel between two entities. This is often the result of a major error or the use of an "Internet kill switch" by those in control of critical infrastructure. This attack pattern differs from most other obstruction patterns by targeting the route itself, as opposed to the data passed over the route.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Disabling Network Hardware</Name><Description>In this attack pattern, an adversary physically disables networking hardware by powering it down or disconnecting critical equipment. Disabling or shutting off critical system resources prevents them from performing their service as intended, which can have direct and indirect consequences on other systems. This attack pattern is considerably less technical than the selective blocking used in most obstruction attacks.</Description><Mitigations><Mitigation>Ensure rigorous physical defensive measures to keep the adversary from accessing critical systems..</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>BGP Route Disabling</Name><Description>An adversary suppresses the Border Gateway Protocol (BGP) advertisement for a route so as to render the underlying network inaccessible. The BGP protocol helps traffic move throughout the Internet by selecting the most efficient route between Autonomous Systems (AS), or routing domains. BGP is the basis for interdomain routing infrastructure, providing connections between these ASs. By suppressing the intended AS routing advertisements and/or forcing less effective routes for traffic to ASs, the adversary can deny availability for the target network.</Description><Mitigations><Mitigation>Implement Ingress filters to check the validity of received routes. However, this relies on the accuracy of Internet Routing Registries (IRRs) databases which are often not well-maintained.</Mitigation><Mitigation>Implement Secure BGP (S-BGP protocol), which improves authorization and authentication capabilities based on public-key cryptography.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DNS Domain Seizure</Name><Description>In this attack pattern, an adversary influences a target's web-hosting company to disable a target domain. The goal is to prevent access to the targeted service provided by that domain. It usually occurs as the result of civil or criminal legal interventions.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Object Injection</Name><Description>An adversary attempts to exploit an application by injecting additional, malicious content during its processing of serialized objects. Developers leverage serialization in order to convert data or state into a static, binary format for saving to disk or transferring over a network. These objects are then deserialized when needed to recover the data/state. By injecting a malformed object into a vulnerable application, an adversary can potentially compromise the application by manipulating the deserialization process. This can result in a number of unwanted outcomes, including remote code execution.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>502</CWE_ID><Name>Deserialization of Untrusted Data</Name><Description>Web browser allows execution of native methods via a crafted string to a JavaScript function that deserializes the string.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cross Frame Scripting (XFS)</Name><Description>This attack pattern combines malicious Javascript and a legitimate webpage loaded into a concealed iframe. The malicious Javascript is then able to interact with a legitimate webpage in a manner that is unknown to the user. This attack usually leverages some element of social engineering in that an attacker must convinces a user to visit a web page that the attacker controls.</Description><Mitigations><Mitigation>Avoid clicking on untrusted links.</Mitigation><Mitigation>Employ techniques such as frame busting, which is a method by which developers aim to prevent their site being loaded within a frame.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DOM-Based XSS</Name><Description>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is inserted into the client-side HTML being parsed by a web browser. Content served by a vulnerable web application includes script code used to manipulate the Document Object Model (DOM). This script code either does not properly validate input, or does not perform proper output encoding, thus creating an opportunity for an adversary to inject a malicious script launch a XSS attack. A key distinction between other XSS attacks and DOM-based attacks is that in other XSS attacks, the malicious script runs when the vulnerable web page is initially loaded, while a DOM-based attack executes sometime after the page loads. Another distinction of DOM-based attacks is that in some cases, the malicious script is never sent to the vulnerable web server at all. An attack like this is guaranteed to bypass any server-side filtering attempts to protect users.</Description><Mitigations><Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation><Mitigation>Utilize proper character encoding for all output produced within client-site scripts manipulating the DOM.</Mitigation><Mitigation>Ensure that all user-supplied input is validated before use.</Mitigation></Mitigations><Examples><Example><Reference>Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. The application’s client-side code may want to print this mode value to the screen to give the users an understanding of what mode they are in. In this example, JavaScript is used to pull the value from the URL and update the HTML by dynamically manipulating the DOM via a document.write() call. Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser:</Reference><Description /></Example><Example><Reference>In some DOM-based attacks, the malicious script never gets sent to the web server at all, thus bypassing any server-side protections that might be in place. Consider the previously used web application that displays the mode value. Since the HTML is being generated dynamically through DOM manipulations, a URL fragment (i.e., the part of a URL after the '#' character) can be used. In this variation of a DOM-based XSS attack, the malicious script will not be sent to the web server, but will instead be managed by the victim's browser and is still available to the client-side script code.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>79</CWE_ID><Name>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Name><Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>83</CWE_ID><Name>Improper Neutralization of Script in Attributes in a Web Page</Name><Description>Javascript in onmouseover attribute in e-mail address or URL.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DNS Blocking</Name><Description>An adversary intercepts traffic and intentionally drops DNS requests based on content in the request. In this way, the adversary can deny the availability of specific services or content to the user even if the IP address is changed.</Description><Mitigations><Mitigation>Hard Coded Alternate DNS server in applications</Mitigation><Mitigation>Avoid dependence on DNS</Mitigation><Mitigation>Include "hosts file"/IP address in the application.</Mitigation><Mitigation>Ensure best practices with respect to communications channel protections.</Mitigation><Mitigation>Use a .onion domain with Tor support</Mitigation></Mitigations><Examples><Example><Reference>Full URL Based Filtering: Filtering based upon the requested URL. URL String-based Filtering: Filtering based upon the use of particular strings included in the requested URL.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>18</Entry_ID><Entry_Name>Credential/Session Prediction</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Session Credential Falsification through Prediction</Name><Description>This attack targets predictable session ID in order to gain privileges. The attacker can predict the session ID used during a transaction to perform spoofing and session hijacking.</Description><Mitigations><Mitigation>Use a strong source of randomness to generate a session ID.</Mitigation><Mitigation>Use adequate length session IDs</Mitigation><Mitigation>Do not use information available to the user in order to generate session ID (e.g., time).</Mitigation><Mitigation>Ideas for creating random numbers are offered by Eastlake [RFC1750]</Mitigation><Mitigation>Encrypt the session ID if you expose it to the user. For instance session ID can be stored in a cookie in encrypted format.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness><Weakness><CWE_ID>330</CWE_ID><Name>Use of Insufficiently Random Values</Name><Description>Application generates passwords that are based on the time of day.</Description></Weakness><Weakness><CWE_ID>331</CWE_ID><Name>Insufficient Entropy</Name><Description>Chain: insufficient precision (CWE-1339) in
	     random-number generator causes some zero bits to be reliably
	     generated, reducing the amount of entropy (CWE-331)</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>488</CWE_ID><Name>Exposure of Data Element to Wrong Session</Name><Description>The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.</Description></Weakness><Weakness><CWE_ID>539</CWE_ID><Name>Use of Persistent Cookies Containing Sensitive Information</Name><Description>The web application uses persistent cookies, but the cookies contain sensitive information.</Description></Weakness><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>6</CWE_ID><Name>J2EE Misconfiguration: Insufficient Session-ID Length</Name><Description>The J2EE application is configured to use an insufficient session ID length.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>IP Address Blocking</Name><Description>An adversary performing this type of attack drops packets destined for a target IP address. The aim is to prevent access to the service hosted at the target IP address.</Description><Mitigations><Mitigation>Have a large pool of backup IPs built into the application and support proxy capability in the application.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Reflected XSS</Name><Description>This type of attack is a form of Cross-Site Scripting (XSS) where a malicious script is "reflected" off a vulnerable web application and then executed by a victim's browser. The process starts with an adversary delivering a malicious script to a victim and convincing the victim to send the script to the vulnerable web application.</Description><Mitigations><Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation><Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation><Mitigation>Ensure that all user-supplied input is validated before use.</Mitigation></Mitigations><Examples><Example><Reference>Consider a web application that enables or disables some of the fields of a form on the page via the use of a mode parameter provided on the query string. The application’s server-side code may want to display this mode value in the HTML page being created to give the users an understanding of what mode they are in. In this example, PHP is used to pull the value from the URL and generate the desired HTML. Notice how the value provided on the URL is used directly with no input validation performed and no output encoding in place. A maliciously crafted URL can thus be formed such that if a victim clicked on the URL, a malicious script would then be executed by the victim’s browser:</Reference><Description /></Example><Example><Reference>Reflected XSS attacks can take advantage of HTTP headers to compromise a victim. For example, assume a vulnerable web application called ‘mysite’ dynamically generates a link using an HTTP header such as HTTP_REFERER. Code somewhere in the application could look like: The HTTP_REFERER header is populated with the URI that linked to the currently executing page. A web site can be created and hosted by an adversary that takes advantage of this by adding a reference to the vulnerable web application. By tricking a victim into clicking a link that executes the attacker’s web page, such as: The vulnerable web application ('mysite') is now called via the attacker's web site, initiated by the victim's web browser. The HTTP_REFERER header will contain a malicious script, which is embedded into the page by the vulnerable application and served to the victim. The victim’s web browser then executes the injected script, thus compromising the victim’s machine.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>79</CWE_ID><Name>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Name><Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Stored XSS</Name><Description>An adversary utilizes a form of Cross-site Scripting (XSS) where a malicious script is persistently "stored" within the data storage of a vulnerable web application as valid input.</Description><Mitigations><Mitigation>Use browser technologies that do not allow client-side scripting.</Mitigation><Mitigation>Utilize strict type, character, and encoding enforcement.</Mitigation><Mitigation>Ensure that all user-supplied input is validated before being stored.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>79</CWE_ID><Name>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Name><Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1185</Entry_ID><Entry_Name>Browser Session Hijacking</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1550.001</Entry_ID><Entry_Name>Use Alternate Authentication Material:Application Access Token</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1563</Entry_ID><Entry_Name>Remote Service Session Hijacking</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Session Hijacking</Name><Description>This type of attack involves an adversary that exploits weaknesses in an application's use of sessions in performing authentication. The adversary is able to steal or manipulate an active session and use it to gain unathorized access to the application.</Description><Mitigations><Mitigation>Properly encrypt and sign identity tokens in transit, and use industry standard session key generation mechanisms that utilize high amount of entropy to generate the session key. Many standard web and application servers will perform this task on your behalf. Utilize a session timeout for all sessions. If the user does not explicitly logout, terminate their session after this period of inactivity. If the user logs back in then a new session key should be generated.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Traffic Injection</Name><Description>An adversary injects traffic into the target's network connection. The adversary is therefore able to degrade or disrupt the connection, and potentially modify the content. This is not a flooding attack, as the adversary is not focusing on exhausting resources. Instead, the adversary is crafting a specific input to affect the system in a particular way.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>940</CWE_ID><Name>Improper Verification of Source of a Communication Channel</Name><Description>DNS server caches glue records received from non-delegated name servers</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Connection Reset</Name><Description>In this attack pattern, an adversary injects a connection reset packet to one or both ends of a target's connection. The attacker is therefore able to have the target and/or the destination server sever the connection without having to directly filter the traffic between them.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>940</CWE_ID><Name>Improper Verification of Source of a Communication Channel</Name><Description>DNS server caches glue records received from non-delegated name servers</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TCP RST Injection</Name><Description>An adversary injects one or more TCP RST packets to a target after the target has made a HTTP GET request. The goal of this attack is to have the target and/or destination web server terminate the TCP connection.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>940</CWE_ID><Name>Improper Verification of Source of a Communication Channel</Name><Description>DNS server caches glue records received from non-delegated name servers</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Absolute Path Traversal</Name><Description>An adversary with access to file system resources, either directly or via application logic, will use various file absolute paths and navigation mechanisms such as ".." to extend their range of access to inappropriate areas of the file system. The goal of the adversary is to access directories and files that are intended to be restricted from their access.</Description><Mitigations><Mitigation>Design: Configure the access control correctly.</Mitigation><Mitigation>Design: Enforce principle of least privilege.</Mitigation><Mitigation>Design: Execute programs with constrained privileges, so parent process does not open up further vulnerabilities. Ensure that all directories, temporary directories and files, and memory are executing with limited privileges to protect against remote execution.</Mitigation><Mitigation>Design: Input validation. Assume that user inputs are malicious. Utilize strict type, character, and encoding enforcement.</Mitigation><Mitigation>Design: Proxy communication to host, so that communications are terminated at the proxy, sanitizing the requests before forwarding to server host.</Mitigation><Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation><Mitigation>Implementation: Host integrity monitoring for critical files, directories, and processes. The goal of host integrity monitoring is to be aware when a security issue has occurred so that incident response and other forensic activities can begin.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content, including remote and user-generated content.</Mitigation><Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation><Mitigation>Implementation: Use indirect references rather than actual file names.</Mitigation><Mitigation>Implementation: Use possible permissions on file access when developing and deploying web applications.</Mitigation><Mitigation>Implementation: Validate user input by only accepting known good. Ensure all content that is delivered to client is sanitized against an acceptable content specification using an allowlist approach.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>36</CWE_ID><Name>Absolute Path Traversal</Name><Description>FTP server allows a remote attacker to retrieve privileged web server system information by specifying arbitrary paths in the UNC format (\\computername\sharename).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DNS Spoofing</Name><Description>An adversary sends a malicious ("NXDOMAIN" ("No such domain") code, or DNS A record) response to a target's route request before a legitimate resolver can. This technique requires an On-path or In-path device that can monitor and respond to the target's DNS requests. This attack differs from BGP Tampering in that it directly responds to requests made by the target instead of polluting the routing the target's infrastructure uses.</Description><Mitigations><Mitigation>Design: Avoid dependence on DNS</Mitigation><Mitigation>Design: Include "hosts file"/IP address in the application</Mitigation><Mitigation>Implementation: Utilize a .onion domain with Tor support</Mitigation><Mitigation>Implementation: DNSSEC</Mitigation><Mitigation>Implementation: DNS-hold-open</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Terrestrial Jamming</Name><Description>In this attack pattern, the adversary transmits disruptive signals in the direction of the target's consumer-level satellite dish (as opposed to the satellite itself). The transmission disruption occurs in a more targeted range. Portable terrestrial jammers have a range of 3-5 kilometers in urban areas and 20 kilometers in rural areas. This technique requires a terrestrial jammer that is more powerful than the frequencies sent from the satellite.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Argument Injection</Name><Description>An attacker changes the behavior or state of a targeted application through injecting data or command syntax through the targets use of non-validated and non-filtered arguments of exposed services or methods.</Description><Mitigations><Mitigation>Design: Do not program input values directly on command shell, instead treat user input as guilty until proven innocent. Build a function that takes user input and converts it to applications specific types and values, stripping or filtering out all unauthorized commands and characters in the process.</Mitigation><Mitigation>Design: Limit program privileges, so if metacharacters or other methods circumvent program input validation routines and shell access is attained then it is not running under a privileged account. chroot jails create a sandbox for the application to execute in, making it more difficult for an attacker to elevate privilege even in the case that a compromise has occurred.</Mitigation><Mitigation>Implementation: Implement an audit log that is written to a separate host, in the event of a compromise the audit log may be able to provide evidence and details of the compromise.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>146</CWE_ID><Name>Improper Neutralization of Expression/Command Delimiters</Name><Description>The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component.</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>78</CWE_ID><Name>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Name><Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description></Weakness><Weakness><CWE_ID>185</CWE_ID><Name>Incorrect Regular Expression</Name><Description>Null byte bypasses PHP regexp check.</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1134.001</Entry_ID><Entry_Name>Access Token Manipulation:Token Impersonation/Theft</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1550.004</Entry_ID><Entry_Name>Use Alternate Authentication Material:Web Session Cookie</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Reusing Session IDs (aka Session Replay)</Name><Description>This attack targets the reuse of valid session ID to spoof the target system in order to gain privileges. The attacker tries to reuse a stolen session ID used previously during a transaction to perform spoofing and session hijacking. Another name for this type of attack is Session Replay.</Description><Mitigations><Mitigation>Always invalidate a session ID after the user logout.</Mitigation><Mitigation>Setup a session time out for the session IDs.</Mitigation><Mitigation>Protect the communication between the client and server. For instance it is best practice to use SSL to mitigate adversary in the middle attacks (CAPEC-94).</Mitigation><Mitigation>Do not code send session ID with GET method, otherwise the session ID will be copied to the URL. In general avoid writing session IDs in the URLs. URLs can get logged in log files, which are vulnerable to an attacker.</Mitigation><Mitigation>Encrypt the session data associated with the session ID.</Mitigation><Mitigation>Use multifactor authentication.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>488</CWE_ID><Name>Exposure of Data Element to Wrong Session</Name><Description>The product does not sufficiently enforce boundaries between the states of different sessions, causing data to be provided to, or used by, the wrong session.</Description></Weakness><Weakness><CWE_ID>539</CWE_ID><Name>Use of Persistent Cookies Containing Sensitive Information</Name><Description>The web application uses persistent cookies, but the cookies contain sensitive information.</Description></Weakness><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>664</CWE_ID><Name>Improper Control of a Resource Through its Lifetime</Name><Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description></Weakness><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1110.004</Entry_ID><Entry_Name>Brute Force:Credential Stuffing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Credential Stuffing</Name><Description>
            </Description><Mitigations><Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation><Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation><Mitigation>Ensure users are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation><Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation><Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation><Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation><Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation><Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Jamming</Name><Description>An adversary uses radio noise or signals in an attempt to disrupt communications. By intentionally overwhelming system resources with illegitimate traffic, service is denied to the legitimate traffic of authorized users.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Degradation</Name><Description>This attack pattern has been deprecated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Blockage</Name><Description>An adversary blocks the delivery of an important system resource causing the system to fail or stop working.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Wi-Fi Jamming</Name><Description>In this attack scenario, the attacker actively transmits on the Wi-Fi channel to prevent users from transmitting or receiving data from the targeted Wi-Fi network. There are several known techniques to perform this attack – for example: the attacker may flood the Wi-Fi access point (e.g. the retransmission device) with deauthentication frames. Another method is to transmit high levels of noise on the RF band used by the Wi-Fi network.</Description><Mitigations><Mitigation>Countermeasures have been proposed for both disassociation flooding and RF jamming, however these countermeasures are not standardized and would need to be supported on both the retransmission device and the handset in order to be effective. Commercial products are not currently available that support jamming countermeasures for Wi-Fi.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cellular Jamming</Name><Description>In this attack scenario, the attacker actively transmits signals to overpower and disrupt the communication between a cellular user device and a cell tower. Several existing techniques are known in the open literature for this attack for 2G, 3G, and 4G LTE cellular technology. For example, some attacks target cell towers by overwhelming them with false status messages, while others introduce high levels of noise on signaling channels.</Description><Mitigations><Mitigation>Mitigating this attack requires countermeasures employed on both the retransmission device as well as on the cell tower. Therefore, any system that relies on existing commercial cell towards will likely be vulnerable to this attack. By using a private cellular LTE network (i.e., a custom cell tower), jamming countermeasures could be developed and employed.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Weakening of Cellular Encryption</Name><Description>An attacker, with control of a Cellular Rogue Base Station or through cooperation with a Malicious Mobile Network Operator can force the mobile device (e.g., the retransmission device) to use no encryption (A5/0 mode) or to use easily breakable encryption (A5/1 or A5/2 mode).</Description><Mitigations><Mitigation>Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.</Mitigation><Mitigation>Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>757</CWE_ID><Name>Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')</Name><Description>SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Obstruction</Name><Description>An attacker obstructs the interactions between system components. By interrupting or disabling these interactions, an adversary can often force the system into a degraded state or cause the system to stop working as intended. This can cause the system components to be unavailable until the obstruction mitigated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cryptanalysis of Cellular Encryption</Name><Description>The use of cryptanalytic techniques to derive cryptographic keys or otherwise effectively defeat cellular encryption to reveal traffic content. Some cellular encryption algorithms such as A5/1 and A5/2 (specified for GSM use) are known to be vulnerable to such attacks and commercial tools are available to execute these attacks and decrypt mobile phone conversations in real-time. Newer encryption algorithms in use by UMTS and LTE are stronger and currently believed to be less vulnerable to these types of attacks. Note, however, that an attacker with a Cellular Rogue Base Station can force the use of weak cellular encryption even by newer mobile devices.</Description><Mitigations><Mitigation>Use of hardened baseband firmware on retransmission device to detect and prevent the use of weak cellular encryption.</Mitigation><Mitigation>Monitor cellular RF interface to detect the usage of weaker-than-expected cellular encryption.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1111</Entry_ID><Entry_Name>Multi-Factor Authentication Interception</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Cellular Traffic Intercept</Name><Description>Cellular traffic for voice and data from mobile devices and retransmission devices can be intercepted via numerous methods. Malicious actors can deploy their own cellular tower equipment and intercept cellular traffic surreptitiously. Additionally, government agencies of adversaries and malicious actors can intercept cellular traffic via the telecommunications backbone over which mobile traffic is transmitted.</Description><Mitigations><Mitigation>Encryption of all data packets emanating from the smartphone to a retransmission device via two encrypted tunnels with Suite B cryptography, all the way to the VPN gateway at the datacenter.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>37</Entry_ID><Entry_Name>Session Fixation</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Session Fixation</Name><Description>The attacker induces a client to establish a session with the target software using a session identifier provided by the attacker. Once the user successfully authenticates to the target software, the attacker uses the (now privileged) session identifier in their own transactions. This attack leverages the fact that the target software either relies on client-generated session identifiers or maintains the same session identifiers after privilege elevation.</Description><Mitigations><Mitigation>Use a strict session management mechanism that only accepts locally generated session identifiers: This prevents attackers from fixating session identifiers of their own choice.</Mitigation><Mitigation>Regenerate and destroy session identifiers when there is a change in the level of privilege: This ensures that even though a potential victim may have followed a link with a fixated identifier, a new one is issued when the level of privilege changes.</Mitigation><Mitigation>Use session identifiers that are difficult to guess or brute-force: One way for the attackers to obtain valid session identifiers is by brute-forcing or guessing them. By choosing session identifiers that are sufficiently random, brute-forcing or guessing becomes very difficult.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>384</CWE_ID><Name>Session Fixation</Name><Description>Website software for game servers does not proprerly terminate user sessions, allowing for possible session fixation</Description></Weakness><Weakness><CWE_ID>664</CWE_ID><Name>Improper Control of a Resource Through its Lifetime</Name><Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description></Weakness><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cellular Data Injection</Name><Description>Adversaries inject data into mobile technology traffic (data flows or signaling data) to disrupt communications or conduct additional surveillance operations.</Description><Mitigations><Mitigation>Commercial defensive technology to detect and alert to any attempts to modify mobile technology data flows or to inject new data into existing data flows and signaling data.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>BitSquatting</Name><Description>An adversary registers a domain name one bit different than a trusted domain. A BitSquatting attack leverages random errors in memory to direct Internet traffic to adversary-controlled destinations. BitSquatting requires no exploitation or complicated reverse engineering, and is operating system and architecture agnostic. Experimental observations show that BitSquatting popular websites could redirect non-trivial amounts of Internet traffic to a malicious entity.</Description><Mitigations><Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation><Mitigation>When possible, use error-correcting (ECC) memory in local devices as non-ECC memory is significantly more vulnerable to faults.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>WiFi MAC Address Tracking</Name><Description>In this attack scenario, the attacker passively listens for WiFi messages and logs the associated Media Access Control (MAC) addresses. These addresses are intended to be unique to each wireless device (although they can be configured and changed by software). Once the attacker is able to associate a MAC address with a particular user or set of users (for example, when attending a public event), the attacker can then scan for that MAC address to track that user in the future.</Description><Mitigations><Mitigation>Automatic randomization of WiFi MAC addresses</Mitigation><Mitigation>Frequent changing of handset and retransmission device</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>WiFi SSID Tracking</Name><Description>In this attack scenario, the attacker passively listens for WiFi management frame messages containing the Service Set Identifier (SSID) for the WiFi network. These messages are frequently transmitted by WiFi access points (e.g., the retransmission device) as well as by clients that are accessing the network (e.g., the handset/mobile device). Once the attacker is able to associate an SSID with a particular user or set of users (for example, when attending a public event), the attacker can then scan for this SSID to track that user in the future.</Description><Mitigations><Mitigation>Do not enable the feature of "Hidden SSIDs" (also known as "Network Cloaking") – this option disables the usual broadcasting of the SSID by the access point, but forces the mobile handset to send requests on all supported radio channels which contains the SSID. The result is that tracking of the mobile device becomes easier since it is transmitting the SSID more frequently.</Mitigation><Mitigation>Frequently change the SSID to new and unrelated values</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Rooting SIM Cards</Name><Description>SIM cards are the de facto trust anchor of mobile devices worldwide. The cards protect the mobile identity of subscribers, associate devices with phone numbers, and increasingly store payment credentials, for example in NFC-enabled phones with mobile wallets. This attack leverages over-the-air (OTA) updates deployed via cryptographically-secured SMS messages to deliver executable code to the SIM. By cracking the DES key, an attacker can send properly signed binary SMS messages to a device, which are treated as Java applets and are executed on the SIM. These applets are allowed to send SMS, change voicemail numbers, and query the phone location, among many other predefined functions. These capabilities alone provide plenty of potential for abuse.</Description><Mitigations><Mitigation>Upgrade the SIM card to use the state-of-the-art AES or the somewhat outdated 3DES algorithm for OTA.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Evil Twin Wi-Fi Attack</Name><Description>Adversaries install Wi-Fi equipment that acts as a legitimate Wi-Fi network access point. When a device connects to this access point, Wi-Fi data traffic is intercepted, captured, and analyzed. This also allows the adversary to use "adversary-in-the-middle" (CAPEC-94) for all communications.</Description><Mitigations><Mitigation>Commercial defensive technology that monitors for rogue Wi-Fi access points, adversary-in-the-middle attacks, and anomalous activity with the mobile device baseband radios.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.005</Entry_ID><Entry_Name>Masquerading: Match Legitimate Name or Location</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Establish Rogue Location</Name><Description>An adversary provides a malicious version of a resource at a location that is similar to the expected location of a legitimate resource. After establishing the rogue location, the adversary waits for a victim to visit the location and access the malicious resource.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cellular Rogue Base Station</Name><Description>In this attack scenario, the attacker imitates a cellular base station with their own "rogue" base station equipment. Since cellular devices connect to whatever station has the strongest signal, the attacker can easily convince a targeted cellular device (e.g. the retransmission device) to talk to the rogue base station.</Description><Mitigations><Mitigation>Passively monitor cellular network connection for real-time threat detection and logging for manual review.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cellular Broadcast Message Request</Name><Description>In this attack scenario, the attacker uses knowledge of the target’s mobile phone number (i.e., the number associated with the SIM used in the retransmission device) to cause the cellular network to send broadcast messages to alert the mobile device. Since the network knows which cell tower the target’s mobile device is attached to, the broadcast messages are only sent in the Location Area Code (LAC) where the target is currently located. By triggering the cellular broadcast message and then listening for the presence or absence of that message, an attacker could verify that the target is in (or not in) a given location.</Description><Mitigations><Mitigation>Frequent changing of mobile number.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Signal Strength Tracking</Name><Description>In this attack scenario, the attacker passively monitors the signal strength of the target’s cellular RF signal or WiFi RF signal and uses the strength of the signal (with directional antennas and/or from multiple listening points at once) to identify the source location of the signal. Obtaining the signal of the target can be accomplished through multiple techniques such as through Cellular Broadcast Message Request or through the use of IMSI Tracking or WiFi MAC Address Tracking.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>09</Entry_ID><Entry_Name>Cross-Site Request Forgery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Cross Site Request Forgery</Name><Description>An attacker crafts malicious web links and distributes them (via web pages, email, etc.), typically in a targeted manner, hoping to induce users to click on the link and execute the malicious action against some third-party application. If successful, the action embedded in the malicious link will be processed and accepted by the targeted application with the users' privilege level. This type of attack leverages the persistence and implicit trust placed in user session cookies by many web applications today. In such an architecture, once the user authenticates to an application and a session cookie is created on the user's system, all following transactions for that session are authenticated using that cookie including potential actions initiated by an attacker and simply "riding" the existing session cookie.</Description><Mitigations><Mitigation>Use cryptographic tokens to associate a request with a specific action. The token can be regenerated at every request so that if a request with an invalid token is encountered, it can be reliably discarded. The token is considered invalid if it arrived with a request other than the action it was supposed to be associated with.</Mitigation><Mitigation>Although less reliable, the use of the optional HTTP Referrer header can also be used to determine whether an incoming request was actually one that the user is authorized for, in the current context.</Mitigation><Mitigation>Additionally, the user can also be prompted to confirm an action every time an action concerning potentially sensitive data is invoked. This way, even if the attacker manages to get the user to click on a malicious link and request the desired action, the user has a chance to recover by denying confirmation. This solution is also implicitly tied to using a second factor of authentication before performing such actions.</Mitigation><Mitigation>In general, every request must be checked for the appropriate authentication token as well as authorization in the current session context.</Mitigation></Mitigations><Examples><Example><Reference>While a user is logged into their bank account, an attacker can send an email with some potentially interesting content and require the user to click on a link in the email. The link points to or contains an attacker setup script, probably even within an iFrame, that mimics an actual user form submission to perform a malicious activity, such as transferring funds from the victim's account. The attacker can have the script embedded in, or targeted by, the link perform any arbitrary action as the authenticated user. When this script is executed, the targeted application authenticates and accepts the actions based on the victims existing session cookie.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>352</CWE_ID><Name>Cross-Site Request Forgery (CSRF)</Name><Description>web interface allows password changes or stopping a virtual machine via CSRF</Description></Weakness><Weakness><CWE_ID>306</CWE_ID><Name>Missing Authentication for Critical Function</Name><Description>Programmable Logic Controller (PLC) does not have an authentication feature on its communication protocols.</Description></Weakness><Weakness><CWE_ID>664</CWE_ID><Name>Improper Control of a Resource Through its Lifetime</Name><Description>Chain: Python library does not limit the resources used to process images that specify a very large number of bands (CWE-1284), leading to excessive memory consumption (CWE-789) or an integer overflow (CWE-190).</Description></Weakness><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness><Weakness><CWE_ID>1275</CWE_ID><Name>Sensitive Cookie with Improper SameSite Attribute</Name><Description>Web application for a room automation system has client-side JavaScript that sets a sensitive cookie without the SameSite security attribute, allowing the cookie to be sniffed</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1600</Entry_ID><Entry_Name>Weaken Encryption</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Drop Encryption Level</Name><Description>An attacker forces the encryption level to be lowered, thus enabling a successful attack against the encrypted data.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>757</CWE_ID><Name>Selection of Less-Secure Algorithm During Negotiation ('Algorithm Downgrade')</Name><Description>SSH server implementation allows override of configuration setting to use weaker authentication schemes. This may be a composite with CWE-642.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Analysis of Packet Timing and Sizes</Name><Description>An attacker may intercept and log encrypted transmissions for the purpose of analyzing metadata such as packet timing and sizes. Although the actual data may be encrypted, this metadata may reveal valuable information to an attacker. Note that this attack is applicable to VOIP data as well as application data, especially for interactive apps that require precise timing and low-latency (e.g. thin-clients).</Description><Mitigations><Mitigation>Distort packet sizes and timing at VPN layer by adding padding to normalize packet sizes and timing delays to reduce information leakage via timing.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Electromagnetic Side-Channel Attack</Name><Description>In this attack scenario, the attacker passively monitors electromagnetic emanations that are produced by the targeted electronic device as an unintentional side-effect of its processing. From these emanations, the attacker derives information about the data that is being processed (e.g. the attacker can recover cryptographic keys by monitoring emanations associated with cryptographic processing). This style of attack requires proximal access to the device, however attacks have been demonstrated at public conferences that work at distances of up to 10-15 feet. There have not been any significant studies to determine the maximum practical distance for such attacks. Since the attack is passive, it is nearly impossible to detect and the targeted device will continue to operate as normal after a successful attack.</Description><Mitigations><Mitigation>Utilize side-channel resistant implementations of all crypto algorithms.</Mitigation><Mitigation>Strong physical security of all devices that contain secret key information. (even when devices are not in use)</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Compromising Emanations Attack</Name><Description>Compromising Emanations (CE) are defined as unintentional signals which an attacker may intercept and analyze to disclose the information processed by the targeted equipment. Commercial mobile devices and retransmission devices have displays, buttons, microchips, and radios that emit mechanical emissions in the form of sound or vibrations. Capturing these emissions can help an adversary understand what the device is doing.</Description><Mitigations><Mitigation>None are known.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>201</CWE_ID><Name>Insertion of Sensitive Information Into Sent Data</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Hardware Fault Injection</Name><Description>The adversary uses disruptive signals or events, or alters the physical environment a device operates in, to cause faulty behavior in electronic devices. This can include electromagnetic pulses, laser pulses, clock glitches, ambient temperature extremes, and more. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information.</Description><Mitigations><Mitigation>Implement robust physical security countermeasures and monitoring.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1247</CWE_ID><Name>Improper Protection Against Voltage and Clock Glitches</Name><Description>IP communication firmware allows access to a boot shell via certain impulses</Description></Weakness><Weakness><CWE_ID>1248</CWE_ID><Name>Semiconductor Defects in Hardware Logic with Security-Sensitive Implications</Name><Description>The security-sensitive hardware module contains semiconductor defects.</Description></Weakness><Weakness><CWE_ID>1256</CWE_ID><Name>Improper Restriction of Software Interfaces to Hardware Features</Name><Description>NaCl in 2015 allowed the CLFLUSH instruction, making Rowhammer attacks possible.</Description></Weakness><Weakness><CWE_ID>1319</CWE_ID><Name>Improper Protection against Electromagnetic Fault Injection (EM-FI)</Name><Description>Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing  the product to be in an unprotected state.</Description></Weakness><Weakness><CWE_ID>1332</CWE_ID><Name>Improper Handling of Faults that Lead to Instruction Skips</Name><Description>fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.</Description></Weakness><Weakness><CWE_ID>1334</CWE_ID><Name>Unauthorized Error Injection Can Degrade Hardware Redundancy</Name><Description>An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.</Description></Weakness><Weakness><CWE_ID>1338</CWE_ID><Name>Improper Protections Against Hardware Overheating</Name><Description>A hardware device is missing or has inadequate protection features to prevent overheating.</Description></Weakness><Weakness><CWE_ID>1351</CWE_ID><Name>Improper Handling of Hardware Behavior in Exceptionally Cold Environments</Name><Description>A hardware device, or the firmware running on it, is
                missing or has incorrect protection features to maintain
                goals of security primitives when the device is cooled below
                standard operating temperatures.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Mobile Device Fault Injection</Name><Description>Fault injection attacks against mobile devices use disruptive signals or events (e.g. electromagnetic pulses, laser pulses, clock glitches, etc.) to cause faulty behavior. When performed in a controlled manner on devices performing cryptographic operations, this faulty behavior can be exploited to derive secret key information. Although this attack usually requires physical control of the mobile device, it is non-destructive, and the device can be used after the attack without any indication that secret keys were compromised.</Description><Mitigations><Mitigation>Strong physical security of all devices that contain secret key information. (even when devices are not in use)</Mitigation><Mitigation>Frequent changes to secret keys and certificates.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1247</CWE_ID><Name>Improper Protection Against Voltage and Clock Glitches</Name><Description>IP communication firmware allows access to a boot shell via certain impulses</Description></Weakness><Weakness><CWE_ID>1248</CWE_ID><Name>Semiconductor Defects in Hardware Logic with Security-Sensitive Implications</Name><Description>The security-sensitive hardware module contains semiconductor defects.</Description></Weakness><Weakness><CWE_ID>1256</CWE_ID><Name>Improper Restriction of Software Interfaces to Hardware Features</Name><Description>NaCl in 2015 allowed the CLFLUSH instruction, making Rowhammer attacks possible.</Description></Weakness><Weakness><CWE_ID>1319</CWE_ID><Name>Improper Protection against Electromagnetic Fault Injection (EM-FI)</Name><Description>Chain: microcontroller system-on-chip uses a register value stored in flash to set product protection state on the memory bus and does not contain protection against fault injection (CWE-1319) which leads to an incorrect initialization of the memory bus (CWE-1419) causing  the product to be in an unprotected state.</Description></Weakness><Weakness><CWE_ID>1332</CWE_ID><Name>Improper Handling of Faults that Lead to Instruction Skips</Name><Description>fault injection attack bypasses the verification mode, potentially allowing arbitrary code execution.</Description></Weakness><Weakness><CWE_ID>1334</CWE_ID><Name>Unauthorized Error Injection Can Degrade Hardware Redundancy</Name><Description>An unauthorized agent can inject errors into a redundant block to deprive the system of redundancy or put the system in a degraded operating mode.</Description></Weakness><Weakness><CWE_ID>1338</CWE_ID><Name>Improper Protections Against Hardware Overheating</Name><Description>A hardware device is missing or has inadequate protection features to prevent overheating.</Description></Weakness><Weakness><CWE_ID>1351</CWE_ID><Name>Improper Handling of Hardware Behavior in Exceptionally Cold Environments</Name><Description>A hardware device, or the firmware running on it, is
                missing or has incorrect protection features to maintain
                goals of security primitives when the device is cooled below
                standard operating temperatures.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Smudge Attack</Name><Description>Attacks that reveal the password/passcode pattern on a touchscreen device by detecting oil smudges left behind by the user’s fingers.</Description><Mitigations><Mitigation>Strong physical security of the device.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Counterfeit GPS Signals</Name><Description>An adversary attempts to deceive a GPS receiver by broadcasting counterfeit GPS signals, structured to resemble a set of normal GPS signals. These spoofed signals may be structured in such a way as to cause the receiver to estimate its position to be somewhere other than where it actually is, or to be located where it is but at a different time, as determined by the adversary.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Carry-Off GPS Attack</Name><Description>A common form of a GPS spoofing attack, commonly termed a carry-off attack begins with an adversary broadcasting signals synchronized with the genuine signals observed by the target receiver. The power of the counterfeit signals is then gradually increased and drawn away from the genuine signals. Over time, the adversary can carry the target away from their intended destination and toward a location chosen by the adversary.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Unauthorized Use of Device Resources</Name><Description>This attack pattern has been deprecated.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>08</Entry_ID><Entry_Name>Cross-Site Scripting</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Cross-Site Scripting (XSS)</Name><Description>An adversary embeds malicious scripts in content that will be served to web browsers. The goal of the attack is for the target software, the client-side browser, to execute the script with the users' privilege level. An attack of this type exploits a programs' vulnerabilities that are brought on by allowing remote hosts to execute code and scripts. Web browsers, for example, have some simple security controls in place, but if a remote attacker is allowed to execute scripts (through injecting them in to user-generated content like bulletin boards) then these controls may be bypassed. Further, these attacks are very difficult for an end user to detect.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation><Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Session tokens for specific host</Mitigation><Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation></Mitigations><Examples><Example><Reference>Classic phishing attacks lure users to click on content that appears trustworthy, such as logos, and links that seem to go to their trusted financial institutions and online auction sites. But instead the attacker appends malicious scripts into the otherwise innocent appearing resources. The HTML source for a standard phishing attack looks like this: When the user clicks the link, the appended script also executes on the local user's machine.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>79</CWE_ID><Name>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Name><Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>TypoSquatting</Name><Description>An adversary registers a domain name with at least one character different than a trusted domain. A TypoSquatting attack takes advantage of instances where a user mistypes a URL (e.g. www.goggle.com) or not does visually verify a URL before clicking on it (e.g. phishing attack). As a result, the user is directed to an adversary-controlled destination. TypoSquatting does not require an attack against the trusted domain or complicated reverse engineering.</Description><Mitigations><Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation><Mitigation>Purchase potential TypoSquatted domains and forward to legitimate domain.</Mitigation></Mitigations><Examples><Example><Reference>An adversary sends an email, impersonating paypal.com, to a user stating that they have just received a money transfer and to click the given link to obtain their money. However, the link the in email is paypa1.com instead of paypal.com, which the user clicks without fully reading the link. The user is directed to the adversary's website, which appears as if it is the legitimate paypal.com login page. The user thinks they are logging into their account, but have actually just given their paypal credentials to the adversary. The adversary can now use the user's legitimate paypal credentials to log into the user's account and steal any money which may be in the account. TypoSquatting vulnerability allows an adversary to impersonate a trusted domain and trick a user into visiting the malicious website to steal user credentials.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>SoundSquatting</Name><Description>An adversary registers a domain name that sounds the same as a trusted domain, but has a different spelling. A SoundSquatting attack takes advantage of a user's confusion of the two words to direct Internet traffic to adversary-controlled destinations. SoundSquatting does not require an attack against the trusted domain or complicated reverse engineering.</Description><Mitigations><Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation><Mitigation>Purchase potential SoundSquatted domains and forward to legitimate domain.</Mitigation></Mitigations><Examples><Example><Reference>An adversary sends an email, impersonating the popular banking website guaranteebanking.com, to a user stating that they have just received a new deposit and to click the given link to confirm the deposit. However, the link the in email is guarantybanking.com instead of guaranteebanking.com, which the user clicks without fully reading the link. The user is directed to the adversary's website, which appears as if it is the legitimate guaranteebanking.com login page. The user thinks they are logging into their account, but have actually just given their guaranteebanking.com credentials to the adversary. The adversary can now use the user's legitimate guaranteebanking.com credentials to log into the user's account and steal any money which may be in the account.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Homograph Attack via Homoglyphs</Name><Description>An adversary registers a domain name containing a homoglyph, leading the registered domain to appear the same as a trusted domain. A homograph attack leverages the fact that different characters among various character sets look the same to the user. Homograph attacks must generally be combined with other attacks, such as phishing attacks, in order to direct Internet traffic to the adversary-controlled destinations.</Description><Mitigations><Mitigation>Authenticate all servers and perform redundant checks when using DNS hostnames.</Mitigation><Mitigation>Utilize browsers that can warn users if URLs contain characters from different character sets.</Mitigation></Mitigations><Examples><Example><Reference>An adversary sends an email, impersonating bankofamerica.com to a user stating that they have just received a new deposit and to click the given link to confirm the deposit. However, the link the in email is bankofamerica.com, where the 'a' and 'e' characters are Cyrillic and not ASCII, instead of bankofamerica.com (all ASCII), which the user clicks after carefully reading the URL, making sure that typosquatting and soundsquatting attacks are not being leveraged against them. The user is directed to the adversary's website, which appears as if it is the legitimate bankofamerica.com login page. The user thinks they are logging into their account, but have actually just given their bankofamerica.com credentials to the adversary. The adversary can now use the user's legitimate bankofamerica.com credentials to log into the user's account and steal any money which may be in the account. Homograph vulnerability allows an adversary to impersonate a trusted domain by leveraging homoglyphs and tricking a user into visiting the malicious website to steal user credentials.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1007</CWE_ID><Name>Insufficient Visual Distinction of Homoglyphs Presented to User</Name><Description>homoglyph spoofing using punycode in URLs and certificates</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1134</Entry_ID><Entry_Name>Access Token Manipulation</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Token Impersonation</Name><Description>An adversary exploits a weakness in authentication to create an access token (or equivalent) that impersonates a different entity, and then associates a process/thread to that that impersonated token. This action causes a downstream user to make a decision or take action that is based on the assumed identity, and not the response that blocks the adversary.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>1270</CWE_ID><Name>Generation of Incorrect Security Tokens</Name><Description>The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1123</Entry_ID><Entry_Name>Audio Capture</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1125</Entry_ID><Entry_Name>Video Capture</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Probe Audio and Video Peripherals</Name><Description>The adversary exploits the target system's audio and video functionalities through malware or scheduled tasks. The goal is to capture sensitive information about the target for financial, personal, political, or other gains which is accomplished by collecting communication data between two parties via the use of peripheral devices (e.g. microphones and webcams) or applications with audio and video capabilities (e.g. Skype) on a system.</Description><Mitigations><Mitigation>Prevent unknown code from executing on a system through the use of an allowlist policy.</Mitigation><Mitigation>Patch installed applications as soon as new updates become available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>267</CWE_ID><Name>Privilege Defined With Unsafe Actions</Name><Description>Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.007</Entry_ID><Entry_Name>Masquerading: Double File Extension</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Alternative Execution Due to Deceptive Filenames</Name><Description>The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information.</Description><Mitigations><Mitigation>Applications should insure that the content of the file is consistent with format it is expecting, and not depend solely on the file extension.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>162</CWE_ID><Name>Improper Neutralization of Trailing Special Elements</Name><Description>Application server allows remote attackers to read source code for .jsp files by appending a / to the requested URL.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1001.002</Entry_ID><Entry_Name>Data Obfuscation: Steganography</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.003</Entry_ID><Entry_Name>Obfuscated Files or Information: Steganography</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.004</Entry_ID><Entry_Name>Obfuscated Files or Information: Compile After Delivery</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1218.001</Entry_ID><Entry_Name>Signed Binary Proxy Execution: Compiled HTML File</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1221</Entry_ID><Entry_Name>Template Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Hiding Malicious Data or Code within Files</Name><Description>Files on various operating systems can have a complex format which allows for the storage of other data, in addition to its contents. Often this is metadata about the file, such as a cached thumbnail for an image file. Unless utilities are invoked in a particular way, this data is not visible during the normal use of the file. It is possible for an attacker to store malicious data or code using these facilities, which would be difficult to discover.</Description><Mitigations><Mitigation>Many tools are available to search for the hidden data. Scan regularly for such data using one of these tools.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>506</CWE_ID><Name>Embedded Malicious Code</Name><Description>A command history tool was shipped with a code-execution backdoor inserted by a malicious party.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1115</Entry_ID><Entry_Name>Clipboard Data</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Collect Data from Clipboard</Name><Description>The adversary exploits an application that allows for the copying of sensitive data or information by collecting information copied to the clipboard. Data copied to the clipboard can be accessed by other applications, such as malware built to exfiltrate or log clipboard contents on a periodic basis. In this way, the adversary aims to garner information to which they are unauthorized.</Description><Mitigations><Mitigation>While copying and pasting of data with the clipboard is a legitimate and practical function, certain situations and context may require the disabling of this feature. Just as certain applications disable screenshot capability, applications that handle highly sensitive information should consider disabling copy and paste functionality.</Mitigation><Mitigation>Employ a robust identification and audit/blocking via using an allowlist of applications on your system. Malware may contain the functionality associated with this attack pattern.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>267</CWE_ID><Name>Privilege Defined With Unsafe Actions</Name><Description>Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1542.002</Entry_ID><Entry_Name>Pre-OS Boot:Component Firmware</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Altered Component Firmware</Name><Description>An adversary exploits systems features and/or improperly protected firmware of hardware components, such as Hard Disk Drives (HDD), with the goal of executing malicious code from within the component's Master Boot Record (MBR). Conducting this type of attack entails the adversary infecting the target with firmware altering malware, using known tools, and a payload. Once this malware is executed, the MBR is modified to include instructions to execute the payload at desired intervals and when the system is booted up. A successful attack will obtain persistence within the victim system even if the operating system is reinstalled and/or if the component is formatted or has its data erased.</Description><Mitigations><Mitigation>Leverage hardware components known to not be susceptible to these types of attacks.</Mitigation><Mitigation>Implement hardware RAID infrastructure.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1039</Entry_ID><Entry_Name>Data from Network Shared Drive</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.001</Entry_ID><Entry_Name>Unsecured Credentials: Credentials in Files</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.003</Entry_ID><Entry_Name>Unsecured Credentials: Bash History</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.004</Entry_ID><Entry_Name>Unsecured Credentials: Private Keys</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.006</Entry_ID><Entry_Name>Unsecured Credentials: Group Policy Preferences</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Probe System Files</Name><Description>An adversary obtains unauthorized information due to improperly protected files. If an application stores sensitive information in a file that is not protected by proper access control, then an adversary can access the file and search for sensitive information.</Description><Mitigations><Mitigation>Verify that files have proper access controls set, and reduce the storage of sensitive information to only what is necessary.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>552</CWE_ID><Name>Files or Directories Accessible to External Parties</Name><Description>Data file under web root.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Slashes and URL Encoding Combined to Bypass Validation Logic</Name><Description>This attack targets the encoding of the URL combined with the encoding of the slash characters. An attacker can take advantage of the multiple ways of encoding a URL and abuse the interpretation of the URL. A URL may contain special character that need special syntax handling in order to be interpreted. Special characters are represented using a percentage character followed by two digits representing the octet code of the original character (%HEX-CODE). For instance US-ASCII space character would be represented with %20. This is often referred as escaped ending or percent-encoding. Since the server decodes the URL from the requests, it may restrict the access to some URL paths by validating and filtering out the URL requests it received. An attacker will try to craft an URL with a sequence of special characters which once interpreted by the server will be equivalent to a forbidden URL. It can be difficult to protect against this attack since the URL can contain other format of encoding such as UTF-8 encoding, Unicode-encoding, etc.</Description><Mitigations><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation><Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding.</Mitigation><Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation><Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation><Mitigation>Refer to the RFCs to safely decode URL.</Mitigation><Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation><Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation></Mitigations><Examples><Example><Reference>Attack Example: Combined Encodings CesarFTP Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An attacker could provide a URL that included a string like This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>177</CWE_ID><Name>Improper Handling of URL Encoding (Hex Encoding)</Name><Description>"%0a" (overlaps CRLF)</Description></Weakness><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>22</CWE_ID><Name>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Name><Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1505.005</Entry_ID><Entry_Name>Server Software Component: Terminal Services DLL</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.006</Entry_ID><Entry_Name>Hijack Execution Flow: Dynamic Linker Hijacking</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.013</Entry_ID><Entry_Name>Hijack Execution Flow: KernelCallbackTable</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1620</Entry_ID><Entry_Name>Reflective Code Loading</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Inclusion of Code in Existing Process</Name><Description>The adversary takes advantage of a bug in an application failing to verify the integrity of the running process to execute arbitrary code in the address space of a separate live process. The adversary could use running code in the context of another process to try to access process's memory, system/network resources, etc. The goal of this attack is to evade detection defenses and escalate privileges by masking the malicious code under an existing legitimate process. Examples of approaches include but not limited to: dynamic-link library (DLL) injection, portable executable injection, thread execution hijacking, ptrace system calls, VDSO hijacking, function hooking, reflective code loading, and more.</Description><Mitigations><Mitigation>Prevent unknown or malicious software from loading through using an allowlist policy.</Mitigation><Mitigation>Properly restrict the location of the software being used.</Mitigation><Mitigation>Leverage security kernel modules providing advanced access control and process restrictions like SELinux.</Mitigation><Mitigation>Monitor API calls like CreateRemoteThread, SuspendThread/SetThreadContext/ResumeThread, QueueUserAPC, and similar for Windows.</Mitigation><Mitigation>Monitor API calls like ptrace system call, use of LD_PRELOAD environment variable, dlfcn dynamic linking API calls, and similar for Linux.</Mitigation><Mitigation>Monitor API calls like SetWindowsHookEx and SetWinEventHook which install hook procedures for Windows.</Mitigation><Mitigation>Monitor processes and command-line arguments for unknown behavior related to code injection.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>114</CWE_ID><Name>Process Control</Name><Description>Executing commands or loading libraries from an untrusted source or in an untrusted environment can cause an application to execute malicious commands (and payloads) on behalf of an attacker.</Description></Weakness><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.002</Entry_ID><Entry_Name>Hijack Execution Flow:DLL Side-Loading</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>DLL Side-Loading</Name><Description>An adversary places a malicious version of a Dynamic-Link Library (DLL) in the Windows Side-by-Side (WinSxS) directory to trick the operating system into loading this malicious DLL instead of a legitimate DLL. Programs specify the location of the DLLs to load via the use of WinSxS manifests or DLL redirection and if they aren't used then Windows searches in a predefined set of directories to locate the file. If the applications improperly specify a required DLL or WinSxS manifests aren't explicit about the characteristics of the DLL to be loaded, they can be vulnerable to side-loading.</Description><Mitigations><Mitigation>Prevent unknown DLLs from loading through using an allowlist policy.</Mitigation><Mitigation>Patch installed applications as soon as new updates become available.</Mitigation><Mitigation>Properly restrict the location of the software being used.</Mitigation><Mitigation>Use of sxstrace.exe on Windows as well as manual inspection of the manifests.</Mitigation><Mitigation>Require code signing and avoid using relative paths for resources.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>706</CWE_ID><Name>Use of Incorrectly-Resolved Name or Reference</Name><Description>The product uses a name or reference to access a resource, but the name/reference resolves to a resource that is outside of the intended control sphere.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1505.005</Entry_ID><Entry_Name>Server Software Component: Terminal Services DLL</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1554</Entry_ID><Entry_Name>Compromise Client Software Binary</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1574.005</Entry_ID><Entry_Name>Hijack Execution Flow:Executable Installer File Permissions Weakness</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Replace Binaries</Name><Description>Adversaries know that certain binaries will be regularly executed as part of normal processing. If these binaries are not protected with the appropriate file system permissions, it could be possible to replace them with malware. This malware might be executed at higher system permission levels. A variation of this pattern is to discover self-extracting installation packages that unpack binaries to directories with weak file permissions which it does not clean up appropriately. These binaries can be replaced by malware, which can then be executed.</Description><Mitigations><Mitigation>Insure that binaries commonly used by the system have the correct file permissions. Set operating system policies that restrict privilege elevation of non-Administrators. Use auditing tools to observe changes to system services.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>732</CWE_ID><Name>Incorrect Permission Assignment for Critical Resource</Name><Description>Chain: database product contains buffer overflow that is only reachable through a .ini configuration file - which has "Everyone: Full Control" permissions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1135</Entry_ID><Entry_Name>Network Share Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Identify Shared Files/Directories on System</Name><Description>An adversary discovers connections between systems by exploiting the target system's standard practice of revealing them in searchable, common areas. Through the identification of shared folders/drives between systems, the adversary may further their goals of locating and collecting sensitive information/files, or map potential routes for lateral movement within the network.</Description><Mitigations><Mitigation>Identify unnecessary system utilities or potentially malicious software that may contain functionality to identify network share information, and audit and/or block them by using allowlist tools.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>267</CWE_ID><Name>Privilege Defined With Unsafe Actions</Name><Description>Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).</Description></Weakness><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1550.002</Entry_ID><Entry_Name>Use Alternate Authentication Material:Pass The Hash</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Use of Captured Hashes (Pass The Hash)</Name><Description>An adversary obtains (i.e. steals or purchases) legitimate Windows domain credential hash values to access systems within the domain that leverage the Lan Man (LM) and/or NT Lan Man (NTLM) authentication protocols.</Description><Mitigations><Mitigation>Prevent the use of Lan Man and NT Lan Man authentication on severs and apply patch KB2871997 to Windows 7 and higher systems.</Mitigation><Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the domain network.</Mitigation><Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation><Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation><Mitigation>Leverage system penetration testing and other defense in depth methods to determine vulnerable systems within a domain.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>836</CWE_ID><Name>Use of Password Hash Instead of Password for Authentication</Name><Description>Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1550.003</Entry_ID><Entry_Name>Use Alternate Authentication Material:Pass The Ticket</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Use of Captured Tickets (Pass The Ticket)</Name><Description>An adversary uses stolen Kerberos tickets to access systems/resources that leverage the Kerberos authentication protocol. The Kerberos authentication protocol centers around a ticketing system which is used to request/grant access to services and to then access the requested services. An adversary can obtain any one of these tickets (e.g. Service Ticket, Ticket Granting Ticket, Silver Ticket, or Golden Ticket) to authenticate to a system/resource without needing the account's credentials. Depending on the ticket obtained, the adversary may be able to access a particular resource or generate TGTs for any account within an Active Directory Domain.</Description><Mitigations><Mitigation>Reset the built-in KRBTGT account password twice to invalidate the existence of any current Golden Tickets and any tickets derived from them.</Mitigation><Mitigation>Monitor system and domain logs for abnormal access.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1120</Entry_ID><Entry_Name>Peripheral Device Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Peripheral Footprinting</Name><Description>Adversaries may attempt to obtain information about attached peripheral devices and components connected to a computer system. Examples may include discovering the presence of iOS devices by searching for backups, analyzing the Windows registry to determine what USB devices have been connected, or infecting a victim system with malware to report when a USB device has been connected. This may allow the adversary to gain additional insight about the system or network environment, which may be useful in constructing further attacks.</Description><Mitigations><Mitigation>Identify programs that may be used to acquire peripheral information and block them by using a software restriction policy or tools that restrict program execution by using a process allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1005</Entry_ID><Entry_Name>Data from Local System</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1012</Entry_ID><Entry_Name>Query Registry</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1552.002</Entry_ID><Entry_Name>Unsecured Credentials: Credentials in Registry</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Collect Data from Registries</Name><Description>An adversary exploits a weakness in authorization to gather system-specific data and sensitive information within a registry (e.g., Windows Registry, Mac plist). These contain information about the system configuration, software, operating system, and security. The adversary can leverage information gathered in order to carry out further attacks.</Description><Mitigations><Mitigation>Employ a robust and layered defensive posture in order to prevent unauthorized users on your system.</Mitigation><Mitigation>Employ robust identification and audit/blocking via using an allowlist of applications on your system. Unnecessary applications, utilities, and configurations will have a presence in the system registry that can be leveraged by an adversary through this attack pattern.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1113</Entry_ID><Entry_Name>Screen Capture</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1513</Entry_ID><Entry_Name>Screen Capture</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Collect Data from Screen Capture</Name><Description>An adversary gathers sensitive information by exploiting the system's screen capture functionality. Through screenshots, the adversary aims to see what happens on the screen over the course of an operation. The adversary can leverage information gathered in order to carry out further attacks.</Description><Mitigations><Mitigation>Identify potentially malicious software that may have functionality to acquire screen captures, and audit and/or block it by using allowlist tools.</Mitigation><Mitigation>While screen capture is a legitimate and practical function, certain situations and context may require the disabling of this feature.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>267</CWE_ID><Name>Privilege Defined With Unsafe Actions</Name><Description>Certain debugging commands not restricted to just the administrator, allowing registry modification and infoleak (Unsafe privileged actions).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1036.006</Entry_ID><Entry_Name>Masquerading:Space after Filename</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Adding a Space to a File Extension</Name><Description>An adversary adds a space character to the end of a file extension and takes advantage of an application that does not properly neutralize trailing special elements in file names. This extra space, which can be difficult for a user to notice, affects which default application is used to operate on the file and can be leveraged by the adversary to control execution.</Description><Mitigations><Mitigation>File extensions should be checked to see if non-visible characters are being included.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>46</CWE_ID><Name>Path Equivalence: 'filename ' (Trailing Space)</Name><Description>Trailing space ("+" in query string) leads to source code disclosure.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1040</Entry_ID><Entry_Name>Network Sniffing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Sniff Application Code</Name><Description>An adversary passively sniffs network communications and captures application code bound for an authorized client. Once obtained, they can use it as-is, or through reverse-engineering glean sensitive information or exploit the trust relationship between the client and server. Such code may belong to a dynamic update to the client, a patch being applied to a client component or any such interaction where the client is authorized to communicate with the server.</Description><Mitigations><Mitigation>Design: Encrypt all communication between the client and server.</Mitigation><Mitigation>Implementation: Use SSL, SSH, SCP.</Mitigation><Mitigation>Operation: Use "ifconfig/ipconfig" or other tools to detect the sniffer installed in the network.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>319</CWE_ID><Name>Cleartext Transmission of Sensitive Information</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>311</CWE_ID><Name>Missing Encryption of Sensitive Data</Name><Description>Product sends file with cleartext passwords in e-mail message intended for diagnostic purposes.</Description></Weakness><Weakness><CWE_ID>318</CWE_ID><Name>Cleartext Storage of Sensitive Information in Executable</Name><Description>administration passwords in cleartext in executable</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1505.003</Entry_ID><Entry_Name>Server Software Component:Web Shell</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Upload a Web Shell to a Web Server</Name><Description>By exploiting insufficient permissions, it is possible to upload a web shell to a web server in such a way that it can be executed remotely. This shell can have various capabilities, thereby acting as a "gateway" to the underlying web server. The shell might execute at the higher permission level of the web server, providing the ability the execute malicious code at elevated levels.</Description><Mitigations><Mitigation>Make sure your web server is up-to-date with all patches to protect against known vulnerabilities.</Mitigation><Mitigation>Ensure that the file permissions in directories on the web server from which files can be execute is set to the "least privilege" settings, and that those directories contents is controlled by an allowlist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>553</CWE_ID><Name>Command Shell in Externally Accessible Directory</Name><Description>A possible shell file exists in /cgi-bin/ or other accessible directories. This is extremely dangerous and can be used by an attacker to execute commands on the web server.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1111</Entry_ID><Entry_Name>Multi-Factor Authentication Interception</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Eavesdropping</Name><Description>An adversary intercepts a form of communication (e.g. text, audio, video) by way of software (e.g., microphone and audio recording application), hardware (e.g., recording equipment), or physical means (e.g., physical proximity). The goal of eavesdropping is typically to gain unauthorized access to sensitive information about the target for financial, personal, political, or other gains. Eavesdropping is different from a sniffing attack as it does not take place on a network-based communication channel (e.g., IP traffic). Instead, it entails listening in on the raw audio source of a conversation between two or more parties.</Description><Mitigations><Mitigation>Be mindful of your surroundings when discussing sensitive information in public areas.</Mitigation><Mitigation>Implement proper software restriction policies to only allow authorized software on your environment. Use of anti-virus and other security monitoring and detecting tools can aid in this too. Closely monitor installed software for unusual behavior or activity, and implement patches as soon as they become available.</Mitigation><Mitigation>If possible, physically disable the microphone on your machine if it is not needed.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1558</Entry_ID><Entry_Name>Steal or Forge Kerberos Tickets</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Use of Known Kerberos Credentials</Name><Description>An adversary obtains (i.e. steals or purchases) legitimate Kerberos credentials (e.g. Kerberos service account userID/password or Kerberos Tickets) with the goal of achieving authenticated access to additional systems, applications, or services within the domain.</Description><Mitigations><Mitigation>Create a strong password policy and ensure that your system enforces this policy for Kerberos service accounts.</Mitigation><Mitigation>Ensure Kerberos service accounts are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation><Mitigation>Do not reuse Kerberos service account credentials across systems.</Mitigation><Mitigation>Deny remote use of Kerberos service account credentials to log into domain systems.</Mitigation><Mitigation>Do not allow Kerberos service accounts to be a local administrator on more than one system.</Mitigation><Mitigation>Enable at least AES Kerberos encryption for tickets.</Mitigation><Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>836</CWE_ID><Name>Use of Password Hash Instead of Password for Authentication</Name><Description>Product allows attackers to bypass authentication by obtaining the password hash for another user and specifying the hash in the pwd argument.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Use of Known Operating System Credentials</Name><Description>An adversary guesses or obtains (i.e. steals or purchases) legitimate operating system credentials (e.g. userID/password) to achieve authentication and to perform authorized actions on the system, under the guise of an authenticated user or service. This applies to any Operating System.</Description><Mitigations><Mitigation>Leverage multi-factor authentication for all authentication services and prior to granting an entity access to the network.</Mitigation><Mitigation>Create a strong password policy and ensure that your system enforces this policy.</Mitigation><Mitigation>Ensure users are not reusing username/password combinations for multiple systems, applications, or services.</Mitigation><Mitigation>Do not reuse local administrator account credentials across systems.</Mitigation><Mitigation>Deny remote use of local admin credentials to log into domain systems.</Mitigation><Mitigation>Do not allow accounts to be a local administrator on more than one system.</Mitigation><Mitigation>Implement an intelligent password throttling mechanism. Care must be taken to assure that these mechanisms do not excessively enable account lockout attacks such as CAPEC-2.</Mitigation><Mitigation>Monitor system and domain logs for abnormal credential access.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>522</CWE_ID><Name>Insufficiently Protected Credentials</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>307</CWE_ID><Name>Improper Restriction of Excessive Authentication Attempts</Name><Description>User accounts not disabled when they exceed a threshold; possibly a resultant problem.</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1056</Entry_ID><Entry_Name>Input Capture</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1548.004</Entry_ID><Entry_Name>Abuse Elevation Control Mechanism: Elevated Execution with Prompt</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Credential Prompt Impersonation</Name><Description>An adversary, through a previously installed malicious application, impersonates a credential prompt in an attempt to steal a user's credentials.</Description><Mitigations><Mitigation>The only known mitigation to this attack is to avoid installing the malicious application on the device. However, to impersonate a running task the malicious application does need the GET_TASKS permission to be able to query the task list, and being suspicious of applications with that permission can help.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1021</CWE_ID><Name>Improper Restriction of Rendered UI Layers or Frames</Name><Description>System UI in mobile OS allows a malicious application to create a UI overlay of the entire screen to gain privileges.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1027.001</Entry_ID><Entry_Name>Obfuscated Files or Information:Binary padding</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Avoid Security Tool Identification by Adding Data</Name><Description>
            </Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>Adding data to change the checksum of a file and can be used to avoid hash-based denylists and static anti-virus signatures.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Voice Phishing</Name><Description>An adversary targets users with a phishing attack for the purpose of soliciting account passwords or sensitive information from the user. Voice Phishing is a variation of the Phishing social engineering technique where the attack is initiated via a voice call, rather than email. The user is enticed to provide sensitive information by the adversary, who masquerades as a legitimate employee of the alleged organization. Voice Phishing attacks deviate from standard Phishing attacks, in that a user doesn't typically interact with a compromised website to provide sensitive information and instead provides this information verbally. Voice Phishing attacks can also be initiated by either the adversary in the form of a "cold call" or by the victim if calling an illegitimate telephone number.</Description><Mitigations><Mitigation>Do not accept calls from unknown numbers or from numbers that may be flagged as spam. Also, do not call numbers that appear on-screen after being unexpectedly redirected to potentially malicious websites. In either case, do not provide sensitive information over voice calls that are not legitimately initiated. Instead, call your Bank, PayPal, eBay, etc., via the number on their public-facing website and inquire about the problem.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1072</Entry_ID><Entry_Name>Software Deployment Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Automated Software Update via Spoofing</Name><Description>An attackers uses identify or content spoofing to trick a client into performing an automated software update from a malicious source. A malicious automated software update that leverages spoofing can include content or identity spoofing as well as protocol spoofing. Content or identity spoofing attacks can trigger updates in software by embedding scripted mechanisms within a malicious web page, which masquerades as a legitimate update source. Scripting mechanisms communicate with software components and trigger updates from locations specified by the attackers' server. The result is the client believing there is a legitimate software update available but instead downloading a malicious update from the attacker.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>19</Entry_ID><Entry_Name>SQL Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>SQL Injection</Name><Description>This attack exploits target software that constructs SQL statements based on user input. An attacker crafts input strings so that when the target software constructs SQL statements based on the input, the resulting SQL statement performs actions other than those the application intended. SQL Injection results from failure of the application to appropriately validate input.</Description><Mitigations><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</Mitigation><Mitigation>Use of parameterized queries or stored procedures - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails. Note that SQL Injection is possible even in the presence of stored procedures if the eventual query is constructed dynamically.</Mitigation><Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>89</CWE_ID><Name>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Name><Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description></Weakness><Weakness><CWE_ID>1286</CWE_ID><Name>Improper Validation of Syntactic Correctness of Input</Name><Description>HTTP request with missing protocol version number leads to crash</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1055</Entry_ID><Entry_Name>Process Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Root/Jailbreak Detection Evasion via Hooking</Name><Description>An adversary forces a non-restricted mobile application to load arbitrary code or code files, via Hooking, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Adversaries may further leverage these capabilities to escalate privileges or bypass access control on legitimate applications. Although many mobile applications check if a mobile device is Rooted/Jailbroken prior to authorized use of the application, adversaries may be able to "hook" code in order to circumvent these checks. Successfully evading Root/Jailbreak detection allows an adversary to execute administrative commands, obtain confidential data, impersonate legitimate users of the application, and more.</Description><Mitigations><Mitigation>Ensure mobile applications are signed appropriately to avoid code inclusion via hooking.</Mitigation><Mitigation>Inspect the application's memory for suspicious artifacts, such as shared objects/JARs or dylibs, after other Root/Jailbreak detection methods.</Mitigation><Mitigation>Inspect the application's stack trace for suspicious method calls.</Mitigation><Mitigation>Allow legitimate native methods, and check for non-allowed native methods during Root/Jailbreak detection methods.</Mitigation><Mitigation>For iOS applications, ensure application methods do not originate from outside of Apple's SDK.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Root/Jailbreak Detection Evasion via Debugging</Name><Description>An adversary inserts a debugger into the program entry point of a mobile application to modify the application binary, with the goal of evading Root/Jailbreak detection. Mobile device users often Root/Jailbreak their devices in order to gain administrative control over the mobile operating system and/or to install third-party mobile applications that are not provided by authorized application stores (e.g. Google Play Store and Apple App Store). Rooting/Jailbreaking a mobile device also provides users with access to system debuggers and disassemblers, which can be leveraged to exploit applications by dumping the application's memory at runtime in order to remove or bypass signature verification methods. This further allows the adversary to evade Root/Jailbreak detection mechanisms, which can result in execution of administrative commands, obtaining confidential data, impersonating legitimate users of the application, and more.</Description><Mitigations><Mitigation>Instantiate checks within the application code that ensures debuggers are not attached.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>489</CWE_ID><Name>Active Debug Code</Name><Description>The product is deployed to unauthorized actors with debugging code still enabled or active, which can create unintended entry points or expose sensitive information.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1185</Entry_ID><Entry_Name>Man in the Browser</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Adversary in the Browser (AiTB)</Name><Description>
            </Description><Mitigations><Mitigation>Ensure software and applications are only downloaded from legitimate and reputable sources, in addition to conducting integrity checks on the downloaded component.</Mitigation><Mitigation>Leverage anti-malware tools, which can detect Trojan Horse malware.</Mitigation><Mitigation>Use strong, out-of-band mutual authentication to always fully authenticate both ends of any communications channel.</Mitigation><Mitigation>Limit user permissions to prevent browser pivoting.</Mitigation><Mitigation>Ensure browser sessions are regularly terminated and when their effective lifetime ends.</Mitigation></Mitigations><Examples><Example><Reference>An adversary conducts a phishing attack and tricks a victim into installing a malicious browser plugin. The adversary then positions themself between the victim and their banking institution. The victim begins by initiating a funds transfer from their personal savings to their personal checking account. Using injected JavaScript, the adversary captures this request and modifies it to transfer an increased amount of funds to an account that they controls, before sending it to the bank. The bank processes the transfer and sends the confirmation notice back to the victim, which is instead intercepted by the adversary. The adversary modifies the confirmation to reflect the original transaction details and sends this modified message back to the victim. Upon receiving the confirmation, the victim assumes the transfer was successful and is unaware that their money has just been transferred to the adversary.</Reference><Description /></Example><Example><Reference>In 2020, the Agent Tesla malware was leveraged to conduct AiTB attacks against organizations within the gas, oil, and other energy sectors. The malware was delivered via a spearphishing campaign and has the capability to form-grab, keylog, copy clipboard data, extract credentials, and capture screenshots. [REF-630]</Reference><Description /></Example><Example><Reference>Boy in the browser attacks are a subset of AiTB attacks. Similar to AiTB attacks, the adversary must first trick the victim into installing a Trojan, either via social engineering or drive-by-download attacks. The malware then modifies the victim's "hosts" file in order to reroute web traffic from an intended website to an adversary-controlled website that mimics the legitimate website. The adversary is now able to observe, intercept, and/or modify all traffic, as in a traditional Adversary in the Middle attack (CAPEC-94). BiTB attacks are low-cost, easy to execute, and more difficult to detect since the malware often removes itself once the attack has concluded. [REF-631]</Reference><Description /></Example><Example><Reference>Man in the Mobile attacks are a subset of AiTB attacks that target mobile device users. Like AiTB attacks, an adversary convinces a victim to install a Trojan mobile application on their mobile device, often under the guise of security. Once the victim has installed the application, the adversary can capture all SMS traffic to bypass SMS-based out-of-band authentication systems. [REF-632]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploitation of Transient Instruction Execution</Name><Description>An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution to expose sensitive data and bypass/subvert access control over restricted resources. Typically, the adversary conducts a covert channel attack to target non-discarded microarchitectural changes caused by transient executions such as speculative execution, branch prediction, instruction pipelining, and/or out-of-order execution. The transient execution results in a series of instructions (gadgets) which construct covert channel and access/transfer the secret data.</Description><Mitigations><Mitigation>Implementation: DAWG (Dynamically Allocated Way Guard) - processor cache properly divided between different programs/processes that don't share resources</Mitigation><Mitigation>Implementation: KPTI (Kernel Page-Table Isolation) to completely separate user-space and kernel space page tables</Mitigation><Mitigation>Configuration: Architectural Design of Microcode to limit abuse of speculative execution and out-of-order execution</Mitigation><Mitigation>Configuration: Disable SharedArrayBuffer for Web Browsers</Mitigation><Mitigation>Configuration: Disable Copy-on-Write between Cloud VMs</Mitigation><Mitigation>Configuration: Privilege Checks on Cache Flush Instructions</Mitigation><Mitigation>Implementation: Non-inclusive Cache Memories to prevent Flush+Reload Attacks</Mitigation></Mitigations><Examples><Example><Reference>A web browser with user-privileges executes JavaScript code imbedded within a malicious website. The system does not disable shared buffers for the web browser and there is no restriction or check upon user-process execution of flush or evict instructions. The Javascript code executes vulnerable transient instructions upon system to cause microarchitectural changes that establish covert channel and transfer sensitive/secret data into shared cache from address space of either kernel, web browser or another executing process on the system.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1037</CWE_ID><Name>Processor Optimization Removal or Modification of Security-critical Code</Name><Description>Intel processor optimizations related to speculative execution cause access control checks to be bypassed when placing data into the cache. Often known as "Meltdown".</Description></Weakness><Weakness><CWE_ID>1303</CWE_ID><Name>Non-Transparent Sharing of Microarchitectural Resources</Name><Description>Hardware structures shared across execution contexts (e.g., caches and branch predictors) can violate the expected architecture isolation between contexts.</Description></Weakness><Weakness><CWE_ID>1264</CWE_ID><Name>Hardware Logic with Insecure De-Synchronization between Control and Data Channels</Name><Description>Systems with microprocessors utilizing speculative execution and indirect branch prediction may allow unauthorized disclosure of information to an attacker with local user access via a side-channel analysis of the data cache.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Server Side Request Forgery</Name><Description>
            </Description><Mitigations><Mitigation>Handling incoming requests securely is the first line of action to mitigate this vulnerability. This can be done through URL validation.</Mitigation><Mitigation>Further down the process flow, examining the response and verifying that it is as expected before sending would be another way to secure the server.</Mitigation><Mitigation>Allowlist the DNS name or IP address of every service the web application is required to access is another effective security measure. This ensures the server cannot make external requests to arbitrary services.</Mitigation><Mitigation>Requiring authentication for local services adds another layer of security between the adversary and internal services running on the server. By enforcing local authentication, an adversary will not gain access to all internal services only with access to the server.</Mitigation><Mitigation>Enforce the usage of relevant URL schemas. By limiting requests be made only through HTTP or HTTPS, for example, attacks made through insecure schemas such as file://, ftp://, etc. can be prevented.</Mitigation></Mitigations><Examples><Example><Reference>An e-commerce website allows a customer to filter results by specific categories. When the customer selects the category of choice, the web shop queries a back-end service to retrieve the requested products. The request may look something like: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://vulnerableshop.net:8080/product/category/check%3FcategoryName%3DsomeCategory A malicious user can modify the request URL to look like this instead: POST /product/category HTTP/1.0 Content-Type: application/x-www-form-urlencoded Content-Length: 200 vulnerableService=http://localhost/server-status or vulnerableService = file:///etc/passwd or vulnerableService=dict://localhost:12345/info If the exploit is successful, the server may return the data requested by the adversary root:!:0:0::/:/usr/bin/ksh daemon:!:1:1::/etc: bin:!:2:2::/bin: sys:!:3:3::/usr/sys: adm:!:4:4::/var/adm: uucp:!:5:5::/usr/lib/uucp: guest:!:100:100::/home/guest: nobody:!:4294967294:4294967294::/: lpd:!:9:4294967294::/: lp:*:11:11::/var/spool/lp:/bin/false invscout:*:200:1::/var/adm/invscout:/usr/bin/ksh nuucp:*:6:5:uucp login user:/var/spool/uucppublic:/usr/sbin/uucp/uucico paul:!:201:1::/home/paul:/usr/bin/ksh jdoe:*:202:1:My name:/home/myname:/usr/bin/ksh</Reference><Description /></Example><Example><Reference>The CallStranger attack is an observed example of SSRF. It specifically targets the UPnP (Universal Plug and Play) protocol used by various network devices and gaming consoles. To execute the attack, an adversary performs a scan of the LAN to discover UPnP enabled devices, and subsequently a list of UPnP services they use. Once the UPnP service endpoints are listed, a vulnerability in the UPnP protocol is used to send these endpoints as encrypted to a verification server via the UPnP Callback method. Because the encryption is done on the client side, the server returns an encrypted list of services which is decrypted on the client side. The adversary then has a list of services running the vulnerable UPnP protocol, which the adversary can leverage to make spoofed requests. [REF-646]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>918</CWE_ID><Name>Server-Side Request Forgery (SSRF)</Name><Description>URL-downloading library automatically follows redirects to file:// and scp:// URLs</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1211</Entry_ID><Entry_Name>Exploitation for Defensive Evasion</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1542.002</Entry_ID><Entry_Name>Pre-OS Boot: Component Firmware</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1556</Entry_ID><Entry_Name>Modify Authentication Process</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Exploitation of Thunderbolt Protection Flaws</Name><Description>
            </Description><Mitigations><Mitigation>Implementation: Kernel Direct Memory Access Protection</Mitigation><Mitigation>Configuration: Enable UEFI option USB Passthrough mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface</Mitigation><Mitigation>Configuration: Enable UEFI option DisplayPort mode - Thunderbolt 3 system port operates as video-only DP interface</Mitigation><Mitigation>Configuration: Enable UEFI option Mixed USB/DisplayPort mode - Thunderbolt 3 system port operates as USB 3.1 Type C interface with support for DP mode</Mitigation><Mitigation>Configuration: Set Security Level to SL3 for Thunderbolt 2 system port</Mitigation><Mitigation>Configuration: Disable PCIe tunneling to set Security Level to SL3</Mitigation><Mitigation>Configuration: Disable Boot Camp upon MacOS systems</Mitigation></Mitigations><Examples><Example><Reference>An adversary steals a password protected laptop that contains a Thunderbolt 3 enabled port, from a work environment. The adversary uses a screw driver to remove the back panel of the laptop and connects a SPI Programming device to the Thunderbolt Host Controller SPI Flash of the stolen victim device to interface with it on the adversary's own Thunderbolt enabled device via Thunderbolt cables. The SPI Programming device is utilized to execute scripts/tools from the adversary's own system to copy, parse, and modify the victim's Thunderbolt firmware stored on SPI Flash. The device UUID value is obtained, by computing the appropriate offset based upon Thunderbolt firmware version and the OS of victim device, from the DROM section of victim Thunderbolt host controller firmware image. The firmware image is written to adversary Thunderbolt host controller SPI flash to clone and spoof victim device identity. The adversary reboots the victim device, with the victim device identifying the Thunderbolt connection of the adversary's Thunderbolt device as itself and enables PCIe tunneling. The adversary finally transfers the hard drive and memory contents of victim device across Thunderbolt connection.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness><Weakness><CWE_ID>288</CWE_ID><Name>Authentication Bypass Using an Alternate Path or Channel</Name><Description>User can avoid lockouts by using an API instead of the GUI to conduct brute force password guessing.</Description></Weakness><Weakness><CWE_ID>1188</CWE_ID><Name>Initialization of a Resource with an Insecure Default</Name><Description>A generic database browser interface has a default mode that exposes a web server to the network, allowing queries to the database.</Description></Weakness><Weakness><CWE_ID>862</CWE_ID><Name>Missing Authorization</Name><Description>Chain: unchecked return value (CWE-252) of some functions for policy enforcement leads to authorization bypass (CWE-862)</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1498.001</Entry_ID><Entry_Name>Network Denial of Service: Direct Network Flood</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1499.001</Entry_ID><Entry_Name>Endpoint Denial of Service: OS Exhaustion Flood</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>BlueSmacking</Name><Description>An adversary uses Bluetooth flooding to transfer large packets to Bluetooth enabled devices over the L2CAP protocol with the goal of creating a DoS. This attack must be carried out within close proximity to a Bluetooth enabled device.</Description><Mitigations><Mitigation>Disable Bluetooth when not being used.</Mitigation><Mitigation>When using Bluetooth, set it to hidden or non-discoverable mode.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>404</CWE_ID><Name>Improper Resource Shutdown or Release</Name><Description>Chain: Return values of file/socket operations are not checked (CWE-252), allowing resultant consumption of file descriptors (CWE-772).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Bluetooth Impersonation AttackS (BIAS)</Name><Description>An adversary disguises the MAC address of their Bluetooth enabled device to one for which there exists an active and trusted connection and authenticates successfully. The adversary can then perform malicious actions on the target Bluetooth device depending on the target’s capabilities.</Description><Mitigations><Mitigation>Disable Bluetooth in public places.</Mitigation><Mitigation>Verify incoming Bluetooth connections; do not automatically trust.</Mitigation><Mitigation>Change default PIN passwords and always use one when connecting.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1565.002</Entry_ID><Entry_Name>Data Manipulation: Transmitted Data Manipulation</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Key Negotiation of Bluetooth Attack (KNOB)</Name><Description>An adversary can exploit a flaw in Bluetooth key negotiation allowing them to decrypt information sent between two devices communicating via Bluetooth. The adversary uses an Adversary in the Middle setup to modify packets sent between the two devices during the authentication process, specifically the entropy bits. Knowledge of the number of entropy bits will allow the attacker to easily decrypt information passing over the line of communication.</Description><Mitigations><Mitigation>Newer Bluetooth firmwares ensure that the KNOB is not negotaited in plaintext. Update your device.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>425</CWE_ID><Name>Direct Request ('Forced Browsing')</Name><Description>Upload arbitrary files via direct request.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Alteration of a Software Update</Name><Description>
            </Description><Mitigations><Mitigation>Have a Software Assurance Plan that includes maintaining strict configuration management control of source code, object code and software development, build and distribution tools; manual code reviews and static code analysis for developmental software; and tracking of all storage and movement of code.</Mitigation><Mitigation>Require elevated privileges for distribution of software and software updates.</Mitigation></Mitigations><Examples><Example><Reference>A subcontractor to a software developer injects maliciously altered software updates into an automated update process that distributes to government and commercial customers software containing a hidden backdoor.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>06</Entry_ID><Entry_Name>Format String</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>String Format Overflow in syslog()</Name><Description>This attack targets applications and software that uses the syslog() function insecurely. If an application does not explicitely use a format string parameter in a call to syslog(), user input can be placed in the format string parameter leading to a format string injection attack. Adversaries can then inject malicious format string commands into the function call leading to a buffer overflow. There are many reported software vulnerabilities with the root cause being a misuse of the syslog() function.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>134</CWE_ID><Name>Use of Externally-Controlled Format String</Name><Description>Chain: untrusted search path enabling resultant format string by loading malicious internationalization messages</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1127</Entry_ID><Entry_Name>Trusted Developer Utilities Proxy Execution</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Software Development Tools Maliciously Altered</Name><Description>An adversary with the ability to alter tools used in a development environment causes software to be developed with maliciously modified tools. Such tools include requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools. The adversary then carries out malicious acts once the software is deployed including malware infection of other systems to support further compromises.</Description><Mitigations><Mitigation>Have a security concept of operations (CONOPS) for the development environment that includes: Maintaining strict security administration and configuration management of requirements management and database tools, software design tools, configuration management tools, compilers, system build tools, and software performance testing and load testing tools.</Mitigation><Mitigation>Avoid giving elevated privileges to developers.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Requirements for ASIC Functionality Maliciously Altered</Name><Description>An adversary with access to functional requirements for an application specific integrated circuit (ASIC), a chip designed/customized for a singular particular use, maliciously alters requirements derived from originating capability needs. In the chip manufacturing process, requirements drive the chip design which, when the chip is fully manufactured, could result in an ASIC which may not meet the user’s needs, contain malicious functionality, or exhibit other anomalous behaviors thereby affecting the intended use of the ASIC.</Description><Mitigations><Mitigation>Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.</Mitigation><Mitigation>Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for hardware requirements and design.</Mitigation><Mitigation>Require that provenance of COTS microelectronic components be known whenever procured.</Mitigation><Mitigation>Conduct detailed vendor assessment before acquiring COTS hardware.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Malicious Code Implanted During Chip Programming</Name><Description>
            </Description><Mitigations><Mitigation>Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.</Mitigation><Mitigation>Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management of microcode and microcode generating tools and software.</Mitigation><Mitigation>Require that provenance of COTS microelectronic components be known whenever procured.</Mitigation><Mitigation>Conduct detailed vendor assessment before acquiring COTS hardware.</Mitigation></Mitigations><Examples><Example><Reference>Following a chip’s production process steps of test and verification and validation of chip circuitry, an adversary involved in the generation of microcode defining the chip’s function(s) inserts a malicious instruction that will become part of the chip’s program. When integrated into a system, the chip will produce an effect intended by the adversary.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Developer Signing Maliciously Altered Software</Name><Description>
            </Description><Mitigations><Mitigation>Have a security concept of operations (CONOPS) for the IDE that includes: Protecting the IDE via logical isolation using firewall and DMZ technologies/architectures; Maintaining strict security administration and configuration management of configuration management tools, developmental software and dependency code repositories, compilers, and system build tools.</Mitigation><Mitigation>Employ intrusion detection and malware detection capabilities on IDE systems where feasible.</Mitigation></Mitigations><Examples><Example><Reference>An adversary who has infiltrated an organization’s build environment maliciously alters code intended to be included in a product’s software build via software dependency inclusion, part of the software build process. When the software product has been built, the developer electronically signs the finished product using their signing key. The recipient of the software product, an end user/customer, believes the software to reflect the developer’s intent with respect to functionality unaware of the adversary’s malicious intent harbored within.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Design for FPGA Maliciously Altered</Name><Description>
            </Description><Mitigations><Mitigation>Utilize DMEA’s (Defense Microelectronics Activity) Trusted Foundry Program members for acquisition of microelectronic components.</Mitigation><Mitigation>Ensure that each supplier performing hardware development implements comprehensive, security-focused configuration management including for FPGA programming and program uploads to FPGA chips.</Mitigation><Mitigation>Require that provenance of COTS microelectronic components be known whenever procured.</Mitigation><Mitigation>Conduct detailed vendor assessment before acquiring COTS hardware.</Mitigation></Mitigations><Examples><Example><Reference>An adversary with access and the ability to alter the configuration/programming of FPGAs in organizational systems, introduces a trojan backdoor that can be used to alter the behavior of the original system resulting in, for example, compromise of confidentiality of data being processed.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1052</Entry_ID><Entry_Name>Exfiltration Over Physical Medium</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Retrieve Data from Decommissioned Devices</Name><Description>
            </Description><Mitigations><Mitigation>Backup device data before erasure to retain intellectual property and inside knowledge.</Mitigation><Mitigation>Overwrite data on device rather than deleting. Deleted data can still be recovered, even if the device trash can is emptied. Rewriting data removes any trace of the old data. Performing multiple overwrites followed by a zeroing of the device (overwriting with all zeros) is good practice.</Mitigation><Mitigation>Use a secure erase software.</Mitigation><Mitigation>Physically destroy the device if it is not intended to be reused. Using a specialized service to disintegrate, burn, melt or pulverize the device can be effective, but if those services are inaccessible, drilling nails or holes, or smashing the device with a hammer can be effective. Do not burn, microwave, or pour acid on a hard drive.</Mitigation><Mitigation>Physically destroy memory and SIM cards for mobile devices not intended to be reused.</Mitigation><Mitigation>Ensure that the user account has been terminated or switched to a new device before destroying.</Mitigation></Mitigations><Examples><Example><Reference>A company is contracted by an organization to provide data destruction services for solid state and hard disk drives being discarded. Prior to destruction, an adversary within the contracted company copies data from select devices, violating the data confidentiality requirements of the submitting organization.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1266</CWE_ID><Name>Improper Scrubbing of Sensitive Data from Decommissioned Device</Name><Description>The product does not properly provide a capability for the product administrator to remove sensitive data at the time the product is decommissioned.  A scrubbing capability could be missing, insufficient, or incorrect.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>NoSQL Injection</Name><Description>
            </Description><Mitigations><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as relevant NoSQL and JavaScript content. NoSQL-specific keywords, such as $ne, $eq or $gt for MongoDB, must be filtered in addition to characters such as a single-quote(') or semicolons (;) based on the context in which they appear. Validation should also extend to expected types.</Mitigation><Mitigation>If possible, leverage safe APIs (e.g., PyMongo and Flask-PyMongo for Python and MongoDB) for queries as opposed to building queries from strings.</Mitigation><Mitigation>Ensure the most recent version of a NoSQL database and it's corresponding API are used by the application.</Mitigation><Mitigation>Use of custom error pages - Adversaries can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation><Mitigation>Exercise the principle of Least Privilege with regards to application accounts to minimize damage if a NoSQL injection attack is successful.</Mitigation><Mitigation>If using MongoDB, disable server-side JavaScript execution and leverage a sanitization module such as "mongo-sanitize".</Mitigation><Mitigation>If using PHP with MongoDB, ensure all special query operators (starting with $) use single quotes to prevent operator replacement attacks.</Mitigation><Mitigation>Additional mitigations will depend on the NoSQL database, API, and programming language leveraged by the application.</Mitigation></Mitigations><Examples><Example><Reference>The following examples primarily cite MongoDB, PHP, and NodeJS attacks due to their prominence and popularity. However, please note that these attacks are not exclusive to this NoSQL instance, programming language, or runtime framework. Within NodeJS, Login Bypass attacks are possible via MongoDB if user-input is not properly validated and sanitized [REF-670]. The above code works fine if the user were to submit a query like the following: https://example.org/login?user=patrick&amp;password=1234 But an adversary could submit a malicious query such as the below, which would be interpreted by the code as follows: https://example.org/login?user=patrick&amp;password[$ne]= This will result in a Login Bypass attack, as the query will succeed for all values where Bob's password is not an empty string.</Reference><Description /></Example><Example><Reference>MongoDB instances are also vulnerable to JavaScript Injection Attacks when user input is not properly validated and sanitized. If the user properly specifies a username, then this code will execute as intended. However, an adversary can inject JavaScript into the "$username" variable to achieve a NoSQL Injection attack as follows: This will result in the server sleeping for 5 seconds if the attack was successful. An adversary could supply a larger value to deny service to the application.</Reference><Description /></Example><Example><Reference>If leveraging PHP with MongoDB, operator replacement attacks are possible if special query operators are not properly addressed. The below example from OWASP's "Test for NoSQL Injection" displays a simple case of how this could occur.[REF-668] Even though the above query does not depend on any user input, it is vulnerable to a NoSQL injection attack via operator replacement on the "$where" keyword. In this case, the adversary could exploit MongoDB in the following manner:</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>943</CWE_ID><Name>Improper Neutralization of Special Elements in Data Query Logic</Name><Description>Injection using Documentum Query Language (DQL)</Description></Weakness><Weakness><CWE_ID>1286</CWE_ID><Name>Improper Validation of Syntactic Correctness of Input</Name><Description>HTTP request with missing protocol version number leads to crash</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.003</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Hardware Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Server Motherboard Compromise</Name><Description>
            </Description><Mitigations><Mitigation>Purchase IT systems, components and parts from government approved vendors whenever possible.</Mitigation><Mitigation>Establish diversity among suppliers.</Mitigation><Mitigation>Conduct rigorous threat assessments of suppliers.</Mitigation><Mitigation>Require that Bills of Material (BoM) for critical parts and components be certified.</Mitigation><Mitigation>Utilize contract language requiring contractors and subcontractors to flow down to subcontractors and suppliers SCRM and SCRA (Supply Chain Risk Assessment) requirements.</Mitigation><Mitigation>Establish trusted supplier networks.</Mitigation></Mitigations><Examples><Example><Reference>Malware is inserted into the Unified Extensible Firmware Interface (UEFI) software that resides on a flash memory chip soldered to a computer’s motherboard. It is the first thing to turn on when a system is booted and is allowed access to almost every part of the operating system. Hence, the malware will have extensive control over operating system functions and persist after system reboots. [REF-685]</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>System Build Data Maliciously Altered</Name><Description>
            </Description><Mitigations><Mitigation>Implement configuration management security practices that protect the integrity of software and associated data.</Mitigation><Mitigation>Monitor and control access to the configuration management system.</Mitigation><Mitigation>Harden centralized repositories against attack.</Mitigation><Mitigation>Establish acceptance criteria for configuration management check-in to assure integrity.</Mitigation><Mitigation>Plan for and audit the security of configuration management administration processes.</Mitigation><Mitigation>Maintain configuration control over operational systems.</Mitigation></Mitigations><Examples><Example><Reference>‘Make’ is a program used for building executable programs and libraries from source code by executing commands and following rules in a ‘makefile’. It can create a malicious executable if commands or dependency paths in the makefile are maliciously altered to execute an unwanted command or reference as a dependency maliciously altered code.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploitation of Improperly Configured or Implemented Memory Protections</Name><Description>
            </Description><Mitigations><Mitigation>Ensure that protected and unprotected memory ranges are isolated and do not overlap.</Mitigation><Mitigation>If memory regions must overlap, leverage memory priority schemes if memory regions can overlap.</Mitigation><Mitigation>Ensure that original and mirrored memory regions apply the same protections.</Mitigation><Mitigation>Ensure immutable code or data is programmed into ROM or write-once memory.</Mitigation></Mitigations><Examples><Example><Reference>A hardware product contains non-volatile memory, which itself contains boot code that is insufficiently protected. An adversary then modifies this memory to either bypass the secure boot process or to execute their own code.</Reference><Description /></Example><Example><Reference>A hardware product leverages a CPU that does not possess a memory-protection unit (MPU) and a memory-management unit (MMU) nor a special bit to support write exclusivity, resulting in no write exclusivity. Because of this, an adversary is able to inject malicious code into the memory and later execute it to achieve the desired outcome.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1222</CWE_ID><Name>Insufficient Granularity of Address Regions Protected by Register Locks</Name><Description>The product defines a large address region protected from modification by the same register lock control bit. This results in a conflict between the functional requirement that some addresses need to be writable by software during operation and the security requirement that the system configuration lock bit must be set during the boot process.</Description></Weakness><Weakness><CWE_ID>1252</CWE_ID><Name>CPU Hardware Not Configured to Support Exclusivity of Write and Execute Operations</Name><Description>The CPU is not configured to provide hardware support for exclusivity of write and execute operations on memory. This allows an attacker to execute data from all of memory.</Description></Weakness><Weakness><CWE_ID>1257</CWE_ID><Name>Improper Access Control Applied to Mirrored or Aliased Memory Regions</Name><Description>Aliased or mirrored memory regions in hardware designs may have inconsistent read/write permissions enforced by the hardware. A possible result is that an untrusted agent is blocked from accessing a memory region but is not blocked from accessing the corresponding aliased memory region.
			</Description></Weakness><Weakness><CWE_ID>1260</CWE_ID><Name>Improper Handling of Overlap Between Protected Memory Ranges</Name><Description>processor design flaw allows ring 0 code to access more privileged rings by causing a register window to overlap a range of protected system RAM [REF-1100]</Description></Weakness><Weakness><CWE_ID>1274</CWE_ID><Name>Improper Access Control for Volatile Memory Containing Boot Code</Name><Description>Locked memory regions may be modified through other interfaces in a secure-boot-loader image due to improper access control.</Description></Weakness><Weakness><CWE_ID>1282</CWE_ID><Name>Assumed-Immutable Data is Stored in Writable Memory</Name><Description>Immutable data, such as a first-stage bootloader, device identifiers, and "write-once" configuration settings are stored in writable memory that can be re-programmed or updated in the field.</Description></Weakness><Weakness><CWE_ID>1312</CWE_ID><Name>Missing Protection for Mirrored Regions in On-Chip Fabric Firewall</Name><Description>The firewall in an on-chip fabric protects the main addressed region, but it does not protect any mirrored memory or memory-mapped-IO (MMIO) regions.</Description></Weakness><Weakness><CWE_ID>1316</CWE_ID><Name>Fabric-Address Map Allows Programming of Unwarranted Overlaps of Protected and Unprotected Ranges</Name><Description>Attacker can modify MCHBAR register to overlap with an attacker-controlled region, which modification prevents the SENTER instruction from properly applying VT-d protection while a Measured Launch Environment is being launched.</Description></Weakness><Weakness><CWE_ID>1326</CWE_ID><Name>Missing Immutable Root of Trust in Hardware</Name><Description>A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1553.002</Entry_ID><Entry_Name>Subvert Trust Controls: Code Signing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Subvert Code-signing Facilities</Name><Description>Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack.</Description><Mitigations><Mitigation>A given code signing scheme may be fallible due to improper use of cryptography. Developers must never roll out their own cryptography, nor should existing primitives be modified or ignored.</Mitigation><Mitigation>If an attacker cannot attack the scheme directly, they might try to alter the environment that affects the signing and verification processes. A possible mitigation is to avoid reliance on flags or environment variables that are user-controllable.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>325</CWE_ID><Name>Missing Cryptographic Step</Name><Description>Missing challenge-response step allows authentication bypass using public key.</Description></Weakness><Weakness><CWE_ID>328</CWE_ID><Name>Use of Weak Hash</Name><Description>Hard-coded hashed values for username and password contained in client-side script, allowing brute-force offline attacks.</Description></Weakness><Weakness><CWE_ID>1326</CWE_ID><Name>Missing Immutable Root of Trust in Hardware</Name><Description>A missing immutable root of trust in the hardware results in the ability to bypass secure boot or execute untrusted or adversarial boot code.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploitation of Improperly Controlled Registers</Name><Description>
            </Description><Mitigations><Mitigation>Design proper access control policies for hardware register access from software and ensure these policies are implemented in accordance with the specified design.</Mitigation><Mitigation>Ensure security lock bit protections are reviewed for design inconsistencies and common weaknesses.</Mitigation><Mitigation>Test security lock programming flow in both pre-silicon and post-silicon environments.</Mitigation><Mitigation>Leverage automated tools to test that values are not reprogrammable and that write-once fields lock on writing zeros.</Mitigation><Mitigation>Ensure that measurement data is stored in registers that are read-only or otherwise have access controls that prevent modification by an untrusted agent.</Mitigation></Mitigations><Examples><Example><Reference>During a System-on-Chip's (SoC) secure boot process, the code to be authenticated is measured to determine the code's validity. This entails the one-way hash of the code binary being calculated and extended to the previous hash. The value obtained after completion of the boot flow is then stored in a register with the intent of later verifying this value to determine if the boot flow has been tampered with. However, the register being used does not prevent an adversary from modifying the register's contents, which can result in the adversary spoofing the measurement data used in the attestation process.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1224</CWE_ID><Name>Improper Restriction of Write-Once Bit Fields</Name><Description>The hardware design control register "sticky bits" or write-once bit fields are improperly implemented, such that they can be reprogrammed by software.</Description></Weakness><Weakness><CWE_ID>1231</CWE_ID><Name>Improper Prevention of Lock Bit Modification</Name><Description>chip reset clears critical read/write lock permissions for RSA function</Description></Weakness><Weakness><CWE_ID>1233</CWE_ID><Name>Security-Sensitive Hardware Controls with Missing Lock Bit Protection</Name><Description>Chain: chipset has a race condition (CWE-362) between when an interrupt handler detects an attempt to write-enable the BIOS (in violation of the lock bit), and when the handler resets the write-enable bit back to 0, allowing attackers to issue BIOS writes during the timing window [REF-1237].</Description></Weakness><Weakness><CWE_ID>1262</CWE_ID><Name>Improper Access Control for Register Interface</Name><Description>Virtualization product does not restrict access to PCI command registers, allowing host crash from the guest.</Description></Weakness><Weakness><CWE_ID>1283</CWE_ID><Name>Mutable Attestation or Measurement Reporting Data</Name><Description>The register contents used for attestation or measurement reporting data to verify boot flow are modifiable by an adversary.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploitation of Improperly Controlled Hardware Security Identifiers</Name><Description>
            </Description><Mitigations><Mitigation>Review generation of security identifiers for design inconsistencies and common weaknesses.</Mitigation><Mitigation>Review security identifier decoders for design inconsistencies and common weaknesses.</Mitigation><Mitigation>Test security identifier definition, access, and programming flow in both pre-silicon and post-silicon environments.</Mitigation></Mitigations><Examples><Example><Reference>A system contains a register (divided into four 32-bit registers) that is used to store a 128-bit AES key for encryption/decryption, in addition to an access-policy register. The access-policy register determines which agents may access the AES-key registers, based on a corresponding security identifier. It is assumed the system has two agents: a Main-controller and an Aux-controller, with respective security identifiers "1" and "2". The Main-controller (ID "1") is meant to have access to the AES-key registers, while the Aux-controller (ID "2") has access to the access-policy register. If a SoC incorrectly generates security identifier "1" for both agents, then both agents will have access to the AES-key registers. This could further result in a Denial-of-Service (DoS) or the execution of an action that in turn could result in privilege escalation or unintended access.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1259</CWE_ID><Name>Improper Restriction of Security Token Assignment</Name><Description>The System-On-A-Chip (SoC) implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens are improperly protected.</Description></Weakness><Weakness><CWE_ID>1267</CWE_ID><Name>Policy Uses Obsolete Encoding</Name><Description>The product uses an obsolete encoding mechanism to implement access controls.</Description></Weakness><Weakness><CWE_ID>1270</CWE_ID><Name>Generation of Incorrect Security Tokens</Name><Description>The product implements a Security Token mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Tokens generated in the system are incorrect.</Description></Weakness><Weakness><CWE_ID>1294</CWE_ID><Name>Insecure Security Identifier Mechanism</Name><Description>The System-on-Chip (SoC) implements a Security Identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. However, the Security Identifiers are not correctly implemented.</Description></Weakness><Weakness><CWE_ID>1302</CWE_ID><Name>Missing Source Identifier in Entity Transactions on a System-On-Chip (SOC)</Name><Description>The product implements a security identifier mechanism to differentiate what actions are allowed or disallowed when a transaction originates from an entity. A transaction is sent without a security identifier.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploitation of Firmware or ROM Code with Unpatchable Vulnerabilities</Name><Description>An adversary may exploit vulnerable code (i.e., firmware or ROM) that is unpatchable. Unpatchable devices exist due to manufacturers intentionally or inadvertently designing devices incapable of updating their software. Additionally, with updatable devices, the manufacturer may decide not to support the device and stop making updates to their software.</Description><Mitigations><Mitigation>Design systems and products with the ability to patch firmware or ROM code after deployment to fix vulnerabilities.</Mitigation><Mitigation>Make use of OTA (Over-the-air) updates so that firmware can be patched remotely either through manual or automatic means</Mitigation></Mitigations><Examples><Example><Reference>An IoT company comes out with a line of smart products for home use such as home cameras, vacuums, and smart bulbs. The products become popular, and millions of consumers install these devices in their homes. All the devices use a custom module for encryption that is stored on a ROM chip, which is immutable memory and can't be changed. An adversary discovers that there is a vulnerability in the encryption module code that allows authentication bypass, gaining access to any device. The adversary then develops botnet code that is remotely downloaded onto the infected devices. This code scans the internet for nearby devices from the same product line and exploits the vulnerability, loading the botnet code onto these new devices. Over time, the adversary now has a botnet of devices that can carry out malicious activity such as a DDoS attacks. Once the vulnerability is found, it is impossible to remediate because the vulnerable code is unable to be updated.</Reference><Description /></Example><Example><Reference>Older smartphones can become out of date and manufacturers may stop putting out security updates as they focus on newer models. If an adversary discovers a vulnerability in an old smartphone there is a chance that a security update will not be made to mitigate it. This leaves anyone using the old smartphone vulnerable.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1277</CWE_ID><Name>Firmware Not Updateable</Name><Description>A hardware "smart lock" has weak key generation that allows attackers to steal the key by BLE sniffing, but the device's firmware cannot be upgraded and hence remains vulnerable [REF-1095].</Description></Weakness><Weakness><CWE_ID>1310</CWE_ID><Name>Missing Ability to Patch ROM Code</Name><Description>Missing an ability to patch ROM code may leave a System or System-on-Chip (SoC) in a vulnerable state.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Target Programs with Elevated Privileges</Name><Description>This attack targets programs running with elevated privileges. The adversary tries to leverage a vulnerability in the running program and get arbitrary code to execute with elevated privileges.</Description><Mitigations><Mitigation>Apply the principle of least privilege.</Mitigation><Mitigation>Validate all untrusted data.</Mitigation><Mitigation>Apply the latest patches.</Mitigation><Mitigation>Scan your services and disable the ones which are not needed and are exposed unnecessarily. Exposing programs increases the attack surface. Only expose the services which are needed and have security mechanisms such as authentication built around them.</Mitigation><Mitigation>Avoid revealing information about your system (e.g., version of the program) to anonymous users.</Mitigation><Mitigation>Make sure that your program or service fail safely. What happen if the communication protocol is interrupted suddenly? What happen if a parameter is missing? Does your system have resistance and resilience to attack? Fail safely when a resource exhaustion occurs.</Mitigation><Mitigation>If possible use a sandbox model which limits the actions that programs can take. A sandbox restricts a program to a set of privileges and commands that make it difficult or impossible for the program to cause any damage.</Mitigation><Mitigation>Check your program for buffer overflow and format String vulnerabilities which can lead to execution of malicious code.</Mitigation><Mitigation>Monitor traffic and resource usage and pay attention if resource exhaustion occurs.</Mitigation><Mitigation>Protect your log file from unauthorized modification and log forging.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>250</CWE_ID><Name>Execution with Unnecessary Privileges</Name><Description>Product launches Help functionality while running with raised privileges, allowing command execution using Windows message to access "open file" dialog.</Description></Weakness><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Metadata Spoofing</Name><Description>
            </Description><Mitigations><Mitigation>Validate metadata of resources such as authors, timestamps, and statistics.</Mitigation><Mitigation>Confirm the pedigree of open source packages and ensure the code being downloaded does not originate from another source.</Mitigation><Mitigation>Even if the metadata is properly checked and a user believes it to be legitimate, there may still be a chance that they've been duped. Therefore, leverage automated testing techniques to determine where malicious areas of the code may exist.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.002</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Supply Chain</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Spoof Open-Source Software Metadata</Name><Description>
            </Description><Mitigations><Mitigation>Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.</Mitigation><Mitigation>Within package managers, look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.</Mitigation><Mitigation>Reference vulnerability databases to determine if the software contains known vulnerabilities.</Mitigation><Mitigation>Only download open-source software from reputable hosting sites or package managers.</Mitigation><Mitigation>Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the "Verified" status and for developers leveraging "Vigilant Mode" (GitHub) or similar modes.</Mitigation><Mitigation>After downloading open-source software, ensure integrity values have not changed.</Mitigation><Mitigation>Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Spoof Version Control System Commit Metadata</Name><Description>
            </Description><Mitigations><Mitigation>Before downloading open-source software, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.</Mitigation><Mitigation>Reference vulnerability databases to determine if the software contains known vulnerabilities.</Mitigation><Mitigation>Only download open-source software from reputable hosting sites or package managers.</Mitigation><Mitigation>Only download open-source software that has been adequately signed by the developer(s). For repository commits/tags, look for the "Verified" status and for developers leveraging "Vigilant Mode" (GitHub) or similar modes.</Mitigation><Mitigation>After downloading open-source software, ensure integrity values have not changed.</Mitigation><Mitigation>Before executing or incorporating the software, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>StarJacking</Name><Description>
            </Description><Mitigations><Mitigation>Before downloading open-source packages, perform precursory metadata checks to determine the author(s), frequency of updates, when the software was last updated, and if the software is widely leveraged.</Mitigation><Mitigation>Look for conflicting or non-unique repository references to determine if multiple packages share the same repository reference.</Mitigation><Mitigation>Reference vulnerability databases to determine if the software contains known vulnerabilities.</Mitigation><Mitigation>Only download open-source packages from reputable package managers.</Mitigation><Mitigation>After downloading open-source packages, ensure integrity values have not changed.</Mitigation><Mitigation>Before executing or incorporating the package, leverage automated testing techniques (e.g., static and dynamic analysis) to determine if the software behaves maliciously.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1614</Entry_ID><Entry_Name>System Language Discovery</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>System Location Discovery</Name><Description>
            </Description><Mitigations><Mitigation>To reduce the amount of information gathered, one could disable various geolocation features of the operating system not required for system operation.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>497</CWE_ID><Name>Exposure of Sensitive System Information to an Unauthorized Control Sphere</Name><Description>Code analysis product passes access tokens as a command-line parameter or through an environment variable, making them visible to other processes via the ps command.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1195.001</Entry_ID><Entry_Name>Supply Chain Compromise: Compromise Software Dependencies and Development Tools</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Repo Jacking</Name><Description>
            </Description><Mitigations><Mitigation>Leverage dedicated package managers instead of directly linking to VCS repositories.</Mitigation><Mitigation>Utilize version pinning and lock files to prevent use of maliciously modified repositories.</Mitigation><Mitigation>Implement "vendoring" (i.e., including third-party dependencies locally) and leverage automated testing techniques (e.g., static analysis) to determine if the software behaves maliciously.</Mitigation><Mitigation>Leverage automated tools, such as Checkmarx's "ChainJacking" tool, to determine susceptibility to Repo Jacking attacks.</Mitigation></Mitigations><Examples><Example><Reference>In May 2022, the CTX Python package and PhPass PHP package were both exploited by the same adversary via Repo Jacking attacks. For the CTX package, the adversary performed an account takeover via a password reset, due to an expired domain-hosting email. The attack on PhPass entailed bypassing GitHub's authentication for retired repositories. In both cases, sensitive data in the form of API keys and passwords, each stored in the form of environment variables, were exfiltrated. [REF-732] [REF-733]</Reference><Description /></Example><Example><Reference>In October 2021, the popular JavaScript library UAParser.js was exploited via the takeover of the author's Node Package Manager (NPM) account. The adversary-provided malware downloaded and executed binaries from a remote server to conduct crypto-mining and to exfiltrate sensitive data on Windows systems. This was a wide-scale attack as the package receives 8 to 9 million downloads per week. [REF-732]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>494</CWE_ID><Name>Download of Code Without Integrity Check</Name><Description>VOIP phone downloads applications from web sites without verifying integrity.</Description></Weakness><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Load Value Injection</Name><Description>An adversary exploits a hardware design flaw in a CPU implementation of transient instruction execution in which a faulting or assisted load instruction transiently forwards adversary-controlled data from microarchitectural buffers. By inducing a page fault or microcode assist during victim execution, an adversary can force legitimate victim execution to operate on the adversary-controlled data which is stored in the microarchitectural buffers. The adversary can then use existing code gadgets and side channel analysis to discover victim secrets that have not yet been flushed from microarchitectural state or hijack the system control flow.</Description><Mitigations><Mitigation>Do not allow the forwarding of data resulting from a faulting or assisted instruction. Some current mitigations claim to zero out the forwarded data, but this mitigation still does not suffice.</Mitigation><Mitigation>Insert explicit “lfence” speculation barriers in software before potentially faulting or assisted loads. This halts transient execution until all previous instructions have been executed and ensures that the architecturally correct value is forwarded.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1342</CWE_ID><Name>Information Exposure through Microarchitectural State after Transient Execution</Name><Description>Load value injection in some processors utilizing speculative execution may allow an authenticated user to enable information disclosure via a side-channel with local access.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1557.003</Entry_ID><Entry_Name>Adversary-in-the-Middle: DHCP Spoofing</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>DHCP Spoofing</Name><Description>
            </Description><Mitigations><Mitigation>Design: MAC-Forced Forwarding</Mitigation><Mitigation>Implementation: Port Security and DHCP snooping</Mitigation><Mitigation>Implementation: Network-based Intrusion Detection Systems</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>923</CWE_ID><Name>Improper Restriction of Communication Channel to Intended Endpoints</Name><Description>DNS server can accept DNS updates from hosts that it did not query, leading to cache poisoning</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1176</Entry_ID><Entry_Name>Browser Extensions</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1505.004</Entry_ID><Entry_Name>Server Software Component: IIS Components</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Install Malicious Extension</Name><Description>
            </Description><Mitigations><Mitigation>Only install extensions/plugins from official/verifiable sources.</Mitigation><Mitigation>Confirm extensions/plugins are legitimate and not malware masquerading as a legitimate extension/plugin.</Mitigation><Mitigation>Ensure the underlying software leveraging the extension/plugin (including operating systems) is up-to-date.</Mitigation><Mitigation>Implement an extension/plugin allow list, based on the given security policy.</Mitigation><Mitigation>If applicable, confirm extensions/plugins are properly signed by the official developers.</Mitigation><Mitigation>For web browsers, close sessions when finished to prevent malicious extensions/plugins from executing the the background.</Mitigation></Mitigations><Examples><Example><Reference>In January 2018, Palo Alto's Unit 42 reported that a malicious Internet Information Services (IIS) extension they named RGDoor was used to create a backdoor into several Middle Eastern government organizations, as well as a financial institution and an educational institution. This malware was used in conjunction with the TwoFace webshell and allowed the adversaries to upload/download files and execute unauthorized commands. [REF-740]</Reference><Description /></Example><Example><Reference>In December 2018, it was reported that North Korea-based APT Kimusky (also known as Velvet Chollima) infected numerous legitimate academic organizations within the U.S., many specializing in biomedical engineering, with a malicious Google Chrome extension. Dubbed "Operation STOLEN PENCIL", the attack entailed conducting spear-phishing attacks to trick victims into installing a malicious PDF reader named "Auto Font Manager". Once installed, the malware allowed adversaries to steal cookies and site passwords, as well as forward emails from some compromised accounts. [REF-741]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>507</CWE_ID><Name>Trojan Horse</Name><Description>The product appears to contain benign or useful functionality, but it also contains code that is hidden from normal operation that violates the intended security policy of the user or the system administrator.</Description></Weakness><Weakness><CWE_ID>829</CWE_ID><Name>Inclusion of Functionality from Untrusted Control Sphere</Name><Description>PHP file inclusion issue, both remote and local; local include uses ".." and "%00" characters as a manipulation, but many remote file inclusion issues probably have this vector.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Eavesdropping on a Monitor</Name><Description>An Adversary can eavesdrop on the content of an external monitor through the air without modifying any cable or installing software, just capturing this signal emitted by the cable or video port, with this the attacker will be able to impact the confidentiality of the data without being detected by traditional security tools</Description><Mitigations><Mitigation>Enhance: Increase the number of electromagnetic shield layers in the display ports and cables to contain or reduce the intensity of the leaked signal.</Mitigation><Mitigation>Implement: Use a protocol that encrypts the video signal; in case the signal is intercepted the signal is protected by the encryption.</Mitigation><Mitigation>Design: Lock away the video cables, making it difficult for the attacker to access the cables and place the antenna near them (If the distance condition between the antenna and display port/cable is not satisfied, the attack will not be possible).</Mitigation><Mitigation>Implement: Use wireless technologies to connect to external display devices.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1300</CWE_ID><Name>Improper Protection of Physical Side Channels</Name><Description>power consumption varies based on number of pixels being illuminated in a display, allowing reading of secrets such as the PIN by using the USB interface to measure power consumption</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Blind SQL Injection</Name><Description>Blind SQL Injection results from an insufficient mitigation for SQL Injection. Although suppressing database error messages are considered best practice, the suppression alone is not sufficient to prevent SQL Injection. Blind SQL Injection is a form of SQL Injection that overcomes the lack of error messages. Without the error messages that facilitate SQL Injection, the adversary constructs input strings that probe the target through simple Boolean SQL expressions. The adversary can determine if the syntax and structure of the injection was successful based on whether the query was executed or not. Applied iteratively, the adversary determines how and where the target is vulnerable to SQL Injection.</Description><Mitigations><Mitigation>Security by Obscurity is not a solution to preventing SQL Injection. Rather than suppress error messages and exceptions, the application must handle them gracefully, returning either a custom error page or redirecting the user to a default page, without revealing any information about the database or the application internals.</Mitigation><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as SQL content. Keywords such as UNION, SELECT or INSERT must be filtered in addition to characters such as a single-quote(') or SQL-comments (--) based on the context in which they appear.</Mitigation></Mitigations><Examples><Example><Reference>An adversary may try entering something like "username' AND 1=1; --" in an input field. If the result is the same as when the adversary entered "username" in the field, then the adversary knows that the application is vulnerable to SQL Injection. The adversary can then ask yes/no questions from the database server to extract information from it. For example, the adversary can extract table names from a database using the following types of queries: If the above query executes properly, then the adversary knows that the first character in a table name in the database is a letter between m and z. If it doesn't, then the adversary knows that the character must be between a and l (assuming of course that table names only contain alphabetic characters). By performing a binary search on all character positions, the adversary can determine all table names in the database. Subsequently, the adversary may execute an actual attack and send something like:</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>89</CWE_ID><Name>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Name><Description>SQL injection in vulnerability management and reporting tool, using a crafted password.</Description></Weakness><Weakness><CWE_ID>209</CWE_ID><Name>Generation of Error Message Containing Sensitive Information</Name><Description>SSH password for private key stored in build log</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1078.001</Entry_ID><Entry_Name>Valid Accounts:Default Accounts</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Try Common or Default Usernames and Passwords</Name><Description>An adversary may try certain common or default usernames and passwords to gain access into the system and perform unauthorized actions. An adversary may try an intelligent brute force using empty passwords, known vendor default credentials, as well as a dictionary of common usernames and passwords. Many vendor products come preconfigured with default (and thus well-known) usernames and passwords that should be deleted prior to usage in a production environment. It is a common mistake to forget to remove these default login credentials. Another problem is that users would pick very simple (common) passwords (e.g. "secret" or "password") that make it easier for the attacker to gain access to the system compared to using a brute force attack or even a dictionary attack using a full dictionary.</Description><Mitigations><Mitigation>Delete all default account credentials that may be put in by the product vendor.</Mitigation><Mitigation>Implement a password throttling mechanism. This mechanism should take into account both the IP address and the log in name of the user.</Mitigation><Mitigation>Put together a strong password policy and make sure that all user created passwords comply with it. Alternatively automatically generate strong passwords for users.</Mitigation><Mitigation>Passwords need to be recycled to prevent aging, that is every once in a while a new password must be chosen.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>521</CWE_ID><Name>Weak Password Requirements</Name><Description>key server application does not require strong passwords</Description></Weakness><Weakness><CWE_ID>262</CWE_ID><Name>Not Using Password Aging</Name><Description>The product does not have a mechanism in place for managing password aging.</Description></Weakness><Weakness><CWE_ID>263</CWE_ID><Name>Password Aging with Long Expiration</Name><Description>The product supports password aging, but the expiration period is too long.</Description></Weakness><Weakness><CWE_ID>798</CWE_ID><Name>Use of Hard-coded Credentials</Name><Description>Backup product contains hard-coded credentials that effectively serve as a back door, which allows remote attackers to access the file system</Description></Weakness><Weakness><CWE_ID>654</CWE_ID><Name>Reliance on a Single Factor in a Security Decision</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>308</CWE_ID><Name>Use of Single-factor Authentication</Name><Description>Chat application skips validation when Central Authentication Service
			 (CAS) is enabled, effectively removing the second factor from
			 two-factor authentication</Description></Weakness><Weakness><CWE_ID>309</CWE_ID><Name>Use of Password System for Primary Authentication</Name><Description>The use of password systems as the primary means of authentication may be subject to several flaws or shortcomings, each reducing the effectiveness of the mechanism.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1599</Entry_ID><Entry_Name>Network Boundary Bridging</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Network Boundary Bridging</Name><Description>An adversary which has gained elevated access to network boundary devices may use these devices to create a channel to bridge trusted and untrusted networks. Boundary devices do not necessarily have to be on the network’s edge, but rather must serve to segment portions of the target network the adversary wishes to cross into.</Description><Mitigations><Mitigation>Design: Ensure network devices are storing credentials in encrypted stores</Mitigation><Mitigation>Design: Follow the principle of least privilege and restrict administrative duties to as few accounts as possible. Ensure these privileged accounts are secured with strong credentials which do not overlap with other network devices.</Mitigation><Mitigation>Configuration: When possible, configure network boundary devices to use MFA.</Mitigation><Mitigation>Configuration: Change the default configuration for network devices to harden their security profiles. Default configurations are often enabled with insecure features to allow ease of installation and management. However, these configurations can be easily discovered and exploited by adversaries.</Mitigation><Mitigation>Implementation: Perform integrity checks on audit logs for network device management and review them to identify abnormalities in configurations.</Mitigation><Mitigation>Implementation: Prevent network boundary devices from being physically accessed by unauthorized personnel to prevent tampering.</Mitigation></Mitigations><Examples><Example><Reference>In November 2016, a Smart Install Exploitation Tool was released online which takes advantage of Cisco’s unauthenticated SMI management protocol to download a target’s current configuration files. Adversaries can use this tool to overwrite files to modify the device configurations, or upload maliciously modified OS or firmware to enable persistence. Once the adversary has access to the device’s configurations, they could modify it to redirect network traffic through other network infrastructure.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Browser in the Middle (BiTM)</Name><Description>An adversary exploits the inherent functionalities of a web browser, in order to establish an unnoticed remote desktop connection in the victim's browser to the adversary's system. The adversary must deploy a web client with a remote desktop session that the victim can access.</Description><Mitigations><Mitigation>Implementation: Use strong, mutual authentication to fully authenticate with both ends of any communications channel</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness><Weakness><CWE_ID>345</CWE_ID><Name>Insufficient Verification of Data Authenticity</Name><Description>Remote Terminal Unit (RTU) does not use signatures for firmware images and relies on insecure checksums</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Exploiting Incorrect Chaining or Granularity of Hardware Debug Components</Name><Description>
            </Description><Mitigations><Mitigation>Implement: Ensure that debug components are properly chained, and their granularity is maintained at different authorization levels</Mitigation><Mitigation>Perform Post-silicon validation tests at various authorization levels to ensure that debug components are only accessible to authorized users</Mitigation></Mitigations><Examples><Example><Reference>A System-on-Chip (SoC) might give regular users access to the SoC-level TAP, but does not want to give access to all of the internal TAPs (e.g., Core). If any of the internal TAPs were incorrectly chained to the SoC-level TAP, this would grant regular users access to the internal TAPs and allow them to execute commands there.</Reference><Description /></Example><Example><Reference>Suppose there is a hierarchy of TAPs (TAP_A is connected to TAP_B and TAP_C, then TAP_B is connected to TAP_D and TAP_E, then TAP_C is connected to TAP_F and TAP_G, etc.). Architecture mandates that the user have one set of credentials for just accessing TAP_A, another set of credentials for accessing TAP_B and TAP_C, etc. However, if, during implementation, the designer mistakenly implements a daisy-chained TAP where all the TAPs are connected in a single TAP chain without the hierarchical structure, the correct granularity of debug components is not implemented, and the attacker can gain unauthorized access.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>1296</CWE_ID><Name>Incorrect Chaining or Granularity of Debug Components</Name><Description>There is an improper authorization vulnerability in several smartphones.  The system has a logic-judging error, and, under certain scenarios, a successful exploit could allow the attacker to switch to third desktop after a series of operations in ADB mode. (Vulnerability ID: HWPSIRT-2019-10114).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Unicode Encoding to Bypass Validation Logic</Name><Description>An attacker may provide a Unicode string to a system component that is not Unicode aware and use that to circumvent the filter or cause the classifying mechanism to fail to properly understanding the request. That may allow the attacker to slip malicious data past the content filter and/or possibly cause the application to route the request incorrectly.</Description><Mitigations><Mitigation>Ensure that the system is Unicode aware and can properly process Unicode data. Do not make an assumption that data will be in ASCII.</Mitigation><Mitigation>Ensure that filtering or input validation is applied to canonical data.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</Mitigation></Mitigations><Examples><Example><Reference>A very common technique for a Unicode attack involves traversing directories looking for interesting files. An example of this idea applied to the Web is In this case, the attacker is attempting to traverse to a directory that is not supposed to be part of standard Web services. The trick is fairly obvious, so many Web servers and scripts prevent it. However, using alternate encoding tricks, an attacker may be able to get around badly implemented request filters. In October 2000, an adversary publicly revealed that Microsoft's IIS server suffered from a variation of this problem. In the case of IIS, all the attacker had to do was provide alternate encodings for the dots and/or slashes found in a classic attack. The Unicode translations are Using this conversion, the previously displayed URL can be encoded as</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>176</CWE_ID><Name>Improper Handling of Unicode Encoding</Name><Description>Overlaps interaction error.</Description></Weakness><Weakness><CWE_ID>179</CWE_ID><Name>Incorrect Behavior Order: Early Validation</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>180</CWE_ID><Name>Incorrect Behavior Order: Validate Before Canonicalize</Name><Description>Product checks URI for "&lt;" and other literal characters, but does it before hex decoding the URI, so "%3E" and other sequences are allowed.</Description></Weakness><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>183</CWE_ID><Name>Permissive List of Allowed Inputs</Name><Description>Default allowlist includes unsafe methods, allowing bypass of sandbox</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>692</CWE_ID><Name>Incomplete Denylist to Cross-Site Scripting</Name><Description>Denylist only checks "javascript:" tag</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>URL Encoding</Name><Description>This attack targets the encoding of the URL. An adversary can take advantage of the multiple way of encoding an URL and abuse the interpretation of the URL.</Description><Mitigations><Mitigation>Refer to the RFCs to safely decode URL.</Mitigation><Mitigation>Regular expression can be used to match safe URL patterns. However, that may discard valid URL requests if the regular expression is too restrictive.</Mitigation><Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx).</Mitigation><Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation><Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</Mitigation><Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation></Mitigations><Examples><Example><Reference>The following type of encoded string has been known traverse directories against the IceCast MP3 server9: or using The control character ".." can be used by an adversary to escape the document root.</Reference><Description /></Example><Example><Reference>[REF-495]</Reference><Description /></Example><Example><Reference>From "URL encoded attacks", by Gunter Ollmann - http://www.cgisecurity.com/lib/URLEmbeddedAttacks.html</Reference><Description /></Example><Example><Reference>Alexandre Cesari released a freeware FTP server for Windows that fails to provide proper filtering against multiple encoding. The FTP server, CesarFTP, included a Web server component that could be attacked with a combination of the triple-dot and URL encoding attacks. An adversary could provide a URL that included a string like This is an interesting exploit because it involves an aggregation of several tricks: the escape character, URL encoding, and the triple dot.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>177</CWE_ID><Name>Improper Handling of URL Encoding (Hex Encoding)</Name><Description>"%0a" (overlaps CRLF)</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>User-Controlled Filename</Name><Description>An attack of this type involves an adversary inserting malicious characters (such as a XSS redirection) into a filename, directly or indirectly that is then used by the target software to generate HTML text or other potentially executable content. Many websites rely on user-generated content and dynamically build resources like files, filenames, and URL links directly from user supplied data. In this attack pattern, the attacker uploads code that can execute in the client browser and/or redirect the client browser to a site that the attacker owns. All XSS attack payload variants can be used to pass and exploit these vulnerabilities.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation><Mitigation>Implementation: Scan dynamically generated content against validation specification</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>96</CWE_ID><Name>Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')</Name><Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description></Weakness><Weakness><CWE_ID>348</CWE_ID><Name>Use of Less Trusted Source</Name><Description>PHP application uses IP address from X-Forwarded-For HTTP header, instead of REMOTE_ADDR.</Description></Weakness><Weakness><CWE_ID>116</CWE_ID><Name>Improper Encoding or Escaping of Output</Name><Description>Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.</Description></Weakness><Weakness><CWE_ID>350</CWE_ID><Name>Reliance on Reverse DNS Resolution for a Security-Critical Action</Name><Description>Product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>86</CWE_ID><Name>Improper Neutralization of Invalid Characters in Identifiers in Web Pages</Name><Description>XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse.</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating State</Name><Description>
            </Description><Mitigations><Mitigation>Do not rely solely on user-controllable locations, such as cookies or URL parameters, to maintain user state.</Mitigation><Mitigation>Avoid sensitive information, such as usernames or authentication and authorization information, in user-controllable locations.</Mitigation><Mitigation>Sensitive information that is part of the user state must be appropriately protected to ensure confidentiality and integrity at each request.</Mitigation><Mitigation>All possible states must be handled by hardware finite state machines.</Mitigation></Mitigations><Examples><Example><Reference>During the authentication process, an application stores the authentication decision (auth=0/1) in unencrypted cookies. At every request, this cookie is checked to permit or deny a request. An adversary can easily violate this representation of user state and set auth=1 at every request in order to gain illegitimate access and elevated privilege in the application.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>372</CWE_ID><Name>Incomplete Internal State Distinction</Name><Description>The product does not properly determine which state it is in, causing it to assume it is in state X when in fact it is in state Y, causing it to perform incorrect operations in a security-relevant manner.</Description></Weakness><Weakness><CWE_ID>315</CWE_ID><Name>Cleartext Storage of Sensitive Information in a Cookie</Name><Description>Authentication information stored in cleartext in a cookie.</Description></Weakness><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness><Weakness><CWE_ID>1245</CWE_ID><Name>Improper Finite State Machines (FSMs) in Hardware Logic</Name><Description>Faulty finite state machines (FSMs) in the hardware logic allow an attacker to put the system in an undefined state, to cause a denial of service (DoS) or gain privileges on the victim's system.</Description></Weakness><Weakness><CWE_ID>1253</CWE_ID><Name>Incorrect Selection of Fuse Values</Name><Description>The logic level used to set a system to a secure state relies on a fuse being unblown. An attacker can set the system to an insecure state merely by blowing the fuse.</Description></Weakness><Weakness><CWE_ID>1265</CWE_ID><Name>Unintended Reentrant Invocation of Non-reentrant Code Via Nested Calls</Name><Description>This CVE covers several vulnerable scenarios enabled by abuse of the Class_Terminate feature in Microsoft VBScript. In one scenario, Class_Terminate is used to produce an undesirable re-entrance of ScriptingDictionary during execution of that object's destructor. In another scenario, a vulnerable condition results from a recursive entrance of a property setter method. This recursive invocation produces a second, spurious call to the Release method of a reference-counted object, causing a UAF when that object is freed prematurely. This vulnerability pattern has been popularized as "Double Kill". [REF-1099]</Description></Weakness><Weakness><CWE_ID>1271</CWE_ID><Name>Uninitialized Value on Reset for Registers Holding Security Settings</Name><Description>Security-critical logic is not set to a known value on reset.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating Writeable Configuration Files</Name><Description>Generally these are manually edited files that are not in the preview of the system administrators, any ability on the attackers' behalf to modify these files, for example in a CVS repository, gives unauthorized access directly to the application, the same as authorized users.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege</Mitigation><Mitigation>Design: Backup copies of all configuration files</Mitigation><Mitigation>Implementation: Integrity monitoring for configuration files</Mitigation><Mitigation>Implementation: Enforce audit logging on code and configuration promotion procedures.</Mitigation><Mitigation>Implementation: Load configuration from separate process and memory space, for example a separate physical device like a CD</Mitigation></Mitigations><Examples><Example><Reference>The BEA Weblogic server uses a config.xml file to store configuration data. If this file is not properly protected by the system access control, an attacker can write configuration information to redirect server output through system logs, database connections, malicious URLs and so on. Access to the Weblogic server may be from a so-called Custom realm which manages authentication and authorization privileges on behalf of user principals. Given write access, the attacker can insert a pointer to a custom realm jar file in the config.xml The main issue with configuration files is that the attacker can leverage all the same functionality the server has, but for malicious means. Given the complexity of server configuration, these changes may be very hard for administrators to detect.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>349</CWE_ID><Name>Acceptance of Extraneous Untrusted Data With Trusted Data</Name><Description>use of extra data in a signature allows certificate signature forging</Description></Weakness><Weakness><CWE_ID>99</CWE_ID><Name>Improper Control of Resource Identifiers ('Resource Injection')</Name><Description>chain: mobile OS verifies cryptographic signature of file in an archive, but then installs a different file with the same name that is also listed in the archive.</Description></Weakness><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>353</CWE_ID><Name>Missing Support for Integrity Check</Name><Description>The product uses a transmission protocol that does not include a mechanism for verifying the integrity of the data during transmission, such as a checksum.</Description></Weakness><Weakness><CWE_ID>354</CWE_ID><Name>Improper Validation of Integrity Check Value</Name><Description>The product does not validate or incorrectly validates the integrity check values or "checksums" of a message. This may prevent it from detecting if the data has been modified or corrupted in transmission.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating Web Input to File System Calls</Name><Description>An attacker manipulates inputs to the target software which the target software passes to file system calls in the OS. The goal is to gain access to, and perhaps modify, areas of the file system that the target software did not intend to be accessible.</Description><Mitigations><Mitigation>Design: Enforce principle of least privilege.</Mitigation><Mitigation>Design: Ensure all input is validated, and does not contain file system commands</Mitigation><Mitigation>Design: Run server interfaces with a non-root account and/or utilize chroot jails or other configuration techniques to constrain privileges even if attacker gains some limited access to commands.</Mitigation><Mitigation>Design: For interactive user applications, consider if direct file system interface is necessary, instead consider having the application proxy communication.</Mitigation><Mitigation>Implementation: Perform testing such as pen-testing and vulnerability scanning to identify directories, programs, and interfaces that grant direct access to executables.</Mitigation></Mitigations><Examples><Example><Reference>The attacker uses relative path traversal to access files in the application. This is an example of accessing user's password file. However, the target application employs regular expressions to make sure no relative path sequences are being passed through the application to the web page. The application would replace all matches from this regex with the empty string. Then an attacker creates special payloads to bypass this filter: When the application gets this input string, it will be the desired vector by the attacker.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>23</CWE_ID><Name>Relative Path Traversal</Name><Description>Mail server allows remote attackers to create arbitrary directories via a ".." or rename arbitrary files via a "....//" in user supplied parameters.</Description></Weakness><Weakness><CWE_ID>22</CWE_ID><Name>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Name><Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>77</CWE_ID><Name>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Name><Description>injection of sed script syntax ("sed injection")</Description></Weakness><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>348</CWE_ID><Name>Use of Less Trusted Source</Name><Description>PHP application uses IP address from X-Forwarded-For HTTP header, instead of REMOTE_ADDR.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>272</CWE_ID><Name>Least Privilege Violation</Name><Description>The elevated privilege level required to perform operations such as chroot() should be dropped immediately after the operation is performed.</Description></Weakness><Weakness><CWE_ID>59</CWE_ID><Name>Improper Link Resolution Before File Access ('Link Following')</Name><Description>"Zip Slip" vulnerability in container management product allows writing arbitrary files outside intended directory via a container image (.tar format) with filenames that are symbolic links that point to other files within the same tar file; however, the files being pointed to can also be symbolic links to destinations outside the intended directory, bypassing the initial check.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Manipulating User-Controlled Variables</Name><Description>This attack targets user controlled variables (DEBUG=1, PHP Globals, and So Forth). An adversary can override variables leveraging user-supplied, untrusted query variables directly used on the application server without any data sanitization. In extreme cases, the adversary can change variables controlling the business logic of the application. For instance, in languages like PHP, a number of poorly set default configurations may allow the user to override variables.</Description><Mitigations><Mitigation>A software system should be reluctant to trust variables that have been initialized outside of its trust boundary. Ensure adequate checking is performed when relying on input from outside a trust boundary.</Mitigation><Mitigation>Separate the presentation layer and the business logic layer. Variables at the business logic layer should not be exposed at the presentation layer. This is to prevent computation of business logic from user controlled input data.</Mitigation><Mitigation>Use encapsulation when declaring your variables. This is to lower the exposure of your variables.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should be rejected by the program.</Mitigation></Mitigations><Examples><Example><Reference>PHP is a study in bad security. The main idea pervading PHP is "ease of use," and the mantra "don't make the developer go to any extra work to get stuff done" applies in all cases. This is accomplished in PHP by removing formalism from the language, allowing declaration of variables on first use, initializing everything with preset values, and taking every meaningful variable from a transaction and making it available. In cases of collision with something more technical, the simple almost always dominates in PHP. One consequence of all this is that PHP allows users of a Web application to override environment variables with user-supplied, untrusted query variables. Thus, critical values such as the CWD and the search path can be overwritten and directly controlled by a remote anonymous user. Another similar consequence is that variables can be directly controlled and assigned from the user-controlled values supplied in GET and POST request fields. So seemingly normal code like this, does bizarre things: Normally, this loop will execute its body ten times. The first iteration will be an undefined zero, and further trips though the loop will result in an increment of the variable $count. The problem is that the coder does not initialize the variable to zero before entering the loop. This is fine because PHP initializes the variable on declaration. The result is code that seems to function, regardless of badness. The problem is that a user of the Web application can supply a request such as and cause $count to start out at the value 9, resulting in only one trip through the loop. Yerg. Depending on the configuration, PHP may accept user-supplied variables in place of environment variables. PHP initializes global variables for all process environment variables, such as $PATH and $HOSTNAME. These variables are of critical importance because they may be used in file or network operations. If an adversary can supply a new $PATH variable (such as PATH='/var'), the program may be exploitable. PHP may also take field tags supplied in GET/POST requests and transform them into global variables. This is the case with the $count variable we explored in our previous example. Consider another example of this problem in which a program defines a variable called $tempfile. An adversary can supply a new temp file such as $tempfile = "/etc/passwd". Then the temp file may get erased later via a call to unlink($tempfile);. Now the passwd file has been erased--a bad thing indeed on most OSs. Also consider that the use of include() and require() first search $PATH, and that using calls to the shell may execute crucial programs such as ls. In this way, ls may be "Trojaned" (the adversary can modify $PATH to cause a Trojan copy of ls to be loaded). This type of attack could also apply to loadable libraries if $LD_LIBRARY_PATH is modified. Finally, some versions of PHP may pass user data to syslog as a format string, thus exposing the application to a format string buffer overflow.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>15</CWE_ID><Name>External Control of System or Configuration Setting</Name><Description>One or more system settings or configuration elements can be externally controlled by a user.</Description></Weakness><Weakness><CWE_ID>94</CWE_ID><Name>Improper Control of Generation of Code ('Code Injection')</Name><Description>PHP code from User-Agent HTTP header directly inserted into log file implemented as PHP script.</Description></Weakness><Weakness><CWE_ID>96</CWE_ID><Name>Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')</Name><Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>302</CWE_ID><Name>Authentication Bypass by Assumed-Immutable Data</Name><Description>Bypass auth and gain privileges by setting a variable.</Description></Weakness><Weakness><CWE_ID>473</CWE_ID><Name>PHP External Variable Modification</Name><Description>Authentication bypass by modifying array used for authentication.</Description></Weakness><Weakness><CWE_ID>1321</CWE_ID><Name>Improperly Controlled Modification of Object Prototype Attributes ('Prototype Pollution')</Name><Description>Prototype pollution by setting object attributes based on dot-separated path.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Escaped Slashes in Alternate Encoding</Name><Description>This attack targets the use of the backslash in alternate encoding. An adversary can provide a backslash as a leading character and causes a parser to believe that the next character is special. This is called an escape. By using that trick, the adversary tries to exploit alternate ways to encode the same character which leads to filter problems and opens avenues to attack.</Description><Mitigations><Mitigation>Verify that the user-supplied data does not use backslash character to escape malicious characters.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</Mitigation><Mitigation>Be aware of the threat of alternative method of data encoding.</Mitigation><Mitigation>Regular expressions can be used to filter out backslash. Make sure you decode before filtering and validating the untrusted input data.</Mitigation><Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</Mitigation><Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process.</Mitigation><Mitigation>Avoid making decisions based on names of resources (e.g. files) if those resources can have alternate names.</Mitigation></Mitigations><Examples><Example><Reference>For example, the byte pair \0 might result in a single zero byte (a NULL) being sent. Another example is \t, which is sometimes converted into a tab character. There is often an equivalent encoding between the back slash and the escaped back slash. This means that \/ results in a single forward slash. A single forward slash also results in a single forward slash. The encoding looks like this:</Reference><Description /></Example><Example><Reference>An attack leveraging escaped slashes in slternate encodings is very simple. If you believe the target may be filtering the slash, attempt to supply \/ and see what happens. Example command strings to try out include which converts in many cases to To probe for this kind of problem, a small C program that uses string output routines can be very useful. File system calls make excellent testing fodder. The simple snippet produces the output Clearly, the back slash is ignored, and thus we have hit on a number of alternative encodings to experiment with. Given our previous example, we can extend the attack to include other possibilities:</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>180</CWE_ID><Name>Incorrect Behavior Order: Validate Before Canonicalize</Name><Description>Product checks URI for "&lt;" and other literal characters, but does it before hex decoding the URI, so "%3E" and other sequences are allowed.</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>22</CWE_ID><Name>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Name><Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using Slashes in Alternate Encoding</Name><Description>This attack targets the encoding of the Slash characters. An adversary would try to exploit common filtering problems related to the use of the slashes characters to gain access to resources on the target host. Directory-driven systems, such as file systems and databases, typically use the slash character to indicate traversal between directories or other container components. For murky historical reasons, PCs (and, as a result, Microsoft OSs) choose to use a backslash, whereas the UNIX world typically makes use of the forward slash. The schizophrenic result is that many MS-based systems are required to understand both forms of the slash. This gives the adversary many opportunities to discover and abuse a number of common filtering problems. The goal of this pattern is to discover server software that only applies filters to one version, but not the other.</Description><Mitigations><Mitigation>Any security checks should occur after the data has been decoded and validated as correct data format. Do not repeat decoding process, if bad character are left after decoding process, treat the data as suspicious, and fail the validation process. Refer to the RFCs to safely decode URL.</Mitigation><Mitigation>When client input is required from web-based forms, avoid using the "GET" method to submit data, as the method causes the form data to be appended to the URL and is easily manipulated. Instead, use the "POST method whenever possible.</Mitigation><Mitigation>There are tools to scan HTTP requests to the server for valid URL such as URLScan from Microsoft (http://www.microsoft.com/technet/security/tools/urlscan.mspx)</Mitigation><Mitigation>Be aware of the threat of alternative method of data encoding and obfuscation technique such as IP address encoding. (See related guideline section)</Mitigation><Mitigation>Test your path decoding process against malicious input.</Mitigation><Mitigation>In the case of path traversals, use the principle of least privilege when determining access rights to file systems. Do not allow users to access directories/files that they should not access.</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the application based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system.</Mitigation></Mitigations><Examples><Example><Reference>The two following requests are equivalent on most Web servers: is equivalent to Multiple encoding conversion problems can also be leveraged as various slashes are instantiated in URL-encoded, UTF-8, or Unicode. Consider the strings where %5C is equivalent to the \ character.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>180</CWE_ID><Name>Incorrect Behavior Order: Validate Before Canonicalize</Name><Description>Product checks URI for "&lt;" and other literal characters, but does it before hex decoding the URI, so "%3E" and other sequences are allowed.</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>22</CWE_ID><Name>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Name><Description>Chain: library file sends a redirect if it is directly requested but continues to execute, allowing remote file inclusion and path traversal.</Description></Weakness><Weakness><CWE_ID>185</CWE_ID><Name>Incorrect Regular Expression</Name><Description>Null byte bypasses PHP regexp check.</Description></Weakness><Weakness><CWE_ID>200</CWE_ID><Name>Exposure of Sensitive Information to an Unauthorized Actor</Name><Description>Collaboration platform does not clear team emails in a response, allowing leak of email addresses</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Buffer Overflow in an API Call</Name><Description>This attack targets libraries or shared code modules which are vulnerable to buffer overflow attacks. An adversary who has knowledge of known vulnerable libraries or shared code can easily target software that makes use of these libraries. All clients that make use of the code library thus become vulnerable by association. This has a very broad effect on security across a system, usually affecting more than one software process.</Description><Mitigations><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Use secure functions not vulnerable to buffer overflow.</Mitigation><Mitigation>If you have to use dangerous functions, make sure that you do boundary checking.</Mitigation><Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Use OS-level preventative functionality. Not a complete solution.</Mitigation></Mitigations><Examples><Example><Reference>A buffer overflow in the FreeBSD utility setlocale (found in the libc module) puts many programs at risk all at once.</Reference><Description /></Example><Example><Reference>A buffer overflow in the Xt library of the X windowing system allows local users to execute commands with root privileges.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>733</CWE_ID><Name>Compiler Optimization Removal or Modification of Security-critical Code</Name><Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Using UTF-8 Encoding to Bypass Validation Logic</Name><Description>This attack is a specific variation on leveraging alternate encodings to bypass validation logic. This attack leverages the possibility to encode potentially harmful input in UTF-8 and submit it to applications not expecting or effective at validating this encoding standard making input filtering difficult. UTF-8 (8-bit UCS/Unicode Transformation Format) is a variable-length character encoding for Unicode. Legal UTF-8 characters are one to four bytes long. However, early version of the UTF-8 specification got some entries wrong (in some cases it permitted overlong characters). UTF-8 encoders are supposed to use the "shortest possible" encoding, but naive decoders may accept encodings that are longer than necessary. According to the RFC 3629, a particularly subtle form of this attack can be carried out against a parser which performs security-critical validity checks against the UTF-8 encoded form of its input, but interprets certain illegal octet sequences as characters.</Description><Mitigations><Mitigation>The Unicode Consortium recognized multiple representations to be a problem and has revised the Unicode Standard to make multiple representations of the same code point with UTF-8 illegal. The UTF-8 Corrigendum lists the newly restricted UTF-8 range (See references). Many current applications may not have been revised to follow this rule. Verify that your application conform to the latest UTF-8 encoding specification. Pay extra attention to the filtering of illegal characters.</Mitigation><Mitigation>For security reasons, a UTF-8 decoder must not accept UTF-8 sequences that are longer than necessary to encode a character. If you use a parser to decode the UTF-8 encoding, make sure that parser filter the invalid UTF-8 characters (invalid forms or overlong forms).</Mitigation><Mitigation>Look for overlong UTF-8 sequences starting with malicious pattern. You can also use a UTF-8 decoder stress test to test your UTF-8 parser (See Markus Kuhn's UTF-8 and Unicode FAQ in reference section)</Mitigation><Mitigation>Assume all input is malicious. Create an allowlist that defines all valid input to the software system based on the requirements specifications. Input that does not match against the allowlist should not be permitted to enter into the system. Test your decoding process against malicious input.</Mitigation></Mitigations><Examples><Example><Reference>Perhaps the most famous UTF-8 attack was against unpatched Microsoft Internet Information Server (IIS) 4 and IIS 5 servers. If an attacker made a request that looked like this the server didn't correctly handle %c0%af in the URL. What do you think %c0%af means? It's 11000000 10101111 in binary; and if it's broken up using the UTF-8 mapping rules, we get this: 11000000 10101111. Therefore, the character is 00000101111, or 0x2F, the slash (/) character! The %c0%af is an invalid UTF-8 representation of the / character. Such an invalid UTF-8 escape is often referred to as an overlong sequence. So when the attacker requested the tainted URL, they accessed In other words, they walked out of the script's virtual directory, which is marked to allow program execution, up to the root and down into the system32 directory, where they could pass commands to the command shell, Cmd.exe.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>173</CWE_ID><Name>Improper Handling of Alternate Encoding</Name><Description>The product does not properly handle when an input uses an alternate encoding that is valid for the control sphere to which the input is being sent.</Description></Weakness><Weakness><CWE_ID>172</CWE_ID><Name>Encoding Error</Name><Description>Hex-encoded path traversal variants - "%2e%2e", "%2e%2e%2f", "%5c%2e%2e"</Description></Weakness><Weakness><CWE_ID>180</CWE_ID><Name>Incorrect Behavior Order: Validate Before Canonicalize</Name><Description>Product checks URI for "&lt;" and other literal characters, but does it before hex decoding the URI, so "%3E" and other sequences are allowed.</Description></Weakness><Weakness><CWE_ID>181</CWE_ID><Name>Incorrect Behavior Order: Validate Before Filter</Name><Description>Directory traversal vulnerability allows attackers to overwrite arbitrary files via invalid characters between two . (dot) characters, which are filtered and result in a ".." sequence.</Description></Weakness><Weakness><CWE_ID>73</CWE_ID><Name>External Control of File Name or Path</Name><Description>Chain: external control of user's target language enables remote file inclusion.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness><Weakness><CWE_ID>692</CWE_ID><Name>Incomplete Denylist to Cross-Site Scripting</Name><Description>Denylist only checks "javascript:" tag</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Web Server Logs Tampering</Name><Description>Web Logs Tampering attacks involve an attacker injecting, deleting or otherwise tampering with the contents of web logs typically for the purposes of masking other malicious behavior. Additionally, writing malicious data to log files may target jobs, filters, reports, and other agents that process the logs in an asynchronous attack pattern. This pattern of attack is similar to "Log Injection-Tampering-Forging" except that in this case, the attack is targeting the logs of the web server and not the application.</Description><Mitigations><Mitigation>Design: Use input validation before writing to web log</Mitigation><Mitigation>Design: Validate all log data before it is output</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>117</CWE_ID><Name>Improper Output Neutralization for Logs</Name><Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description></Weakness><Weakness><CWE_ID>93</CWE_ID><Name>Improper Neutralization of CRLF Sequences ('CRLF Injection')</Name><Description>Chain: HTTP response splitting via CRLF in parameter related to URL.</Description></Weakness><Weakness><CWE_ID>75</CWE_ID><Name>Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)</Name><Description>The product does not adequately filter user-controlled input for special elements with control implications.</Description></Weakness><Weakness><CWE_ID>221</CWE_ID><Name>Information Loss or Omission</Name><Description>Product does not warn user when document contains certain dangerous functions or macros.</Description></Weakness><Weakness><CWE_ID>96</CWE_ID><Name>Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')</Name><Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>150</CWE_ID><Name>Improper Neutralization of Escape, Meta, or Control Sequences</Name><Description>MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files.</Description></Weakness><Weakness><CWE_ID>276</CWE_ID><Name>Incorrect Default Permissions</Name><Description>Default permissions of a device allow IP spoofing.</Description></Weakness><Weakness><CWE_ID>279</CWE_ID><Name>Incorrect Execution-Assigned Permissions</Name><Description>Log files opened read/write.</Description></Weakness><Weakness><CWE_ID>116</CWE_ID><Name>Improper Encoding or Escaping of Output</Name><Description>Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: Violating Implicit Assumptions Regarding XML Content (aka XML Denial of Service (XDoS))</Name><Description>This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads, CAPEC-231: XML Oversized Payloads, and CAPEC-147: XML Ping of Death. Please refer to these CAPECs going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>39</Entry_ID><Entry_Name>XPath Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>XPath Injection</Name><Description>An attacker can craft special user-controllable input consisting of XPath expressions to inject the XML database and bypass authentication or glean information that they normally would not be able to. XPath Injection enables an attacker to talk directly to the XML database, thus bypassing the application completely. XPath Injection results from the failure of an application to properly sanitize input used as part of dynamic XPath expressions used to query an XML database.</Description><Mitigations><Mitigation>Strong input validation - All user-controllable input must be validated and filtered for illegal characters as well as content that can be interpreted in the context of an XPath expression. Characters such as a single-quote(') or operators such as or (|), and (&amp;) and such should be filtered if the application does not expect them in the context in which they appear. If such content cannot be filtered, it must at least be properly escaped to avoid them being interpreted as part of XPath expressions.</Mitigation><Mitigation>Use of parameterized XPath queries - Parameterization causes the input to be restricted to certain domains, such as strings or integers, and any input outside such domains is considered invalid and the query fails.</Mitigation><Mitigation>Use of custom error pages - Attackers can glean information about the nature of queries from descriptive error messages. Input validation must be coupled with customized error pages that inform about an error without disclosing information about the database or application.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>91</CWE_ID><Name>XML Injection (aka Blind XPath Injection)</Name><Description>The product does not properly neutralize special elements that are used in XML, allowing attackers to modify the syntax, content, or commands of the XML before it is processed by an end system.</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>46</Entry_ID><Entry_Name>XQuery Injection</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>XQuery Injection</Name><Description>This attack utilizes XQuery to probe and attack server systems; in a similar manner that SQL Injection allows an attacker to exploit SQL calls to RDBMS, XQuery Injection uses improperly validated data that is passed to XQuery commands to traverse and execute commands that the XQuery routines have access to. XQuery injection can be used to enumerate elements on the victim's environment, inject commands to the local host, or execute queries to remote files and data sources.</Description><Mitigations><Mitigation>Design: Perform input allowlist validation on all XML input</Mitigation><Mitigation>Implementation: Run xml parsing and query infrastructure with minimal privileges so that an attacker is limited in their ability to probe other system resources from XQL.</Mitigation></Mitigations><Examples><Example><Reference>An attacker can pass XQuery expressions embedded in otherwise standard XML documents. Like SQL injection attacks, the attacker tunnels through the application entry point to target the resource access layer. The string below is an example of an attacker accessing the accounts.xml to request the service provider send all user names back. The attacks that are possible through XQuery are difficult to predict, if the data is not validated prior to executing the XQL.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>707</CWE_ID><Name>Improper Neutralization</Name><Description>The product does not ensure or incorrectly ensures that structured messages or data are well-formed and that certain security properties are met before being read from an upstream component or sent to a downstream component.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>AJAX Footprinting</Name><Description>This attack utilizes the frequent client-server roundtrips in Ajax conversation to scan a system. While Ajax does not open up new vulnerabilities per se, it does optimize them from an attacker point of view. A common first step for an attacker is to footprint the target environment to understand what attacks will work. Since footprinting relies on enumeration, the conversational pattern of rapid, multiple requests and responses that are typical in Ajax applications enable an attacker to look for many vulnerabilities, well-known ports, network locations and so on. The knowledge gained through Ajax fingerprinting can be used to support other attacks, such as XSS.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>79</CWE_ID><Name>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Name><Description>Chain: library file is not protected against a direct request (CWE-425), leading to reflected XSS (CWE-79).</Description></Weakness><Weakness><CWE_ID>113</CWE_ID><Name>Improper Neutralization of CRLF Sequences in HTTP Headers ('HTTP Request/Response Splitting')</Name><Description>e-commerce app allows HTTP response splitting using CRLF in object id parameters</Description></Weakness><Weakness><CWE_ID>348</CWE_ID><Name>Use of Less Trusted Source</Name><Description>PHP application uses IP address from X-Forwarded-For HTTP header, instead of REMOTE_ADDR.</Description></Weakness><Weakness><CWE_ID>96</CWE_ID><Name>Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection')</Name><Description>chain: execution after redirect allows non-administrator to perform static code injection.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>116</CWE_ID><Name>Improper Encoding or Escaping of Output</Name><Description>Cross-site scripting in chat application via a message, which normally might be allowed to contain arbitrary content.</Description></Weakness><Weakness><CWE_ID>184</CWE_ID><Name>Incomplete List of Disallowed Inputs</Name><Description>"\" not in list of disallowed values for web server, allowing path traversal attacks when the server is run on Windows and other OSes.</Description></Weakness><Weakness><CWE_ID>86</CWE_ID><Name>Improper Neutralization of Invalid Characters in Identifiers in Web Pages</Name><Description>XSS filter doesn't filter null characters before looking for dangerous tags, which are ignored by web browsers. Multiple Interpretation Error (MIE) and validate-before-cleanse.</Description></Weakness><Weakness><CWE_ID>692</CWE_ID><Name>Incomplete Denylist to Cross-Site Scripting</Name><Description>Denylist only checks "javascript:" tag</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>XSS Through HTTP Headers</Name><Description>An adversary exploits web applications that generate web content, such as links in a HTML page, based on unvalidated or improperly validated data submitted by other actors. XSS in HTTP Headers attacks target the HTTP headers which are hidden from most users and may not be validated by web applications.</Description><Mitigations><Mitigation>Design: Use browser technologies that do not allow client side scripting.</Mitigation><Mitigation>Design: Utilize strict type, character, and encoding enforcement</Mitigation><Mitigation>Design: Server side developers should not proxy content via XHR or other means, if a http proxy for remote content is setup on the server side, the client's browser has no way of discerning where the data is originating from.</Mitigation><Mitigation>Implementation: Ensure all content that is delivered to client is sanitized against an acceptable content specification.</Mitigation><Mitigation>Implementation: Perform input validation for all remote content.</Mitigation><Mitigation>Implementation: Perform output validation for all remote content.</Mitigation><Mitigation>Implementation: Disable scripting languages such as JavaScript in browser</Mitigation><Mitigation>Implementation: Session tokens for specific host</Mitigation><Mitigation>Implementation: Patching software. There are many attack vectors for XSS on the client side and the server side. Many vulnerabilities are fixed in service packs for browser, web servers, and plug in technologies, staying current on patch release that deal with XSS countermeasures mitigates this.</Mitigation></Mitigations><Examples><Example><Reference>Utilize a remote style sheet set in the HTTP header for XSS attack. When the adversary is able to point to a remote stylesheet, any of the variables set in that stylesheet are controllable on the client side by the remote adversary. Like most XSS attacks, results vary depending on browser that is used [REF-97].</Reference><Description /></Example><Example><Reference>Google's 404 redirection script was found vulnerable to this attack vector. Google's 404 file not found page read * Response headers: "Content-Type: text/html; charset=[encoding]". * Response body: &lt;META http-equiv="Content-Type" (...) charset=[encoding]/&gt; If the response sends an unexpected encoding type such as UTF-7, then no enforcement is done on the payload and arbitrary XSS code will be transported along with the standard HTTP response. [REF-476]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>80</CWE_ID><Name>Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)</Name><Description>XSS not quoted in error page.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>34</Entry_ID><Entry_Name>Predictable Resource Location</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Forceful Browsing</Name><Description>An attacker employs forceful browsing (direct URL entry) to access portions of a website that are otherwise unreachable. Usually, a front controller or similar design pattern is employed to protect access to portions of a web application. Forceful browsing enables an attacker to access information, perform privileged operations and otherwise reach sections of the web application that have been improperly protected.</Description><Mitigations><Mitigation>Authenticate request to every resource. In addition, every page or resource must ensure that the request it is handling has been made in an authorized context.</Mitigation><Mitigation>Forceful browsing can also be made difficult to a large extent by not hard-coding names of application pages or resources. This way, the attacker cannot figure out, from the application alone, the resources available from the present context.</Mitigation></Mitigations><Examples><Example><Reference>A bulletin board application provides an administrative interface at admin.aspx when the user logging in belongs to the administrators group. An attacker can access the admin.aspx interface by making a direct request to the page. Not having access to the interface appropriately protected allows the attacker to perform administrative functions without having to authenticate themself in that role.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>425</CWE_ID><Name>Direct Request ('Forced Browsing')</Name><Description>Upload arbitrary files via direct request.</Description></Weakness><Weakness><CWE_ID>285</CWE_ID><Name>Improper Authorization</Name><Description>Chain: product does not properly check the result of a reverse DNS lookup because of operator precedence (CWE-783), allowing bypass of DNS-based access restrictions.</Description></Weakness><Weakness><CWE_ID>693</CWE_ID><Name>Protection Mechanism Failure</Name><Description>The product does not use or incorrectly uses a protection mechanism that provides sufficient defense against directed attacks against the product.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>31</Entry_ID><Entry_Name>OS Commanding</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>OS Command Injection</Name><Description>In this type of an attack, an adversary injects operating system commands into existing application functions. An application that uses untrusted input to build command strings is vulnerable. An adversary can leverage OS command injection in an application to elevate privileges, execute arbitrary commands and compromise the underlying operating system.</Description><Mitigations><Mitigation>Use language APIs rather than relying on passing data to the operating system shell or command line. Doing so ensures that the available protection mechanisms in the language are intact and applicable.</Mitigation><Mitigation>Filter all incoming data to escape or remove characters or strings that can be potentially misinterpreted as operating system or shell commands</Mitigation><Mitigation>All application processes should be run with the minimal privileges required. Also, processes must shed privileges as soon as they no longer require them.</Mitigation></Mitigations><Examples><Example><Reference>A transaction processing system relies on code written in a number of languages. To access this functionality, the system passes transaction information on the system command line. An attacker can gain access to the system command line and execute malicious commands by injecting these commands in the transaction data. If successful, the attacker can steal information, install backdoors and perform other nefarious activities that can compromise the system and its data.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>78</CWE_ID><Name>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Name><Description>Product allows remote users to execute arbitrary commands by creating a file whose pathname contains shell metacharacters.</Description></Weakness><Weakness><CWE_ID>88</CWE_ID><Name>Improper Neutralization of Argument Delimiters in a Command ('Argument Injection')</Name><Description>Argument injection in mail-processing function allows writing unxpected files and executing programs using tecnically-valid email addresses that insert "-o" and "-X" switches.</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Pharming</Name><Description>A pharming attack occurs when the victim is fooled into entering sensitive data into supposedly trusted locations, such as an online bank site or a trading platform. An attacker can impersonate these supposedly trusted sites and have the victim be directed to their site rather than the originally intended one. Pharming does not require script injection or clicking on malicious links for the attack to succeed.</Description><Mitigations><Mitigation>All sensitive information must be handled over a secure connection.</Mitigation><Mitigation>Known vulnerabilities in DNS or router software or in operating systems must be patched as soon as a fix has been released and tested.</Mitigation><Mitigation>End users must ensure that they provide sensitive information only to websites that they trust, over a secure connection with a valid certificate issued by a well-known certificate authority.</Mitigation></Mitigations><Examples><Example><Reference>An online bank website requires users to provide their customer ID and password to log on, but does not use a secure connection. An attacker can setup a similar fake site and leverage pharming to collect this information from unknowing victims.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>346</CWE_ID><Name>Origin Validation Error</Name><Description>product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness><Weakness><CWE_ID>350</CWE_ID><Name>Reliance on Reverse DNS Resolution for a Security-Critical Action</Name><Description>Product records the reverse DNS name of a visitor in the logs, allowing spoofing and resultant XSS.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Buffer Overflow in Local Command-Line Utilities</Name><Description>This attack targets command-line utilities available in a number of shells. An adversary can leverage a vulnerability found in a command-line utility to escalate privilege to root.</Description><Mitigations><Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as buffer overflow.</Mitigation><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation><Mitigation>Compiler-based canary mechanisms such as StackGuard, ProPolice and the Microsoft Visual Studio /GS flag. Unless this provides automatic bounds checking, it is not a complete solution.</Mitigation><Mitigation>Operational: Use OS-level preventative functionality. Not a complete solution.</Mitigation><Mitigation>Apply the latest patches to your user exposed services. This may not be a complete solution, especially against a zero day attack.</Mitigation><Mitigation>Do not unnecessarily expose services.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>118</CWE_ID><Name>Incorrect Access of Indexable Resource ('Range Error')</Name><Description>The product does not restrict or incorrectly restricts operations within the boundaries of a resource that is accessed using an index or pointer, such as memory or files.</Description></Weakness><Weakness><CWE_ID>119</CWE_ID><Name>Improper Restriction of Operations within the Bounds of a Memory Buffer</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>74</CWE_ID><Name>Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')</Name><Description>Product does not neutralize ${xyz} style expressions, allowing remote code execution. (log4shell vulnerability)</Description></Weakness><Weakness><CWE_ID>20</CWE_ID><Name>Improper Input Validation</Name><Description>crash via multiple "." characters in file extension</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>733</CWE_ID><Name>Compiler Optimization Removal or Modification of Security-critical Code</Name><Description>Chain: compiler optimization (CWE-733) removes or modifies code used to detect integer overflow (CWE-190), allowing out-of-bounds write (CWE-787).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Reflection Attack in Authentication Protocol</Name><Description>An adversary can abuse an authentication protocol susceptible to reflection attack in order to defeat it. Doing so allows the adversary illegitimate access to the target system, without possessing the requisite credentials. Reflection attacks are of great concern to authentication protocols that rely on a challenge-handshake or similar mechanism. An adversary can impersonate a legitimate user and can gain illegitimate access to the system by successfully mounting a reflection attack during authentication.</Description><Mitigations><Mitigation>The server must initiate the handshake by issuing the challenge. This ensures that the client has to respond before the exchange can move any further</Mitigation><Mitigation>The use of HMAC to hash the response from the server can also be used to thwart reflection. The server responds by returning its own challenge as well as hashing the client's challenge, its own challenge and the pre-shared secret. Requiring the client to respond with the HMAC of the two challenges ensures that only the possessor of a valid pre-shared secret can successfully hash in the two values.</Mitigation><Mitigation>Introducing a random nonce with each new connection ensures that the attacker cannot employ two connections to attack the authentication protocol</Mitigation></Mitigations><Examples><Example><Reference>A single sign-on solution for a network uses a fixed pre-shared key with its clients to initiate the sign-on process in order to avoid eavesdropping on the initial exchanges. An attacker can use a reflection attack to mimic a trusted client on the network to participate in the sign-on exchange.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>301</CWE_ID><Name>Reflection Attack in an Authentication Protocol</Name><Description>product authentication succeeds if user-provided MD5 hash matches the hash in its database; this can be subjected to replay attacks.</Description></Weakness><Weakness><CWE_ID>303</CWE_ID><Name>Incorrect Implementation of Authentication Algorithm</Name><Description>Conditional should have been an 'or' not an 'and'.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: XSS in IMG Tags</Name><Description>This attack pattern has been deprecated as it is contained in the existing attack pattern "CAPEC-18 : XSS Targeting Non-Script Elements". Please refer to this other CAPEC going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>WASC</Taxonomy_Name><Entry_ID>03</Entry_ID><Entry_Name>Integer Overflows</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Forced Integer Overflow</Name><Description>This attack forces an integer variable to go out of range. The integer variable is often used as an offset such as size of memory allocation or similarly. The attacker would typically control the value of such variable and try to get it out of range. For instance the integer in question is incremented past the maximum possible value, it may wrap to become a very small, or negative number, therefore providing a very incorrect value which can lead to unexpected behavior. At worst the attacker can execute arbitrary code.</Description><Mitigations><Mitigation>Use a language or compiler that performs automatic bounds checking.</Mitigation><Mitigation>Carefully review the service's implementation before making it available to user. For instance you can use manual or automated code review to uncover vulnerabilities such as integer overflow.</Mitigation><Mitigation>Use an abstraction library to abstract away risky APIs. Not a complete solution.</Mitigation><Mitigation>Always do bound checking before consuming user input data.</Mitigation></Mitigations><Examples><Example><Reference>The following code illustrates an integer overflow. The declaration of total integer as "unsigned short int" assumes that the length of the first and second arguments fits in such an integer [REF-547], [REF-548].</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>190</CWE_ID><Name>Integer Overflow or Wraparound</Name><Description>Chain: an integer overflow (CWE-190) in the image size calculation causes an infinite loop (CWE-835) which sequentially allocates buffers without limits (CWE-1325) until the stack is full.</Description></Weakness><Weakness><CWE_ID>128</CWE_ID><Name>Wrap-around Error</Name><Description>Wrap around errors occur whenever a value is incremented past the maximum value for its type and therefore "wraps around" to a very small, negative, or undefined value.</Description></Weakness><Weakness><CWE_ID>120</CWE_ID><Name>Buffer Copy without Checking Size of Input ('Classic Buffer Overflow')</Name><Description>By replacing a valid cookie value with an extremely long string of characters, an attacker may overflow the application's buffers.</Description></Weakness><Weakness><CWE_ID>122</CWE_ID><Name>Heap-based Buffer Overflow</Name><Description>Chain: integer overflow (CWE-190) causes a negative signed value, which later bypasses a maximum-only check (CWE-839), leading to heap-based buffer overflow (CWE-122).</Description></Weakness><Weakness><CWE_ID>196</CWE_ID><Name>Unsigned to Signed Conversion Error</Name><Description>The product uses an unsigned primitive and performs a cast to a signed primitive, which can produce an unexpected value if the value of the unsigned primitive can not be represented using a signed primitive.</Description></Weakness><Weakness><CWE_ID>680</CWE_ID><Name>Integer Overflow to Buffer Overflow</Name><Description>chain: unchecked message size metadata allows integer overflow (CWE-190) leading to buffer overflow (CWE-119).</Description></Weakness><Weakness><CWE_ID>697</CWE_ID><Name>Incorrect Comparison</Name><Description>Proxy performs incorrect comparison of request headers, leading to infoleak</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Log Injection-Tampering-Forging</Name><Description>This attack targets the log files of the target host. The attacker injects, manipulates or forges malicious log entries in the log file, allowing them to mislead a log audit, cover traces of attack, or perform other malicious actions. The target host is not properly controlling log access. As a result tainted data is resulting in the log files leading to a failure in accountability, non-repudiation and incident forensics capability.</Description><Mitigations><Mitigation>Carefully control access to physical log files.</Mitigation><Mitigation>Do not allow tainted data to be written in the log file without prior input validation. An allowlist may be used to properly validate the data.</Mitigation><Mitigation>Use synchronization to control the flow of execution.</Mitigation><Mitigation>Use static analysis tools to identify log forging vulnerabilities.</Mitigation><Mitigation>Avoid viewing logs with tools that may interpret control characters in the file, such as command-line shells.</Mitigation></Mitigations><Examples><Example><Reference>If a user submits the string "twenty-one" for val, the following entry is logged: However, if an attacker submits the string the following entry is logged: Clearly, attackers can use this same mechanism to insert arbitrary log entries.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>117</CWE_ID><Name>Improper Output Neutralization for Logs</Name><Description>Chain: inject fake log entries with fake timestamps using CRLF injection</Description></Weakness><Weakness><CWE_ID>75</CWE_ID><Name>Failure to Sanitize Special Elements into a Different Plane (Special Element Injection)</Name><Description>The product does not adequately filter user-controlled input for special elements with control implications.</Description></Weakness><Weakness><CWE_ID>150</CWE_ID><Name>Improper Neutralization of Escape, Meta, or Control Sequences</Name><Description>MFV. (multi-channel). Injection of control characters into log files that allow information hiding when using raw Unix programs to read the files.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1557</Entry_ID><Entry_Name>Adversary-in-the-Middle</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Adversary in the Middle (AiTM)</Name><Description>
            </Description><Mitigations><Mitigation>Ensure Public Keys are signed by a Certificate Authority</Mitigation><Mitigation>Encrypt communications using cryptography (e.g., SSL/TLS)</Mitigation><Mitigation>Use Strong mutual authentication to always fully authenticate both ends of any communications channel.</Mitigation><Mitigation>Exchange public keys using a secure channel</Mitigation></Mitigations><Examples><Example><Reference>In 2017, security researcher Jerry Decime discovered that Equifax mobile applications were not leveraging HTTPS in all areas. Although authentication was properly utilizing HTTPS, in addition to validating the root of trust of the server certificate, other areas of the application were using HTTP to communicate. Adversaries could then conduct MITM attacks on rogue WiFi or cellular networks and hijack the UX. This further allowed the adversaries to prompt users for sensitive data, which could then be obtained in the plaintext response. [REF-636]</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>300</CWE_ID><Name>Channel Accessible by Non-Endpoint</Name><Description>chain: incorrect "goto" in Apple SSL product bypasses certificate validation, allowing Adversry-in-the-Middle (AITM) attack (Apple "goto fail" bug). CWE-705 (Incorrect Control Flow Scoping) -&gt; CWE-561 (Dead Code) -&gt; CWE-295 (Improper Certificate Validation) -&gt; CWE-393 (Return of Wrong Status Code) -&gt; CWE-300 (Channel Accessible by Non-Endpoint).</Description></Weakness><Weakness><CWE_ID>290</CWE_ID><Name>Authentication Bypass by Spoofing</Name><Description>VOIP product allows authentication bypass using 127.0.0.1 in the Host header.</Description></Weakness><Weakness><CWE_ID>593</CWE_ID><Name>Authentication Bypass: OpenSSL CTX Object Modified after SSL Objects are Created</Name><Description>The product modifies the SSL context after connection creation has begun.</Description></Weakness><Weakness><CWE_ID>287</CWE_ID><Name>Improper Authentication</Name><Description>chain: product generates predictable MD5 hashes using a constant value combined with username, allowing authentication bypass.</Description></Weakness><Weakness><CWE_ID>294</CWE_ID><Name>Authentication Bypass by Capture-replay</Name><Description>Chain: cleartext transmission of the MD5 hash of password (CWE-319) enables attacks against a server that is susceptible to replay (CWE-294).</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>WSDL Scanning</Name><Description>This attack targets the WSDL interface made available by a web service. The attacker may scan the WSDL interface to reveal sensitive information about invocation patterns, underlying technology implementations and associated vulnerabilities. This type of probing is carried out to perform more serious attacks (e.g. parameter tampering, malicious content injection, command injection, etc.). WSDL files provide detailed information about the services ports and bindings available to consumers. For instance, the attacker can submit special characters or malicious content to the Web service and can cause a denial of service condition or illegal access to database records. In addition, the attacker may try to guess other private methods by using the information provided in the WSDL files.</Description><Mitigations><Mitigation>It is important to protect WSDL file or provide limited access to it.</Mitigation><Mitigation>Review the functions exposed by the WSDL interface (especially if you have used a tool to generate it). Make sure that none of them is vulnerable to injection.</Mitigation><Mitigation>Ensure the WSDL does not expose functions and APIs that were not intended to be exposed.</Mitigation><Mitigation>Pay attention to the function naming convention (within the WSDL interface). Easy to guess function name may be an entry point for attack.</Mitigation><Mitigation>Validate the received messages against the WSDL Schema. Incomplete solution.</Mitigation></Mitigations><Examples><Example><Reference>The Web Services Description Language (WSDL) allows a web service to advertise its capabilities by describing operations and parameters needed to access the service. As discussed in step 5 of this series, WSDL is often generated automatically, using utilities such as Java2WSDL, which takes a class or interface and builds a WSDL file in which interface methods are exposed as web services. Because WSDL generation often is automated, enterprising adversaries can use WSDL to gain insight into the both public and private services. For example, an organization converting legacy application functionality to a web services framework may inadvertently pass interfaces not intended for public consumption to a WSDL generation tool. The result will be SOAP interfaces that give access to private methods. Another, more subtle WSDL attack occurs when an enterprising attacker uses naming conventions to guess the names of unpublished methods that may be available on the server. For example, a service that offers a stock quote and trading service may publish query methods such as requestStockQuote in its WSDL. However, similar unpublished methods may be available on the server but not listed in the WSDL, such as executeStockQuote. A persistent adversary with time and a library of words and phrases can cycle thru common naming conventions (get, set, update, modify, and so on) to discover unpublished application programming interfaces that open doors into private data and functionality. Source : "Seven Steps to XML Mastery, Step 7: Ensure XML Security", Frank Coyle. See reference section.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>538</CWE_ID><Name>Insertion of Sensitive Information into Externally-Accessible File or Directory</Name><Description>SSH password for private key stored in build log</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Block Access to Libraries</Name><Description>An application typically makes calls to functions that are a part of libraries external to the application. These libraries may be part of the operating system or they may be third party libraries. It is possible that the application does not handle situations properly where access to these libraries has been blocked. Depending on the error handling within the application, blocked access to libraries may leave the system in an insecure state that could be leveraged by an attacker.</Description><Mitigations><Mitigation>Ensure that application handles situations where access to APIs in external libraries is not available securely. If the application cannot continue its execution safely it should fail in a consistent and secure fashion.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>589</CWE_ID><Name>Call to Non-ubiquitous API</Name><Description>The product uses an API function that does not exist on all versions of the target platform. This could cause portability problems or inconsistencies that allow denial of service or other consequences.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>Cryptanalysis</Name><Description>Cryptanalysis is a process of finding weaknesses in cryptographic algorithms and using these weaknesses to decipher the ciphertext without knowing the secret key (instance deduction). Sometimes the weakness is not in the cryptographic algorithm itself, but rather in how it is applied that makes cryptanalysis successful. An attacker may have other goals as well, such as: Total Break (finding the secret key), Global Deduction (finding a functionally equivalent algorithm for encryption and decryption that does not require knowledge of the secret key), Information Deduction (gaining some information about plaintexts or ciphertexts that was not previously known) and Distinguishing Algorithm (the attacker has the ability to distinguish the output of the encryption (ciphertext) from a random permutation of bits).</Description><Mitigations><Mitigation>Use proven cryptographic algorithms with recommended key sizes.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>327</CWE_ID><Name>Use of a Broken or Risky Cryptographic Algorithm</Name><Description>Product uses the hash of a hash for authentication, allowing attackers to gain privileges if they can obtain the original hash.</Description></Weakness><Weakness><CWE_ID>1204</CWE_ID><Name>Generation of Weak Initialization Vector (IV)</Name><Description>Blowfish-CBC implementation constructs an IV where each byte is calculated modulo 8 instead of modulo 256, resulting in less than 12 bits for the effective IV length, and less than 4096 possible IV values.</Description></Weakness><Weakness><CWE_ID>1240</CWE_ID><Name>Use of a Cryptographic Primitive with a Risky Implementation</Name><Description>Recommendation for Dual_EC_DRBG algorithm contains point Q constants that could simplify decryption</Description></Weakness><Weakness><CWE_ID>1241</CWE_ID><Name>Use of Predictable Algorithm in Random Number Generator</Name><Description>PHP framework uses mt_rand() function (Marsenne Twister) when generating tokens</Description></Weakness><Weakness><CWE_ID>1279</CWE_ID><Name>Cryptographic Operations are run Before Supporting Units are Ready</Name><Description>Performing cryptographic operations without ensuring that the supporting inputs are ready to supply valid data may compromise the cryptographic result.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1566</Entry_ID><Entry_Name>Phishing</Entry_Name></Taxonomy><Taxonomy><Taxonomy_Name>ATTACK</Taxonomy_Name><Entry_ID>1598</Entry_ID><Entry_Name>Phishing for Information</Entry_Name></Taxonomy></Taxonomy_Mappings><INFO><CAPEC_ID /><Name>Phishing</Name><Description>Phishing is a social engineering technique where an attacker masquerades as a legitimate entity with which the victim might do business in order to prompt the user to reveal some confidential information (very frequently authentication credentials) that can later be used by an attacker. Phishing is essentially a form of information gathering or "fishing" for information.</Description><Mitigations><Mitigation>Do not follow any links that you receive within your e-mails and certainly do not input any login credentials on the page that they take you too. Instead, call your Bank, PayPal, eBay, etc., and inquire about the problem. A safe practice would also be to type the URL of your bank in the browser directly and only then log in. Also, never reply to any e-mails that ask you to provide sensitive information of any kind.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses><Weakness><CWE_ID>451</CWE_ID><Name>User Interface (UI) Misrepresentation of Critical Information</Name><Description>Miscellaneous -- Web browser allows remote attackers to misrepresent the source of a file in the File Download dialog box.</Description></Weakness></Related_Weaknesses></INFO></CAPEC><CAPEC><Taxonomy_Mappings /><INFO><CAPEC_ID /><Name>DEPRECATED: XML Parser Attack</Name><Description>This attack pattern has been deprecated as it a generalization of CAPEC-230: XML Nested Payloads and CAPEC-231: XML Oversized Payloads. Please refer to these CAPECs going forward.</Description><Mitigations><Mitigation>No mitigation information available.</Mitigation></Mitigations><Examples><Example><Reference>No example information available.</Reference><Description /></Example></Examples><Related_Weaknesses /></INFO></CAPEC></CAPEC_CWE_Data>